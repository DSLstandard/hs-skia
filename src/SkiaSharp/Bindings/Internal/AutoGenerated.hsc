module SkiaSharp.Bindings.Internal.AutoGenerated where

import Foreign
import Foreign.C
import Foreign.C.Types
import Foreign.Storable
import Foreign.Storable.Offset

#include "c/sk_types.h"

-- | `sk_refcnt_t`
data SkRefCnt = SkRefCnt
  deriving (Show, Eq, Ord)
-- | `sk_nvrefcnt_t`
data SkNvRefCnt = SkNvRefCnt
  deriving (Show, Eq, Ord)
-- | `sk_flattenable_t`
data SkFlattenAble = SkFlattenAble
  deriving (Show, Eq, Ord)
-- | `sk_color_t`
type SkColor = Word32
-- | `sk_pmcolor_t`
type SkPmColor = Word32
-- | `sk_color4f_t`
data SkColor4F = SkColor4F
  { r :: CFloat
  -- ^ `fR`
  , g :: CFloat
  -- ^ `fG`
  , b :: CFloat
  -- ^ `fB`
  , a :: CFloat
  -- ^ `fA`
  } deriving (Show, Eq, Ord)
instance Offset "r" SkColor4F where rawOffset = (#offset sk_color4f_t, fR)
instance Offset "g" SkColor4F where rawOffset = (#offset sk_color4f_t, fG)
instance Offset "b" SkColor4F where rawOffset = (#offset sk_color4f_t, fB)
instance Offset "a" SkColor4F where rawOffset = (#offset sk_color4f_t, fA)
instance Storable SkColor4F where
  sizeOf _ = (#size sk_color4f_t)
  alignment _ = (#alignment sk_color4f_t)
  peek in'ptr = do
    r <- (#peek sk_color4f_t, fR) in'ptr
    g <- (#peek sk_color4f_t, fG) in'ptr
    b <- (#peek sk_color4f_t, fB) in'ptr
    a <- (#peek sk_color4f_t, fA) in'ptr
    pure SkColor4F{..}
  poke in'ptr in'value = do
    (#poke sk_color4f_t, fR) in'ptr in'value.r
    (#poke sk_color4f_t, fG) in'ptr in'value.g
    (#poke sk_color4f_t, fB) in'ptr in'value.b
    (#poke sk_color4f_t, fA) in'ptr in'value.a
-- | `sk_colortype_t`
newtype SkColorType = SkColorType (#type sk_colortype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_COLORTYPE`
skColorType'Unknown :: SkColorType
skColorType'Unknown = #const UNKNOWN_SK_COLORTYPE
-- | `ALPHA_8_SK_COLORTYPE`
skColorType'Alpha8 :: SkColorType
skColorType'Alpha8 = #const ALPHA_8_SK_COLORTYPE
-- | `RGB_565_SK_COLORTYPE`
skColorType'Rgb565 :: SkColorType
skColorType'Rgb565 = #const RGB_565_SK_COLORTYPE
-- | `ARGB_4444_SK_COLORTYPE`
skColorType'Argb4444 :: SkColorType
skColorType'Argb4444 = #const ARGB_4444_SK_COLORTYPE
-- | `RGBA_8888_SK_COLORTYPE`
skColorType'Rgba8888 :: SkColorType
skColorType'Rgba8888 = #const RGBA_8888_SK_COLORTYPE
-- | `RGB_888X_SK_COLORTYPE`
skColorType'Rgb888X :: SkColorType
skColorType'Rgb888X = #const RGB_888X_SK_COLORTYPE
-- | `BGRA_8888_SK_COLORTYPE`
skColorType'Bgra8888 :: SkColorType
skColorType'Bgra8888 = #const BGRA_8888_SK_COLORTYPE
-- | `RGBA_1010102_SK_COLORTYPE`
skColorType'Rgba1010102 :: SkColorType
skColorType'Rgba1010102 = #const RGBA_1010102_SK_COLORTYPE
-- | `BGRA_1010102_SK_COLORTYPE`
skColorType'Bgra1010102 :: SkColorType
skColorType'Bgra1010102 = #const BGRA_1010102_SK_COLORTYPE
-- | `RGB_101010X_SK_COLORTYPE`
skColorType'Rgb101010X :: SkColorType
skColorType'Rgb101010X = #const RGB_101010X_SK_COLORTYPE
-- | `BGR_101010X_SK_COLORTYPE`
skColorType'Bgr101010X :: SkColorType
skColorType'Bgr101010X = #const BGR_101010X_SK_COLORTYPE
-- | `BGR_101010X_XR_SK_COLORTYPE`
skColorType'Bgr101010XXr :: SkColorType
skColorType'Bgr101010XXr = #const BGR_101010X_XR_SK_COLORTYPE
-- | `RGBA_10X6_SK_COLORTYPE`
skColorType'Rgba10X6 :: SkColorType
skColorType'Rgba10X6 = #const RGBA_10X6_SK_COLORTYPE
-- | `GRAY_8_SK_COLORTYPE`
skColorType'Gray8 :: SkColorType
skColorType'Gray8 = #const GRAY_8_SK_COLORTYPE
-- | `RGBA_F16_NORM_SK_COLORTYPE`
skColorType'RgbaF16Norm :: SkColorType
skColorType'RgbaF16Norm = #const RGBA_F16_NORM_SK_COLORTYPE
-- | `RGBA_F16_SK_COLORTYPE`
skColorType'RgbaF16 :: SkColorType
skColorType'RgbaF16 = #const RGBA_F16_SK_COLORTYPE
-- | `RGBA_F32_SK_COLORTYPE`
skColorType'RgbaF32 :: SkColorType
skColorType'RgbaF32 = #const RGBA_F32_SK_COLORTYPE
-- | `R8G8_UNORM_SK_COLORTYPE`
skColorType'R8G8UNorm :: SkColorType
skColorType'R8G8UNorm = #const R8G8_UNORM_SK_COLORTYPE
-- | `A16_FLOAT_SK_COLORTYPE`
skColorType'A16Float :: SkColorType
skColorType'A16Float = #const A16_FLOAT_SK_COLORTYPE
-- | `R16G16_FLOAT_SK_COLORTYPE`
skColorType'R16G16Float :: SkColorType
skColorType'R16G16Float = #const R16G16_FLOAT_SK_COLORTYPE
-- | `A16_UNORM_SK_COLORTYPE`
skColorType'A16UNorm :: SkColorType
skColorType'A16UNorm = #const A16_UNORM_SK_COLORTYPE
-- | `R16G16_UNORM_SK_COLORTYPE`
skColorType'R16G16UNorm :: SkColorType
skColorType'R16G16UNorm = #const R16G16_UNORM_SK_COLORTYPE
-- | `R16G16B16A16_UNORM_SK_COLORTYPE`
skColorType'R16G16B16A16UNorm :: SkColorType
skColorType'R16G16B16A16UNorm = #const R16G16B16A16_UNORM_SK_COLORTYPE
-- | `SRGBA_8888_SK_COLORTYPE`
skColorType'Srgba8888 :: SkColorType
skColorType'Srgba8888 = #const SRGBA_8888_SK_COLORTYPE
-- | `R8_UNORM_SK_COLORTYPE`
skColorType'R8UNorm :: SkColorType
skColorType'R8UNorm = #const R8_UNORM_SK_COLORTYPE
-- | `sk_alphatype_t`
newtype SkAlphaType = SkAlphaType (#type sk_alphatype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_ALPHATYPE`
skAlphaType'Unknown :: SkAlphaType
skAlphaType'Unknown = #const UNKNOWN_SK_ALPHATYPE
-- | `OPAQUE_SK_ALPHATYPE`
skAlphaType'Opaque :: SkAlphaType
skAlphaType'Opaque = #const OPAQUE_SK_ALPHATYPE
-- | `PREMUL_SK_ALPHATYPE`
skAlphaType'Premul :: SkAlphaType
skAlphaType'Premul = #const PREMUL_SK_ALPHATYPE
-- | `UNPREMUL_SK_ALPHATYPE`
skAlphaType'Unpremul :: SkAlphaType
skAlphaType'Unpremul = #const UNPREMUL_SK_ALPHATYPE
-- | `sk_pixelgeometry_t`
newtype SkPixelGeometry = SkPixelGeometry (#type sk_pixelgeometry_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_PIXELGEOMETRY`
skPixelGeometry'Unknown :: SkPixelGeometry
skPixelGeometry'Unknown = #const UNKNOWN_SK_PIXELGEOMETRY
-- | `RGB_H_SK_PIXELGEOMETRY`
skPixelGeometry'RgbH :: SkPixelGeometry
skPixelGeometry'RgbH = #const RGB_H_SK_PIXELGEOMETRY
-- | `BGR_H_SK_PIXELGEOMETRY`
skPixelGeometry'BgrH :: SkPixelGeometry
skPixelGeometry'BgrH = #const BGR_H_SK_PIXELGEOMETRY
-- | `RGB_V_SK_PIXELGEOMETRY`
skPixelGeometry'RgbV :: SkPixelGeometry
skPixelGeometry'RgbV = #const RGB_V_SK_PIXELGEOMETRY
-- | `BGR_V_SK_PIXELGEOMETRY`
skPixelGeometry'BgrV :: SkPixelGeometry
skPixelGeometry'BgrV = #const BGR_V_SK_PIXELGEOMETRY
-- | `sk_surfaceprops_flags_t`
newtype SkSurfacePropsFlags = SkSurfacePropsFlags (#type sk_surfaceprops_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_SURFACE_PROPS_FLAGS`
skSurfacePropsFlags'None :: SkSurfacePropsFlags
skSurfacePropsFlags'None = #const NONE_SK_SURFACE_PROPS_FLAGS
-- | `USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS`
skSurfacePropsFlags'UseDeviceIndependentFonts :: SkSurfacePropsFlags
skSurfacePropsFlags'UseDeviceIndependentFonts = #const USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS
-- | `sk_surfaceprops_t`
data SkSurfaceProps = SkSurfaceProps
  deriving (Show, Eq, Ord)
-- | `sk_point_t`
data SkPoint = SkPoint
  { x :: CFloat
  -- ^ `x`
  , y :: CFloat
  -- ^ `y`
  } deriving (Show, Eq, Ord)
instance Offset "x" SkPoint where rawOffset = (#offset sk_point_t, x)
instance Offset "y" SkPoint where rawOffset = (#offset sk_point_t, y)
instance Storable SkPoint where
  sizeOf _ = (#size sk_point_t)
  alignment _ = (#alignment sk_point_t)
  peek in'ptr = do
    x <- (#peek sk_point_t, x) in'ptr
    y <- (#peek sk_point_t, y) in'ptr
    pure SkPoint{..}
  poke in'ptr in'value = do
    (#poke sk_point_t, x) in'ptr in'value.x
    (#poke sk_point_t, y) in'ptr in'value.y
-- | `sk_vector_t`
type SkVector = SkPoint
-- | `sk_irect_t`
data SkIRect = SkIRect
  { left :: Int32
  -- ^ `left`
  , top :: Int32
  -- ^ `top`
  , right :: Int32
  -- ^ `right`
  , bottom :: Int32
  -- ^ `bottom`
  } deriving (Show, Eq, Ord)
instance Offset "left" SkIRect where rawOffset = (#offset sk_irect_t, left)
instance Offset "top" SkIRect where rawOffset = (#offset sk_irect_t, top)
instance Offset "right" SkIRect where rawOffset = (#offset sk_irect_t, right)
instance Offset "bottom" SkIRect where rawOffset = (#offset sk_irect_t, bottom)
instance Storable SkIRect where
  sizeOf _ = (#size sk_irect_t)
  alignment _ = (#alignment sk_irect_t)
  peek in'ptr = do
    left <- (#peek sk_irect_t, left) in'ptr
    top <- (#peek sk_irect_t, top) in'ptr
    right <- (#peek sk_irect_t, right) in'ptr
    bottom <- (#peek sk_irect_t, bottom) in'ptr
    pure SkIRect{..}
  poke in'ptr in'value = do
    (#poke sk_irect_t, left) in'ptr in'value.left
    (#poke sk_irect_t, top) in'ptr in'value.top
    (#poke sk_irect_t, right) in'ptr in'value.right
    (#poke sk_irect_t, bottom) in'ptr in'value.bottom
-- | `sk_rect_t`
data SkRect = SkRect
  { left :: CFloat
  -- ^ `left`
  , top :: CFloat
  -- ^ `top`
  , right :: CFloat
  -- ^ `right`
  , bottom :: CFloat
  -- ^ `bottom`
  } deriving (Show, Eq, Ord)
instance Offset "left" SkRect where rawOffset = (#offset sk_rect_t, left)
instance Offset "top" SkRect where rawOffset = (#offset sk_rect_t, top)
instance Offset "right" SkRect where rawOffset = (#offset sk_rect_t, right)
instance Offset "bottom" SkRect where rawOffset = (#offset sk_rect_t, bottom)
instance Storable SkRect where
  sizeOf _ = (#size sk_rect_t)
  alignment _ = (#alignment sk_rect_t)
  peek in'ptr = do
    left <- (#peek sk_rect_t, left) in'ptr
    top <- (#peek sk_rect_t, top) in'ptr
    right <- (#peek sk_rect_t, right) in'ptr
    bottom <- (#peek sk_rect_t, bottom) in'ptr
    pure SkRect{..}
  poke in'ptr in'value = do
    (#poke sk_rect_t, left) in'ptr in'value.left
    (#poke sk_rect_t, top) in'ptr in'value.top
    (#poke sk_rect_t, right) in'ptr in'value.right
    (#poke sk_rect_t, bottom) in'ptr in'value.bottom
-- | `sk_matrix_t`
data SkMatrix = SkMatrix
  { scaleX :: CFloat
  -- ^ `scaleX`
  , skewX :: CFloat
  -- ^ `skewX`
  , transX :: CFloat
  -- ^ `transX`
  , skewY :: CFloat
  -- ^ `skewY`
  , scaleY :: CFloat
  -- ^ `scaleY`
  , transY :: CFloat
  -- ^ `transY`
  , persp0 :: CFloat
  -- ^ `persp0`
  , persp1 :: CFloat
  -- ^ `persp1`
  , persp2 :: CFloat
  -- ^ `persp2`
  } deriving (Show, Eq, Ord)
instance Offset "scaleX" SkMatrix where rawOffset = (#offset sk_matrix_t, scaleX)
instance Offset "skewX" SkMatrix where rawOffset = (#offset sk_matrix_t, skewX)
instance Offset "transX" SkMatrix where rawOffset = (#offset sk_matrix_t, transX)
instance Offset "skewY" SkMatrix where rawOffset = (#offset sk_matrix_t, skewY)
instance Offset "scaleY" SkMatrix where rawOffset = (#offset sk_matrix_t, scaleY)
instance Offset "transY" SkMatrix where rawOffset = (#offset sk_matrix_t, transY)
instance Offset "persp0" SkMatrix where rawOffset = (#offset sk_matrix_t, persp0)
instance Offset "persp1" SkMatrix where rawOffset = (#offset sk_matrix_t, persp1)
instance Offset "persp2" SkMatrix where rawOffset = (#offset sk_matrix_t, persp2)
instance Storable SkMatrix where
  sizeOf _ = (#size sk_matrix_t)
  alignment _ = (#alignment sk_matrix_t)
  peek in'ptr = do
    scaleX <- (#peek sk_matrix_t, scaleX) in'ptr
    skewX <- (#peek sk_matrix_t, skewX) in'ptr
    transX <- (#peek sk_matrix_t, transX) in'ptr
    skewY <- (#peek sk_matrix_t, skewY) in'ptr
    scaleY <- (#peek sk_matrix_t, scaleY) in'ptr
    transY <- (#peek sk_matrix_t, transY) in'ptr
    persp0 <- (#peek sk_matrix_t, persp0) in'ptr
    persp1 <- (#peek sk_matrix_t, persp1) in'ptr
    persp2 <- (#peek sk_matrix_t, persp2) in'ptr
    pure SkMatrix{..}
  poke in'ptr in'value = do
    (#poke sk_matrix_t, scaleX) in'ptr in'value.scaleX
    (#poke sk_matrix_t, skewX) in'ptr in'value.skewX
    (#poke sk_matrix_t, transX) in'ptr in'value.transX
    (#poke sk_matrix_t, skewY) in'ptr in'value.skewY
    (#poke sk_matrix_t, scaleY) in'ptr in'value.scaleY
    (#poke sk_matrix_t, transY) in'ptr in'value.transY
    (#poke sk_matrix_t, persp0) in'ptr in'value.persp0
    (#poke sk_matrix_t, persp1) in'ptr in'value.persp1
    (#poke sk_matrix_t, persp2) in'ptr in'value.persp2
-- | `sk_matrix44_t`
data SkMatrix44 = SkMatrix44
  { m00 :: CFloat
  -- ^ `m00`
  , m01 :: CFloat
  -- ^ `m01`
  , m02 :: CFloat
  -- ^ `m02`
  , m03 :: CFloat
  -- ^ `m03`
  , m10 :: CFloat
  -- ^ `m10`
  , m11 :: CFloat
  -- ^ `m11`
  , m12 :: CFloat
  -- ^ `m12`
  , m13 :: CFloat
  -- ^ `m13`
  , m20 :: CFloat
  -- ^ `m20`
  , m21 :: CFloat
  -- ^ `m21`
  , m22 :: CFloat
  -- ^ `m22`
  , m23 :: CFloat
  -- ^ `m23`
  , m30 :: CFloat
  -- ^ `m30`
  , m31 :: CFloat
  -- ^ `m31`
  , m32 :: CFloat
  -- ^ `m32`
  , m33 :: CFloat
  -- ^ `m33`
  } deriving (Show, Eq, Ord)
instance Offset "m00" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m00)
instance Offset "m01" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m01)
instance Offset "m02" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m02)
instance Offset "m03" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m03)
instance Offset "m10" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m10)
instance Offset "m11" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m11)
instance Offset "m12" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m12)
instance Offset "m13" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m13)
instance Offset "m20" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m20)
instance Offset "m21" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m21)
instance Offset "m22" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m22)
instance Offset "m23" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m23)
instance Offset "m30" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m30)
instance Offset "m31" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m31)
instance Offset "m32" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m32)
instance Offset "m33" SkMatrix44 where rawOffset = (#offset sk_matrix44_t, m33)
instance Storable SkMatrix44 where
  sizeOf _ = (#size sk_matrix44_t)
  alignment _ = (#alignment sk_matrix44_t)
  peek in'ptr = do
    m00 <- (#peek sk_matrix44_t, m00) in'ptr
    m01 <- (#peek sk_matrix44_t, m01) in'ptr
    m02 <- (#peek sk_matrix44_t, m02) in'ptr
    m03 <- (#peek sk_matrix44_t, m03) in'ptr
    m10 <- (#peek sk_matrix44_t, m10) in'ptr
    m11 <- (#peek sk_matrix44_t, m11) in'ptr
    m12 <- (#peek sk_matrix44_t, m12) in'ptr
    m13 <- (#peek sk_matrix44_t, m13) in'ptr
    m20 <- (#peek sk_matrix44_t, m20) in'ptr
    m21 <- (#peek sk_matrix44_t, m21) in'ptr
    m22 <- (#peek sk_matrix44_t, m22) in'ptr
    m23 <- (#peek sk_matrix44_t, m23) in'ptr
    m30 <- (#peek sk_matrix44_t, m30) in'ptr
    m31 <- (#peek sk_matrix44_t, m31) in'ptr
    m32 <- (#peek sk_matrix44_t, m32) in'ptr
    m33 <- (#peek sk_matrix44_t, m33) in'ptr
    pure SkMatrix44{..}
  poke in'ptr in'value = do
    (#poke sk_matrix44_t, m00) in'ptr in'value.m00
    (#poke sk_matrix44_t, m01) in'ptr in'value.m01
    (#poke sk_matrix44_t, m02) in'ptr in'value.m02
    (#poke sk_matrix44_t, m03) in'ptr in'value.m03
    (#poke sk_matrix44_t, m10) in'ptr in'value.m10
    (#poke sk_matrix44_t, m11) in'ptr in'value.m11
    (#poke sk_matrix44_t, m12) in'ptr in'value.m12
    (#poke sk_matrix44_t, m13) in'ptr in'value.m13
    (#poke sk_matrix44_t, m20) in'ptr in'value.m20
    (#poke sk_matrix44_t, m21) in'ptr in'value.m21
    (#poke sk_matrix44_t, m22) in'ptr in'value.m22
    (#poke sk_matrix44_t, m23) in'ptr in'value.m23
    (#poke sk_matrix44_t, m30) in'ptr in'value.m30
    (#poke sk_matrix44_t, m31) in'ptr in'value.m31
    (#poke sk_matrix44_t, m32) in'ptr in'value.m32
    (#poke sk_matrix44_t, m33) in'ptr in'value.m33
-- | `sk_canvas_t`
data SkCanvas = SkCanvas
  deriving (Show, Eq, Ord)
-- | `sk_nodraw_canvas_t`
data SkNoDrawCanvas = SkNoDrawCanvas
  deriving (Show, Eq, Ord)
-- | `sk_nway_canvas_t`
data SkNWayCanvas = SkNWayCanvas
  deriving (Show, Eq, Ord)
-- | `sk_overdraw_canvas_t`
data SkOverdrawCanvas = SkOverdrawCanvas
  deriving (Show, Eq, Ord)
-- | `sk_data_t`
data SkData = SkData
  deriving (Show, Eq, Ord)
-- | `sk_drawable_t`
data SkDrawAble = SkDrawAble
  deriving (Show, Eq, Ord)
-- | `sk_image_t`
data SkImage = SkImage
  deriving (Show, Eq, Ord)
-- | `sk_maskfilter_t`
data SkMaskFilter = SkMaskFilter
  deriving (Show, Eq, Ord)
-- | `sk_paint_t`
data SkPaint = SkPaint
  deriving (Show, Eq, Ord)
-- | `sk_font_t`
data SkFont = SkFont
  deriving (Show, Eq, Ord)
-- | `sk_path_t`
data SkPath = SkPath
  deriving (Show, Eq, Ord)
-- | `sk_picture_t`
data SkPicture = SkPicture
  deriving (Show, Eq, Ord)
-- | `sk_picture_recorder_t`
data SkPictureRecorder = SkPictureRecorder
  deriving (Show, Eq, Ord)
-- | `sk_bbh_factory_t`
data SkBbhFactory = SkBbhFactory
  deriving (Show, Eq, Ord)
-- | `sk_rtree_factory_t`
data SkRTreeFactory = SkRTreeFactory
  deriving (Show, Eq, Ord)
-- | `sk_shader_t`
data SkShader = SkShader
  deriving (Show, Eq, Ord)
-- | `sk_surface_t`
data SkSurface = SkSurface
  deriving (Show, Eq, Ord)
-- | `sk_region_t`
data SkRegion = SkRegion
  deriving (Show, Eq, Ord)
-- | `sk_region_iterator_t`
data SkRegionIterator = SkRegionIterator
  deriving (Show, Eq, Ord)
-- | `sk_region_cliperator_t`
data SkRegionCliperator = SkRegionCliperator
  deriving (Show, Eq, Ord)
-- | `sk_region_spanerator_t`
data SkRegionSpanerator = SkRegionSpanerator
  deriving (Show, Eq, Ord)
-- | `sk_blendmode_t`
newtype SkBlendMode = SkBlendMode (#type sk_blendmode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CLEAR_SK_BLENDMODE`
skBlendMode'Clear :: SkBlendMode
skBlendMode'Clear = #const CLEAR_SK_BLENDMODE
-- | `SRC_SK_BLENDMODE`
skBlendMode'Src :: SkBlendMode
skBlendMode'Src = #const SRC_SK_BLENDMODE
-- | `DST_SK_BLENDMODE`
skBlendMode'Dst :: SkBlendMode
skBlendMode'Dst = #const DST_SK_BLENDMODE
-- | `SRCOVER_SK_BLENDMODE`
skBlendMode'SrcOver :: SkBlendMode
skBlendMode'SrcOver = #const SRCOVER_SK_BLENDMODE
-- | `DSTOVER_SK_BLENDMODE`
skBlendMode'DstOver :: SkBlendMode
skBlendMode'DstOver = #const DSTOVER_SK_BLENDMODE
-- | `SRCIN_SK_BLENDMODE`
skBlendMode'SrcIn :: SkBlendMode
skBlendMode'SrcIn = #const SRCIN_SK_BLENDMODE
-- | `DSTIN_SK_BLENDMODE`
skBlendMode'DstIn :: SkBlendMode
skBlendMode'DstIn = #const DSTIN_SK_BLENDMODE
-- | `SRCOUT_SK_BLENDMODE`
skBlendMode'SrcOut :: SkBlendMode
skBlendMode'SrcOut = #const SRCOUT_SK_BLENDMODE
-- | `DSTOUT_SK_BLENDMODE`
skBlendMode'DstOut :: SkBlendMode
skBlendMode'DstOut = #const DSTOUT_SK_BLENDMODE
-- | `SRCATOP_SK_BLENDMODE`
skBlendMode'SrcAtop :: SkBlendMode
skBlendMode'SrcAtop = #const SRCATOP_SK_BLENDMODE
-- | `DSTATOP_SK_BLENDMODE`
skBlendMode'DstAtop :: SkBlendMode
skBlendMode'DstAtop = #const DSTATOP_SK_BLENDMODE
-- | `XOR_SK_BLENDMODE`
skBlendMode'Xor :: SkBlendMode
skBlendMode'Xor = #const XOR_SK_BLENDMODE
-- | `PLUS_SK_BLENDMODE`
skBlendMode'Plus :: SkBlendMode
skBlendMode'Plus = #const PLUS_SK_BLENDMODE
-- | `MODULATE_SK_BLENDMODE`
skBlendMode'Modulate :: SkBlendMode
skBlendMode'Modulate = #const MODULATE_SK_BLENDMODE
-- | `SCREEN_SK_BLENDMODE`
skBlendMode'Screen :: SkBlendMode
skBlendMode'Screen = #const SCREEN_SK_BLENDMODE
-- | `OVERLAY_SK_BLENDMODE`
skBlendMode'Overlay :: SkBlendMode
skBlendMode'Overlay = #const OVERLAY_SK_BLENDMODE
-- | `DARKEN_SK_BLENDMODE`
skBlendMode'Darken :: SkBlendMode
skBlendMode'Darken = #const DARKEN_SK_BLENDMODE
-- | `LIGHTEN_SK_BLENDMODE`
skBlendMode'Lighten :: SkBlendMode
skBlendMode'Lighten = #const LIGHTEN_SK_BLENDMODE
-- | `COLORDODGE_SK_BLENDMODE`
skBlendMode'ColorDodge :: SkBlendMode
skBlendMode'ColorDodge = #const COLORDODGE_SK_BLENDMODE
-- | `COLORBURN_SK_BLENDMODE`
skBlendMode'ColorBurn :: SkBlendMode
skBlendMode'ColorBurn = #const COLORBURN_SK_BLENDMODE
-- | `HARDLIGHT_SK_BLENDMODE`
skBlendMode'HardLight :: SkBlendMode
skBlendMode'HardLight = #const HARDLIGHT_SK_BLENDMODE
-- | `SOFTLIGHT_SK_BLENDMODE`
skBlendMode'SoftLight :: SkBlendMode
skBlendMode'SoftLight = #const SOFTLIGHT_SK_BLENDMODE
-- | `DIFFERENCE_SK_BLENDMODE`
skBlendMode'Difference :: SkBlendMode
skBlendMode'Difference = #const DIFFERENCE_SK_BLENDMODE
-- | `EXCLUSION_SK_BLENDMODE`
skBlendMode'Exclusion :: SkBlendMode
skBlendMode'Exclusion = #const EXCLUSION_SK_BLENDMODE
-- | `MULTIPLY_SK_BLENDMODE`
skBlendMode'Multiply :: SkBlendMode
skBlendMode'Multiply = #const MULTIPLY_SK_BLENDMODE
-- | `HUE_SK_BLENDMODE`
skBlendMode'Hue :: SkBlendMode
skBlendMode'Hue = #const HUE_SK_BLENDMODE
-- | `SATURATION_SK_BLENDMODE`
skBlendMode'Saturation :: SkBlendMode
skBlendMode'Saturation = #const SATURATION_SK_BLENDMODE
-- | `COLOR_SK_BLENDMODE`
skBlendMode'Color :: SkBlendMode
skBlendMode'Color = #const COLOR_SK_BLENDMODE
-- | `LUMINOSITY_SK_BLENDMODE`
skBlendMode'Luminosity :: SkBlendMode
skBlendMode'Luminosity = #const LUMINOSITY_SK_BLENDMODE
-- | `sk_point3_t`
data SkPoint3 = SkPoint3
  { x :: CFloat
  -- ^ `x`
  , y :: CFloat
  -- ^ `y`
  , z :: CFloat
  -- ^ `z`
  } deriving (Show, Eq, Ord)
instance Offset "x" SkPoint3 where rawOffset = (#offset sk_point3_t, x)
instance Offset "y" SkPoint3 where rawOffset = (#offset sk_point3_t, y)
instance Offset "z" SkPoint3 where rawOffset = (#offset sk_point3_t, z)
instance Storable SkPoint3 where
  sizeOf _ = (#size sk_point3_t)
  alignment _ = (#alignment sk_point3_t)
  peek in'ptr = do
    x <- (#peek sk_point3_t, x) in'ptr
    y <- (#peek sk_point3_t, y) in'ptr
    z <- (#peek sk_point3_t, z) in'ptr
    pure SkPoint3{..}
  poke in'ptr in'value = do
    (#poke sk_point3_t, x) in'ptr in'value.x
    (#poke sk_point3_t, y) in'ptr in'value.y
    (#poke sk_point3_t, z) in'ptr in'value.z
-- | `sk_ipoint_t`
data SkIPoint = SkIPoint
  { x :: Int32
  -- ^ `x`
  , y :: Int32
  -- ^ `y`
  } deriving (Show, Eq, Ord)
instance Offset "x" SkIPoint where rawOffset = (#offset sk_ipoint_t, x)
instance Offset "y" SkIPoint where rawOffset = (#offset sk_ipoint_t, y)
instance Storable SkIPoint where
  sizeOf _ = (#size sk_ipoint_t)
  alignment _ = (#alignment sk_ipoint_t)
  peek in'ptr = do
    x <- (#peek sk_ipoint_t, x) in'ptr
    y <- (#peek sk_ipoint_t, y) in'ptr
    pure SkIPoint{..}
  poke in'ptr in'value = do
    (#poke sk_ipoint_t, x) in'ptr in'value.x
    (#poke sk_ipoint_t, y) in'ptr in'value.y
-- | `sk_size_t`
data SkSize = SkSize
  { w :: CFloat
  -- ^ `w`
  , h :: CFloat
  -- ^ `h`
  } deriving (Show, Eq, Ord)
instance Offset "w" SkSize where rawOffset = (#offset sk_size_t, w)
instance Offset "h" SkSize where rawOffset = (#offset sk_size_t, h)
instance Storable SkSize where
  sizeOf _ = (#size sk_size_t)
  alignment _ = (#alignment sk_size_t)
  peek in'ptr = do
    w <- (#peek sk_size_t, w) in'ptr
    h <- (#peek sk_size_t, h) in'ptr
    pure SkSize{..}
  poke in'ptr in'value = do
    (#poke sk_size_t, w) in'ptr in'value.w
    (#poke sk_size_t, h) in'ptr in'value.h
-- | `sk_isize_t`
data SkISize = SkISize
  { w :: Int32
  -- ^ `w`
  , h :: Int32
  -- ^ `h`
  } deriving (Show, Eq, Ord)
instance Offset "w" SkISize where rawOffset = (#offset sk_isize_t, w)
instance Offset "h" SkISize where rawOffset = (#offset sk_isize_t, h)
instance Storable SkISize where
  sizeOf _ = (#size sk_isize_t)
  alignment _ = (#alignment sk_isize_t)
  peek in'ptr = do
    w <- (#peek sk_isize_t, w) in'ptr
    h <- (#peek sk_isize_t, h) in'ptr
    pure SkISize{..}
  poke in'ptr in'value = do
    (#poke sk_isize_t, w) in'ptr in'value.w
    (#poke sk_isize_t, h) in'ptr in'value.h
-- | `sk_fontmetrics_t`
data SkFontMetrics = SkFontMetrics
  { flags :: Word32
  -- ^ `fFlags`
  , top :: CFloat
  -- ^ `fTop`
  , ascent :: CFloat
  -- ^ `fAscent`
  , descent :: CFloat
  -- ^ `fDescent`
  , bottom :: CFloat
  -- ^ `fBottom`
  , leading :: CFloat
  -- ^ `fLeading`
  , avgCharWidth :: CFloat
  -- ^ `fAvgCharWidth`
  , maxCharWidth :: CFloat
  -- ^ `fMaxCharWidth`
  , xMin :: CFloat
  -- ^ `fXMin`
  , xMax :: CFloat
  -- ^ `fXMax`
  , xHeight :: CFloat
  -- ^ `fXHeight`
  , capHeight :: CFloat
  -- ^ `fCapHeight`
  , underlineThickness :: CFloat
  -- ^ `fUnderlineThickness`
  , underlinePosition :: CFloat
  -- ^ `fUnderlinePosition`
  , strikeoutThickness :: CFloat
  -- ^ `fStrikeoutThickness`
  , strikeoutPosition :: CFloat
  -- ^ `fStrikeoutPosition`
  } deriving (Show, Eq, Ord)
instance Offset "flags" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fFlags)
instance Offset "top" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fTop)
instance Offset "ascent" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fAscent)
instance Offset "descent" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fDescent)
instance Offset "bottom" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fBottom)
instance Offset "leading" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fLeading)
instance Offset "avgCharWidth" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fAvgCharWidth)
instance Offset "maxCharWidth" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fMaxCharWidth)
instance Offset "xMin" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fXMin)
instance Offset "xMax" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fXMax)
instance Offset "xHeight" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fXHeight)
instance Offset "capHeight" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fCapHeight)
instance Offset "underlineThickness" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fUnderlineThickness)
instance Offset "underlinePosition" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fUnderlinePosition)
instance Offset "strikeoutThickness" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fStrikeoutThickness)
instance Offset "strikeoutPosition" SkFontMetrics where rawOffset = (#offset sk_fontmetrics_t, fStrikeoutPosition)
instance Storable SkFontMetrics where
  sizeOf _ = (#size sk_fontmetrics_t)
  alignment _ = (#alignment sk_fontmetrics_t)
  peek in'ptr = do
    flags <- (#peek sk_fontmetrics_t, fFlags) in'ptr
    top <- (#peek sk_fontmetrics_t, fTop) in'ptr
    ascent <- (#peek sk_fontmetrics_t, fAscent) in'ptr
    descent <- (#peek sk_fontmetrics_t, fDescent) in'ptr
    bottom <- (#peek sk_fontmetrics_t, fBottom) in'ptr
    leading <- (#peek sk_fontmetrics_t, fLeading) in'ptr
    avgCharWidth <- (#peek sk_fontmetrics_t, fAvgCharWidth) in'ptr
    maxCharWidth <- (#peek sk_fontmetrics_t, fMaxCharWidth) in'ptr
    xMin <- (#peek sk_fontmetrics_t, fXMin) in'ptr
    xMax <- (#peek sk_fontmetrics_t, fXMax) in'ptr
    xHeight <- (#peek sk_fontmetrics_t, fXHeight) in'ptr
    capHeight <- (#peek sk_fontmetrics_t, fCapHeight) in'ptr
    underlineThickness <- (#peek sk_fontmetrics_t, fUnderlineThickness) in'ptr
    underlinePosition <- (#peek sk_fontmetrics_t, fUnderlinePosition) in'ptr
    strikeoutThickness <- (#peek sk_fontmetrics_t, fStrikeoutThickness) in'ptr
    strikeoutPosition <- (#peek sk_fontmetrics_t, fStrikeoutPosition) in'ptr
    pure SkFontMetrics{..}
  poke in'ptr in'value = do
    (#poke sk_fontmetrics_t, fFlags) in'ptr in'value.flags
    (#poke sk_fontmetrics_t, fTop) in'ptr in'value.top
    (#poke sk_fontmetrics_t, fAscent) in'ptr in'value.ascent
    (#poke sk_fontmetrics_t, fDescent) in'ptr in'value.descent
    (#poke sk_fontmetrics_t, fBottom) in'ptr in'value.bottom
    (#poke sk_fontmetrics_t, fLeading) in'ptr in'value.leading
    (#poke sk_fontmetrics_t, fAvgCharWidth) in'ptr in'value.avgCharWidth
    (#poke sk_fontmetrics_t, fMaxCharWidth) in'ptr in'value.maxCharWidth
    (#poke sk_fontmetrics_t, fXMin) in'ptr in'value.xMin
    (#poke sk_fontmetrics_t, fXMax) in'ptr in'value.xMax
    (#poke sk_fontmetrics_t, fXHeight) in'ptr in'value.xHeight
    (#poke sk_fontmetrics_t, fCapHeight) in'ptr in'value.capHeight
    (#poke sk_fontmetrics_t, fUnderlineThickness) in'ptr in'value.underlineThickness
    (#poke sk_fontmetrics_t, fUnderlinePosition) in'ptr in'value.underlinePosition
    (#poke sk_fontmetrics_t, fStrikeoutThickness) in'ptr in'value.strikeoutThickness
    (#poke sk_fontmetrics_t, fStrikeoutPosition) in'ptr in'value.strikeoutPosition
-- | `sk_string_t`
data SkString = SkString
  deriving (Show, Eq, Ord)
-- | `sk_bitmap_t`
data SkBitmap = SkBitmap
  deriving (Show, Eq, Ord)
-- | `sk_pixmap_t`
data SkPixmap = SkPixmap
  deriving (Show, Eq, Ord)
-- | `sk_colorfilter_t`
data SkColorFilter = SkColorFilter
  deriving (Show, Eq, Ord)
-- | `sk_imagefilter_t`
data SkImageFilter = SkImageFilter
  deriving (Show, Eq, Ord)
-- | `sk_blender_t`
data SkBlender = SkBlender
  deriving (Show, Eq, Ord)
-- | `sk_typeface_t`
data SkTypeface = SkTypeface
  deriving (Show, Eq, Ord)
-- | `sk_font_table_tag_t`
type SkFontTableTag = Word32
-- | `sk_fontmgr_t`
data SkFontMGr = SkFontMGr
  deriving (Show, Eq, Ord)
-- | `sk_fontstyle_t`
data SkFontStyle = SkFontStyle
  deriving (Show, Eq, Ord)
-- | `sk_fontstyleset_t`
data SkFontStyleSet = SkFontStyleSet
  deriving (Show, Eq, Ord)
-- | `sk_codec_t`
data SkCodec = SkCodec
  deriving (Show, Eq, Ord)
-- | `sk_colorspace_t`
data SkColorSpace = SkColorSpace
  deriving (Show, Eq, Ord)
-- | `sk_stream_t`
data SkStream = SkStream
  deriving (Show, Eq, Ord)
-- | `sk_stream_filestream_t`
data SkStreamFileStream = SkStreamFileStream
  deriving (Show, Eq, Ord)
-- | `sk_stream_asset_t`
data SkStreamAsset = SkStreamAsset
  deriving (Show, Eq, Ord)
-- | `sk_stream_memorystream_t`
data SkStreamMemoryStream = SkStreamMemoryStream
  deriving (Show, Eq, Ord)
-- | `sk_stream_streamrewindable_t`
data SkStreamStreamRewindable = SkStreamStreamRewindable
  deriving (Show, Eq, Ord)
-- | `sk_wstream_t`
data SkWStream = SkWStream
  deriving (Show, Eq, Ord)
-- | `sk_wstream_filestream_t`
data SkWStreamFileStream = SkWStreamFileStream
  deriving (Show, Eq, Ord)
-- | `sk_wstream_dynamicmemorystream_t`
data SkWStreamDynamicMemoryStream = SkWStreamDynamicMemoryStream
  deriving (Show, Eq, Ord)
-- | `sk_document_t`
data SkDocument = SkDocument
  deriving (Show, Eq, Ord)
-- | `sk_point_mode_t`
newtype SkPointMode = SkPointMode (#type sk_point_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `POINTS_SK_POINT_MODE`
skPointMode'Points :: SkPointMode
skPointMode'Points = #const POINTS_SK_POINT_MODE
-- | `LINES_SK_POINT_MODE`
skPointMode'Lines :: SkPointMode
skPointMode'Lines = #const LINES_SK_POINT_MODE
-- | `POLYGON_SK_POINT_MODE`
skPointMode'Polygon :: SkPointMode
skPointMode'Polygon = #const POLYGON_SK_POINT_MODE
-- | `sk_text_align_t`
newtype SkTextAlign = SkTextAlign (#type sk_text_align_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LEFT_SK_TEXT_ALIGN`
skTextAlign'Left :: SkTextAlign
skTextAlign'Left = #const LEFT_SK_TEXT_ALIGN
-- | `CENTER_SK_TEXT_ALIGN`
skTextAlign'Center :: SkTextAlign
skTextAlign'Center = #const CENTER_SK_TEXT_ALIGN
-- | `RIGHT_SK_TEXT_ALIGN`
skTextAlign'Right :: SkTextAlign
skTextAlign'Right = #const RIGHT_SK_TEXT_ALIGN
-- | `sk_text_encoding_t`
newtype SkTextEncoding = SkTextEncoding (#type sk_text_encoding_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UTF8_SK_TEXT_ENCODING`
skTextEncoding'Utf8 :: SkTextEncoding
skTextEncoding'Utf8 = #const UTF8_SK_TEXT_ENCODING
-- | `UTF16_SK_TEXT_ENCODING`
skTextEncoding'Utf16 :: SkTextEncoding
skTextEncoding'Utf16 = #const UTF16_SK_TEXT_ENCODING
-- | `UTF32_SK_TEXT_ENCODING`
skTextEncoding'Utf32 :: SkTextEncoding
skTextEncoding'Utf32 = #const UTF32_SK_TEXT_ENCODING
-- | `GLYPH_ID_SK_TEXT_ENCODING`
skTextEncoding'GlyphId :: SkTextEncoding
skTextEncoding'GlyphId = #const GLYPH_ID_SK_TEXT_ENCODING
-- | `sk_path_filltype_t`
newtype SkPathFillType = SkPathFillType (#type sk_path_filltype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `WINDING_SK_PATH_FILLTYPE`
skPathFillType'Winding :: SkPathFillType
skPathFillType'Winding = #const WINDING_SK_PATH_FILLTYPE
-- | `EVENODD_SK_PATH_FILLTYPE`
skPathFillType'EvenOdd :: SkPathFillType
skPathFillType'EvenOdd = #const EVENODD_SK_PATH_FILLTYPE
-- | `INVERSE_WINDING_SK_PATH_FILLTYPE`
skPathFillType'InverseWinding :: SkPathFillType
skPathFillType'InverseWinding = #const INVERSE_WINDING_SK_PATH_FILLTYPE
-- | `INVERSE_EVENODD_SK_PATH_FILLTYPE`
skPathFillType'InverseEvenOdd :: SkPathFillType
skPathFillType'InverseEvenOdd = #const INVERSE_EVENODD_SK_PATH_FILLTYPE
-- | `sk_font_style_slant_t`
newtype SkFontStyleSlant = SkFontStyleSlant (#type sk_font_style_slant_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UPRIGHT_SK_FONT_STYLE_SLANT`
skFontStyleSlant'Upright :: SkFontStyleSlant
skFontStyleSlant'Upright = #const UPRIGHT_SK_FONT_STYLE_SLANT
-- | `ITALIC_SK_FONT_STYLE_SLANT`
skFontStyleSlant'Italic :: SkFontStyleSlant
skFontStyleSlant'Italic = #const ITALIC_SK_FONT_STYLE_SLANT
-- | `OBLIQUE_SK_FONT_STYLE_SLANT`
skFontStyleSlant'Oblique :: SkFontStyleSlant
skFontStyleSlant'Oblique = #const OBLIQUE_SK_FONT_STYLE_SLANT
-- | `sk_color_channel_t`
newtype SkColorChannel = SkColorChannel (#type sk_color_channel_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `R_SK_COLOR_CHANNEL`
skColorChannel'R :: SkColorChannel
skColorChannel'R = #const R_SK_COLOR_CHANNEL
-- | `G_SK_COLOR_CHANNEL`
skColorChannel'G :: SkColorChannel
skColorChannel'G = #const G_SK_COLOR_CHANNEL
-- | `B_SK_COLOR_CHANNEL`
skColorChannel'B :: SkColorChannel
skColorChannel'B = #const B_SK_COLOR_CHANNEL
-- | `A_SK_COLOR_CHANNEL`
skColorChannel'A :: SkColorChannel
skColorChannel'A = #const A_SK_COLOR_CHANNEL
-- | `sk_region_op_t`
newtype SkRegionOp = SkRegionOp (#type sk_region_op_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_REGION_OP`
skRegionOp'Difference :: SkRegionOp
skRegionOp'Difference = #const DIFFERENCE_SK_REGION_OP
-- | `INTERSECT_SK_REGION_OP`
skRegionOp'Intersect :: SkRegionOp
skRegionOp'Intersect = #const INTERSECT_SK_REGION_OP
-- | `UNION_SK_REGION_OP`
skRegionOp'Union :: SkRegionOp
skRegionOp'Union = #const UNION_SK_REGION_OP
-- | `XOR_SK_REGION_OP`
skRegionOp'Xor :: SkRegionOp
skRegionOp'Xor = #const XOR_SK_REGION_OP
-- | `REVERSE_DIFFERENCE_SK_REGION_OP`
skRegionOp'ReverseDifference :: SkRegionOp
skRegionOp'ReverseDifference = #const REVERSE_DIFFERENCE_SK_REGION_OP
-- | `REPLACE_SK_REGION_OP`
skRegionOp'Replace :: SkRegionOp
skRegionOp'Replace = #const REPLACE_SK_REGION_OP
-- | `sk_clipop_t`
newtype SkClipOp = SkClipOp (#type sk_clipop_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_CLIPOP`
skClipOp'Difference :: SkClipOp
skClipOp'Difference = #const DIFFERENCE_SK_CLIPOP
-- | `INTERSECT_SK_CLIPOP`
skClipOp'Intersect :: SkClipOp
skClipOp'Intersect = #const INTERSECT_SK_CLIPOP
-- | `sk_encoded_image_format_t`
newtype SkEncodedImageFormat = SkEncodedImageFormat (#type sk_encoded_image_format_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `BMP_SK_ENCODED_FORMAT`
skEncodedImageFormat'Bmp :: SkEncodedImageFormat
skEncodedImageFormat'Bmp = #const BMP_SK_ENCODED_FORMAT
-- | `GIF_SK_ENCODED_FORMAT`
skEncodedImageFormat'Gif :: SkEncodedImageFormat
skEncodedImageFormat'Gif = #const GIF_SK_ENCODED_FORMAT
-- | `ICO_SK_ENCODED_FORMAT`
skEncodedImageFormat'Ico :: SkEncodedImageFormat
skEncodedImageFormat'Ico = #const ICO_SK_ENCODED_FORMAT
-- | `JPEG_SK_ENCODED_FORMAT`
skEncodedImageFormat'Jpeg :: SkEncodedImageFormat
skEncodedImageFormat'Jpeg = #const JPEG_SK_ENCODED_FORMAT
-- | `PNG_SK_ENCODED_FORMAT`
skEncodedImageFormat'Png :: SkEncodedImageFormat
skEncodedImageFormat'Png = #const PNG_SK_ENCODED_FORMAT
-- | `WBMP_SK_ENCODED_FORMAT`
skEncodedImageFormat'Wbmp :: SkEncodedImageFormat
skEncodedImageFormat'Wbmp = #const WBMP_SK_ENCODED_FORMAT
-- | `WEBP_SK_ENCODED_FORMAT`
skEncodedImageFormat'Webp :: SkEncodedImageFormat
skEncodedImageFormat'Webp = #const WEBP_SK_ENCODED_FORMAT
-- | `PKM_SK_ENCODED_FORMAT`
skEncodedImageFormat'Pkm :: SkEncodedImageFormat
skEncodedImageFormat'Pkm = #const PKM_SK_ENCODED_FORMAT
-- | `KTX_SK_ENCODED_FORMAT`
skEncodedImageFormat'Ktx :: SkEncodedImageFormat
skEncodedImageFormat'Ktx = #const KTX_SK_ENCODED_FORMAT
-- | `ASTC_SK_ENCODED_FORMAT`
skEncodedImageFormat'Astc :: SkEncodedImageFormat
skEncodedImageFormat'Astc = #const ASTC_SK_ENCODED_FORMAT
-- | `DNG_SK_ENCODED_FORMAT`
skEncodedImageFormat'Dng :: SkEncodedImageFormat
skEncodedImageFormat'Dng = #const DNG_SK_ENCODED_FORMAT
-- | `HEIF_SK_ENCODED_FORMAT`
skEncodedImageFormat'Heif :: SkEncodedImageFormat
skEncodedImageFormat'Heif = #const HEIF_SK_ENCODED_FORMAT
-- | `AVIF_SK_ENCODED_FORMAT`
skEncodedImageFormat'Avif :: SkEncodedImageFormat
skEncodedImageFormat'Avif = #const AVIF_SK_ENCODED_FORMAT
-- | `JPEGXL_SK_ENCODED_FORMAT`
skEncodedImageFormat'Jpegxl :: SkEncodedImageFormat
skEncodedImageFormat'Jpegxl = #const JPEGXL_SK_ENCODED_FORMAT
-- | `sk_encodedorigin_t`
newtype SkEncodedOrigin = SkEncodedOrigin (#type sk_encodedorigin_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_LEFT_SK_ENCODED_ORIGIN`
skEncodedOrigin'TopLeft :: SkEncodedOrigin
skEncodedOrigin'TopLeft = #const TOP_LEFT_SK_ENCODED_ORIGIN
-- | `TOP_RIGHT_SK_ENCODED_ORIGIN`
skEncodedOrigin'TopRight :: SkEncodedOrigin
skEncodedOrigin'TopRight = #const TOP_RIGHT_SK_ENCODED_ORIGIN
-- | `BOTTOM_RIGHT_SK_ENCODED_ORIGIN`
skEncodedOrigin'BottomRight :: SkEncodedOrigin
skEncodedOrigin'BottomRight = #const BOTTOM_RIGHT_SK_ENCODED_ORIGIN
-- | `BOTTOM_LEFT_SK_ENCODED_ORIGIN`
skEncodedOrigin'BottomLeft :: SkEncodedOrigin
skEncodedOrigin'BottomLeft = #const BOTTOM_LEFT_SK_ENCODED_ORIGIN
-- | `LEFT_TOP_SK_ENCODED_ORIGIN`
skEncodedOrigin'LeftTop :: SkEncodedOrigin
skEncodedOrigin'LeftTop = #const LEFT_TOP_SK_ENCODED_ORIGIN
-- | `RIGHT_TOP_SK_ENCODED_ORIGIN`
skEncodedOrigin'RightTop :: SkEncodedOrigin
skEncodedOrigin'RightTop = #const RIGHT_TOP_SK_ENCODED_ORIGIN
-- | `RIGHT_BOTTOM_SK_ENCODED_ORIGIN`
skEncodedOrigin'RightBottom :: SkEncodedOrigin
skEncodedOrigin'RightBottom = #const RIGHT_BOTTOM_SK_ENCODED_ORIGIN
-- | `LEFT_BOTTOM_SK_ENCODED_ORIGIN`
skEncodedOrigin'LeftBottom :: SkEncodedOrigin
skEncodedOrigin'LeftBottom = #const LEFT_BOTTOM_SK_ENCODED_ORIGIN
-- | `DEFAULT_SK_ENCODED_ORIGIN`
skEncodedOrigin'Default :: SkEncodedOrigin
skEncodedOrigin'Default = #const DEFAULT_SK_ENCODED_ORIGIN
-- | `sk_codec_result_t`
newtype SkCodecResult = SkCodecResult (#type sk_codec_result_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SUCCESS_SK_CODEC_RESULT`
skCodecResult'Success :: SkCodecResult
skCodecResult'Success = #const SUCCESS_SK_CODEC_RESULT
-- | `INCOMPLETE_INPUT_SK_CODEC_RESULT`
skCodecResult'IncompleteInput :: SkCodecResult
skCodecResult'IncompleteInput = #const INCOMPLETE_INPUT_SK_CODEC_RESULT
-- | `ERROR_IN_INPUT_SK_CODEC_RESULT`
skCodecResult'ErrorInInput :: SkCodecResult
skCodecResult'ErrorInInput = #const ERROR_IN_INPUT_SK_CODEC_RESULT
-- | `INVALID_CONVERSION_SK_CODEC_RESULT`
skCodecResult'InvalidConversion :: SkCodecResult
skCodecResult'InvalidConversion = #const INVALID_CONVERSION_SK_CODEC_RESULT
-- | `INVALID_SCALE_SK_CODEC_RESULT`
skCodecResult'InvalidScale :: SkCodecResult
skCodecResult'InvalidScale = #const INVALID_SCALE_SK_CODEC_RESULT
-- | `INVALID_PARAMETERS_SK_CODEC_RESULT`
skCodecResult'InvalidParameters :: SkCodecResult
skCodecResult'InvalidParameters = #const INVALID_PARAMETERS_SK_CODEC_RESULT
-- | `INVALID_INPUT_SK_CODEC_RESULT`
skCodecResult'InvalidInput :: SkCodecResult
skCodecResult'InvalidInput = #const INVALID_INPUT_SK_CODEC_RESULT
-- | `COULD_NOT_REWIND_SK_CODEC_RESULT`
skCodecResult'CouldNotRewind :: SkCodecResult
skCodecResult'CouldNotRewind = #const COULD_NOT_REWIND_SK_CODEC_RESULT
-- | `INTERNAL_ERROR_SK_CODEC_RESULT`
skCodecResult'InternalError :: SkCodecResult
skCodecResult'InternalError = #const INTERNAL_ERROR_SK_CODEC_RESULT
-- | `UNIMPLEMENTED_SK_CODEC_RESULT`
skCodecResult'Unimplemented :: SkCodecResult
skCodecResult'Unimplemented = #const UNIMPLEMENTED_SK_CODEC_RESULT
-- | `sk_codec_zero_initialized_t`
newtype SkCodecZeroInitialized = SkCodecZeroInitialized (#type sk_codec_zero_initialized_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `YES_SK_CODEC_ZERO_INITIALIZED`
skCodecZeroInitialized'Yes :: SkCodecZeroInitialized
skCodecZeroInitialized'Yes = #const YES_SK_CODEC_ZERO_INITIALIZED
-- | `NO_SK_CODEC_ZERO_INITIALIZED`
skCodecZeroInitialized'No :: SkCodecZeroInitialized
skCodecZeroInitialized'No = #const NO_SK_CODEC_ZERO_INITIALIZED
-- | `sk_codec_options_t`
data SkCodecOptions = SkCodecOptions
  { zeroInitialized :: SkCodecZeroInitialized
  -- ^ `fZeroInitialized`
  , subset :: Ptr (SkIRect)
  -- ^ `fSubset`
  , frameIndex :: CInt
  -- ^ `fFrameIndex`
  , priorFrame :: CInt
  -- ^ `fPriorFrame`
  } deriving (Show, Eq, Ord)
instance Offset "zeroInitialized" SkCodecOptions where rawOffset = (#offset sk_codec_options_t, fZeroInitialized)
instance Offset "subset" SkCodecOptions where rawOffset = (#offset sk_codec_options_t, fSubset)
instance Offset "frameIndex" SkCodecOptions where rawOffset = (#offset sk_codec_options_t, fFrameIndex)
instance Offset "priorFrame" SkCodecOptions where rawOffset = (#offset sk_codec_options_t, fPriorFrame)
instance Storable SkCodecOptions where
  sizeOf _ = (#size sk_codec_options_t)
  alignment _ = (#alignment sk_codec_options_t)
  peek in'ptr = do
    zeroInitialized <- (#peek sk_codec_options_t, fZeroInitialized) in'ptr
    subset <- (#peek sk_codec_options_t, fSubset) in'ptr
    frameIndex <- (#peek sk_codec_options_t, fFrameIndex) in'ptr
    priorFrame <- (#peek sk_codec_options_t, fPriorFrame) in'ptr
    pure SkCodecOptions{..}
  poke in'ptr in'value = do
    (#poke sk_codec_options_t, fZeroInitialized) in'ptr in'value.zeroInitialized
    (#poke sk_codec_options_t, fSubset) in'ptr in'value.subset
    (#poke sk_codec_options_t, fFrameIndex) in'ptr in'value.frameIndex
    (#poke sk_codec_options_t, fPriorFrame) in'ptr in'value.priorFrame
-- | `sk_codec_scanline_order_t`
newtype SkCodecScanLineOrder = SkCodecScanLineOrder (#type sk_codec_scanline_order_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_DOWN_SK_CODEC_SCANLINE_ORDER`
skCodecScanLineOrder'TopDown :: SkCodecScanLineOrder
skCodecScanLineOrder'TopDown = #const TOP_DOWN_SK_CODEC_SCANLINE_ORDER
-- | `BOTTOM_UP_SK_CODEC_SCANLINE_ORDER`
skCodecScanLineOrder'BottomUp :: SkCodecScanLineOrder
skCodecScanLineOrder'BottomUp = #const BOTTOM_UP_SK_CODEC_SCANLINE_ORDER
-- | `sk_path_verb_t`
newtype SkPathVerb = SkPathVerb (#type sk_path_verb_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `MOVE_SK_PATH_VERB`
skPathVerb'Move :: SkPathVerb
skPathVerb'Move = #const MOVE_SK_PATH_VERB
-- | `LINE_SK_PATH_VERB`
skPathVerb'Line :: SkPathVerb
skPathVerb'Line = #const LINE_SK_PATH_VERB
-- | `QUAD_SK_PATH_VERB`
skPathVerb'Quad :: SkPathVerb
skPathVerb'Quad = #const QUAD_SK_PATH_VERB
-- | `CONIC_SK_PATH_VERB`
skPathVerb'Conic :: SkPathVerb
skPathVerb'Conic = #const CONIC_SK_PATH_VERB
-- | `CUBIC_SK_PATH_VERB`
skPathVerb'Cubic :: SkPathVerb
skPathVerb'Cubic = #const CUBIC_SK_PATH_VERB
-- | `CLOSE_SK_PATH_VERB`
skPathVerb'Close :: SkPathVerb
skPathVerb'Close = #const CLOSE_SK_PATH_VERB
-- | `DONE_SK_PATH_VERB`
skPathVerb'Done :: SkPathVerb
skPathVerb'Done = #const DONE_SK_PATH_VERB
-- | `sk_path_iterator_t`
data SkPathIterator = SkPathIterator
  deriving (Show, Eq, Ord)
-- | `sk_path_rawiterator_t`
data SkPathRawIterator = SkPathRawIterator
  deriving (Show, Eq, Ord)
-- | `sk_path_add_mode_t`
newtype SkPathAddMode = SkPathAddMode (#type sk_path_add_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `APPEND_SK_PATH_ADD_MODE`
skPathAddMode'Append :: SkPathAddMode
skPathAddMode'Append = #const APPEND_SK_PATH_ADD_MODE
-- | `EXTEND_SK_PATH_ADD_MODE`
skPathAddMode'Extend :: SkPathAddMode
skPathAddMode'Extend = #const EXTEND_SK_PATH_ADD_MODE
-- | `sk_path_segment_mask_t`
newtype SkPathSegmentMask = SkPathSegmentMask (#type sk_path_segment_mask_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LINE_SK_PATH_SEGMENT_MASK`
skPathSegmentMask'Line :: SkPathSegmentMask
skPathSegmentMask'Line = #const LINE_SK_PATH_SEGMENT_MASK
-- | `QUAD_SK_PATH_SEGMENT_MASK`
skPathSegmentMask'Quad :: SkPathSegmentMask
skPathSegmentMask'Quad = #const QUAD_SK_PATH_SEGMENT_MASK
-- | `CONIC_SK_PATH_SEGMENT_MASK`
skPathSegmentMask'Conic :: SkPathSegmentMask
skPathSegmentMask'Conic = #const CONIC_SK_PATH_SEGMENT_MASK
-- | `CUBIC_SK_PATH_SEGMENT_MASK`
skPathSegmentMask'Cubic :: SkPathSegmentMask
skPathSegmentMask'Cubic = #const CUBIC_SK_PATH_SEGMENT_MASK
-- | `sk_path_effect_1d_style_t`
newtype SkPathEffect1dStyle = SkPathEffect1dStyle (#type sk_path_effect_1d_style_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TRANSLATE_SK_PATH_EFFECT_1D_STYLE`
skPathEffect1dStyle'Translate :: SkPathEffect1dStyle
skPathEffect1dStyle'Translate = #const TRANSLATE_SK_PATH_EFFECT_1D_STYLE
-- | `ROTATE_SK_PATH_EFFECT_1D_STYLE`
skPathEffect1dStyle'Rotate :: SkPathEffect1dStyle
skPathEffect1dStyle'Rotate = #const ROTATE_SK_PATH_EFFECT_1D_STYLE
-- | `MORPH_SK_PATH_EFFECT_1D_STYLE`
skPathEffect1dStyle'Morph :: SkPathEffect1dStyle
skPathEffect1dStyle'Morph = #const MORPH_SK_PATH_EFFECT_1D_STYLE
-- | `sk_path_effect_trim_mode_t`
newtype SkPathEffectTrimMode = SkPathEffectTrimMode (#type sk_path_effect_trim_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NORMAL_SK_PATH_EFFECT_TRIM_MODE`
skPathEffectTrimMode'Normal :: SkPathEffectTrimMode
skPathEffectTrimMode'Normal = #const NORMAL_SK_PATH_EFFECT_TRIM_MODE
-- | `INVERTED_SK_PATH_EFFECT_TRIM_MODE`
skPathEffectTrimMode'Inverted :: SkPathEffectTrimMode
skPathEffectTrimMode'Inverted = #const INVERTED_SK_PATH_EFFECT_TRIM_MODE
-- | `sk_path_effect_t`
data SkPathEffect = SkPathEffect
  deriving (Show, Eq, Ord)
-- | `sk_stroke_cap_t`
newtype SkStrokeCap = SkStrokeCap (#type sk_stroke_cap_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `BUTT_SK_STROKE_CAP`
skStrokeCap'Butt :: SkStrokeCap
skStrokeCap'Butt = #const BUTT_SK_STROKE_CAP
-- | `ROUND_SK_STROKE_CAP`
skStrokeCap'Round :: SkStrokeCap
skStrokeCap'Round = #const ROUND_SK_STROKE_CAP
-- | `SQUARE_SK_STROKE_CAP`
skStrokeCap'Square :: SkStrokeCap
skStrokeCap'Square = #const SQUARE_SK_STROKE_CAP
-- | `sk_stroke_join_t`
newtype SkStrokeJoin = SkStrokeJoin (#type sk_stroke_join_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `MITER_SK_STROKE_JOIN`
skStrokeJoin'Miter :: SkStrokeJoin
skStrokeJoin'Miter = #const MITER_SK_STROKE_JOIN
-- | `ROUND_SK_STROKE_JOIN`
skStrokeJoin'Round :: SkStrokeJoin
skStrokeJoin'Round = #const ROUND_SK_STROKE_JOIN
-- | `BEVEL_SK_STROKE_JOIN`
skStrokeJoin'Bevel :: SkStrokeJoin
skStrokeJoin'Bevel = #const BEVEL_SK_STROKE_JOIN
-- | `sk_shader_tilemode_t`
newtype SkShaderTileMode = SkShaderTileMode (#type sk_shader_tilemode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CLAMP_SK_SHADER_TILEMODE`
skShaderTileMode'Clamp :: SkShaderTileMode
skShaderTileMode'Clamp = #const CLAMP_SK_SHADER_TILEMODE
-- | `REPEAT_SK_SHADER_TILEMODE`
skShaderTileMode'Repeat :: SkShaderTileMode
skShaderTileMode'Repeat = #const REPEAT_SK_SHADER_TILEMODE
-- | `MIRROR_SK_SHADER_TILEMODE`
skShaderTileMode'Mirror :: SkShaderTileMode
skShaderTileMode'Mirror = #const MIRROR_SK_SHADER_TILEMODE
-- | `DECAL_SK_SHADER_TILEMODE`
skShaderTileMode'Decal :: SkShaderTileMode
skShaderTileMode'Decal = #const DECAL_SK_SHADER_TILEMODE
-- | `sk_blurstyle_t`
newtype SkBlurStyle = SkBlurStyle (#type sk_blurstyle_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NORMAL_SK_BLUR_STYLE`
skBlurStyle'Normal :: SkBlurStyle
skBlurStyle'Normal = #const NORMAL_SK_BLUR_STYLE
-- | `SOLID_SK_BLUR_STYLE`
skBlurStyle'Solid :: SkBlurStyle
skBlurStyle'Solid = #const SOLID_SK_BLUR_STYLE
-- | `OUTER_SK_BLUR_STYLE`
skBlurStyle'Outer :: SkBlurStyle
skBlurStyle'Outer = #const OUTER_SK_BLUR_STYLE
-- | `INNER_SK_BLUR_STYLE`
skBlurStyle'Inner :: SkBlurStyle
skBlurStyle'Inner = #const INNER_SK_BLUR_STYLE
-- | `sk_path_direction_t`
newtype SkPathDirection = SkPathDirection (#type sk_path_direction_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CW_SK_PATH_DIRECTION`
skPathDirection'Cw :: SkPathDirection
skPathDirection'Cw = #const CW_SK_PATH_DIRECTION
-- | `CCW_SK_PATH_DIRECTION`
skPathDirection'Ccw :: SkPathDirection
skPathDirection'Ccw = #const CCW_SK_PATH_DIRECTION
-- | `sk_path_arc_size_t`
newtype SkPathArcSize = SkPathArcSize (#type sk_path_arc_size_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SMALL_SK_PATH_ARC_SIZE`
skPathArcSize'Small :: SkPathArcSize
skPathArcSize'Small = #const SMALL_SK_PATH_ARC_SIZE
-- | `LARGE_SK_PATH_ARC_SIZE`
skPathArcSize'Large :: SkPathArcSize
skPathArcSize'Large = #const LARGE_SK_PATH_ARC_SIZE
-- | `sk_paint_style_t`
newtype SkPaintStyle = SkPaintStyle (#type sk_paint_style_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `FILL_SK_PAINT_STYLE`
skPaintStyle'Fill :: SkPaintStyle
skPaintStyle'Fill = #const FILL_SK_PAINT_STYLE
-- | `STROKE_SK_PAINT_STYLE`
skPaintStyle'Stroke :: SkPaintStyle
skPaintStyle'Stroke = #const STROKE_SK_PAINT_STYLE
-- | `STROKE_AND_FILL_SK_PAINT_STYLE`
skPaintStyle'StrokeAndFill :: SkPaintStyle
skPaintStyle'StrokeAndFill = #const STROKE_AND_FILL_SK_PAINT_STYLE
-- | `sk_font_hinting_t`
newtype SkFontHinting = SkFontHinting (#type sk_font_hinting_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_FONT_HINTING`
skFontHinting'None :: SkFontHinting
skFontHinting'None = #const NONE_SK_FONT_HINTING
-- | `SLIGHT_SK_FONT_HINTING`
skFontHinting'Slight :: SkFontHinting
skFontHinting'Slight = #const SLIGHT_SK_FONT_HINTING
-- | `NORMAL_SK_FONT_HINTING`
skFontHinting'Normal :: SkFontHinting
skFontHinting'Normal = #const NORMAL_SK_FONT_HINTING
-- | `FULL_SK_FONT_HINTING`
skFontHinting'Full :: SkFontHinting
skFontHinting'Full = #const FULL_SK_FONT_HINTING
-- | `sk_font_edging_t`
newtype SkFontEdging = SkFontEdging (#type sk_font_edging_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ALIAS_SK_FONT_EDGING`
skFontEdging'Alias :: SkFontEdging
skFontEdging'Alias = #const ALIAS_SK_FONT_EDGING
-- | `ANTIALIAS_SK_FONT_EDGING`
skFontEdging'AntiAlias :: SkFontEdging
skFontEdging'AntiAlias = #const ANTIALIAS_SK_FONT_EDGING
-- | `SUBPIXEL_ANTIALIAS_SK_FONT_EDGING`
skFontEdging'SubPixelAntiAlias :: SkFontEdging
skFontEdging'SubPixelAntiAlias = #const SUBPIXEL_ANTIALIAS_SK_FONT_EDGING
-- | `sk_pixelref_factory_t`
data SkPixelRefFactory = SkPixelRefFactory
  deriving (Show, Eq, Ord)
-- | `gr_surfaceorigin_t`
newtype GrSurfaceOrigin = GrSurfaceOrigin (#type gr_surfaceorigin_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_LEFT_GR_SURFACE_ORIGIN`
grSurfaceOrigin'TopLeft :: GrSurfaceOrigin
grSurfaceOrigin'TopLeft = #const TOP_LEFT_GR_SURFACE_ORIGIN
-- | `BOTTOM_LEFT_GR_SURFACE_ORIGIN`
grSurfaceOrigin'BottomLeft :: GrSurfaceOrigin
grSurfaceOrigin'BottomLeft = #const BOTTOM_LEFT_GR_SURFACE_ORIGIN
-- | `gr_context_options_t`
data GrContextOptions = GrContextOptions
  { avoidStencilBuffers :: CBool
  -- ^ `fAvoidStencilBuffers`
  , runtimeProgramCacheSize :: CInt
  -- ^ `fRuntimeProgramCacheSize`
  , glyphCacheTextureMaximumBytes :: CSize
  -- ^ `fGlyphCacheTextureMaximumBytes`
  , allowPathMaskCaching :: CBool
  -- ^ `fAllowPathMaskCaching`
  , doManualMipmapping :: CBool
  -- ^ `fDoManualMipmapping`
  , bufferMapThreshold :: CInt
  -- ^ `fBufferMapThreshold`
  } deriving (Show, Eq, Ord)
instance Offset "avoidStencilBuffers" GrContextOptions where rawOffset = (#offset gr_context_options_t, fAvoidStencilBuffers)
instance Offset "runtimeProgramCacheSize" GrContextOptions where rawOffset = (#offset gr_context_options_t, fRuntimeProgramCacheSize)
instance Offset "glyphCacheTextureMaximumBytes" GrContextOptions where rawOffset = (#offset gr_context_options_t, fGlyphCacheTextureMaximumBytes)
instance Offset "allowPathMaskCaching" GrContextOptions where rawOffset = (#offset gr_context_options_t, fAllowPathMaskCaching)
instance Offset "doManualMipmapping" GrContextOptions where rawOffset = (#offset gr_context_options_t, fDoManualMipmapping)
instance Offset "bufferMapThreshold" GrContextOptions where rawOffset = (#offset gr_context_options_t, fBufferMapThreshold)
instance Storable GrContextOptions where
  sizeOf _ = (#size gr_context_options_t)
  alignment _ = (#alignment gr_context_options_t)
  peek in'ptr = do
    avoidStencilBuffers <- (#peek gr_context_options_t, fAvoidStencilBuffers) in'ptr
    runtimeProgramCacheSize <- (#peek gr_context_options_t, fRuntimeProgramCacheSize) in'ptr
    glyphCacheTextureMaximumBytes <- (#peek gr_context_options_t, fGlyphCacheTextureMaximumBytes) in'ptr
    allowPathMaskCaching <- (#peek gr_context_options_t, fAllowPathMaskCaching) in'ptr
    doManualMipmapping <- (#peek gr_context_options_t, fDoManualMipmapping) in'ptr
    bufferMapThreshold <- (#peek gr_context_options_t, fBufferMapThreshold) in'ptr
    pure GrContextOptions{..}
  poke in'ptr in'value = do
    (#poke gr_context_options_t, fAvoidStencilBuffers) in'ptr in'value.avoidStencilBuffers
    (#poke gr_context_options_t, fRuntimeProgramCacheSize) in'ptr in'value.runtimeProgramCacheSize
    (#poke gr_context_options_t, fGlyphCacheTextureMaximumBytes) in'ptr in'value.glyphCacheTextureMaximumBytes
    (#poke gr_context_options_t, fAllowPathMaskCaching) in'ptr in'value.allowPathMaskCaching
    (#poke gr_context_options_t, fDoManualMipmapping) in'ptr in'value.doManualMipmapping
    (#poke gr_context_options_t, fBufferMapThreshold) in'ptr in'value.bufferMapThreshold
-- | `gr_backendobject_t`
type GrBackendObject = CIntPtr
-- | `gr_backendrendertarget_t`
data GrBackendRenderTarget = GrBackendRenderTarget
  deriving (Show, Eq, Ord)
-- | `gr_backendtexture_t`
data GrBackendTexture = GrBackendTexture
  deriving (Show, Eq, Ord)
-- | `gr_direct_context_t`
data GrDirectContext = GrDirectContext
  deriving (Show, Eq, Ord)
-- | `gr_recording_context_t`
data GrRecordingContext = GrRecordingContext
  deriving (Show, Eq, Ord)
-- | `gr_backend_t`
newtype GrBackend = GrBackend (#type gr_backend_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `OPENGL_GR_BACKEND`
grBackend'Opengl :: GrBackend
grBackend'Opengl = #const OPENGL_GR_BACKEND
-- | `VULKAN_GR_BACKEND`
grBackend'VuLkAn :: GrBackend
grBackend'VuLkAn = #const VULKAN_GR_BACKEND
-- | `METAL_GR_BACKEND`
grBackend'Metal :: GrBackend
grBackend'Metal = #const METAL_GR_BACKEND
-- | `DIRECT3D_GR_BACKEND`
grBackend'Direct3D :: GrBackend
grBackend'Direct3D = #const DIRECT3D_GR_BACKEND
-- | `UNSUPPORTED_GR_BACKEND`
grBackend'Unsupported :: GrBackend
grBackend'Unsupported = #const UNSUPPORTED_GR_BACKEND
-- | `gr_backendcontext_t`
type GrBackendContext = CIntPtr
-- | `gr_glinterface_t`
data GrGlInterface = GrGlInterface
  deriving (Show, Eq, Ord)
-- | `gr_gl_func_ptr`
type GrGlFunCPtr = IO (())
-- | `gr_gl_get_proc`
type GrGlGetProc = (Ptr (())) -> (Ptr (CChar)) -> IO (FunPtr (GrGlFunCPtr))
-- | `gr_gl_textureinfo_t`
data GrGlTextureInfo = GrGlTextureInfo
  { target :: CUInt
  -- ^ `fTarget`
  , id :: CUInt
  -- ^ `fID`
  , format :: CUInt
  -- ^ `fFormat`
  , protected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "target" GrGlTextureInfo where rawOffset = (#offset gr_gl_textureinfo_t, fTarget)
instance Offset "id" GrGlTextureInfo where rawOffset = (#offset gr_gl_textureinfo_t, fID)
instance Offset "format" GrGlTextureInfo where rawOffset = (#offset gr_gl_textureinfo_t, fFormat)
instance Offset "protected" GrGlTextureInfo where rawOffset = (#offset gr_gl_textureinfo_t, fProtected)
instance Storable GrGlTextureInfo where
  sizeOf _ = (#size gr_gl_textureinfo_t)
  alignment _ = (#alignment gr_gl_textureinfo_t)
  peek in'ptr = do
    target <- (#peek gr_gl_textureinfo_t, fTarget) in'ptr
    id <- (#peek gr_gl_textureinfo_t, fID) in'ptr
    format <- (#peek gr_gl_textureinfo_t, fFormat) in'ptr
    protected <- (#peek gr_gl_textureinfo_t, fProtected) in'ptr
    pure GrGlTextureInfo{..}
  poke in'ptr in'value = do
    (#poke gr_gl_textureinfo_t, fTarget) in'ptr in'value.target
    (#poke gr_gl_textureinfo_t, fID) in'ptr in'value.id
    (#poke gr_gl_textureinfo_t, fFormat) in'ptr in'value.format
    (#poke gr_gl_textureinfo_t, fProtected) in'ptr in'value.protected
-- | `gr_gl_framebufferinfo_t`
data GrGlFrameBufferInfo = GrGlFrameBufferInfo
  { fboid :: CUInt
  -- ^ `fFBOID`
  , format :: CUInt
  -- ^ `fFormat`
  , protected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "fboid" GrGlFrameBufferInfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fFBOID)
instance Offset "format" GrGlFrameBufferInfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fFormat)
instance Offset "protected" GrGlFrameBufferInfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fProtected)
instance Storable GrGlFrameBufferInfo where
  sizeOf _ = (#size gr_gl_framebufferinfo_t)
  alignment _ = (#alignment gr_gl_framebufferinfo_t)
  peek in'ptr = do
    fboid <- (#peek gr_gl_framebufferinfo_t, fFBOID) in'ptr
    format <- (#peek gr_gl_framebufferinfo_t, fFormat) in'ptr
    protected <- (#peek gr_gl_framebufferinfo_t, fProtected) in'ptr
    pure GrGlFrameBufferInfo{..}
  poke in'ptr in'value = do
    (#poke gr_gl_framebufferinfo_t, fFBOID) in'ptr in'value.fboid
    (#poke gr_gl_framebufferinfo_t, fFormat) in'ptr in'value.format
    (#poke gr_gl_framebufferinfo_t, fProtected) in'ptr in'value.protected
-- | `vk_instance_t`
data VkInstance = VkInstance
  deriving (Show, Eq, Ord)
-- | `gr_vkinterface_t`
data GrVkInterface = GrVkInterface
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_t`
data VkPhysicalDevice = VkPhysicalDevice
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_features_t`
data VkPhysicalDeviceFeatures = VkPhysicalDeviceFeatures
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_features_2_t`
data VkPhysicalDeviceFeatures2 = VkPhysicalDeviceFeatures2
  deriving (Show, Eq, Ord)
-- | `vk_device_t`
data VkDevice = VkDevice
  deriving (Show, Eq, Ord)
-- | `vk_queue_t`
data VkQueue = VkQueue
  deriving (Show, Eq, Ord)
-- | `gr_vk_extensions_t`
data GrVkExtensions = GrVkExtensions
  deriving (Show, Eq, Ord)
-- | `gr_vk_memory_allocator_t`
data GrVkMemoryAllocAtOr = GrVkMemoryAllocAtOr
  deriving (Show, Eq, Ord)
-- | `gr_vk_func_ptr`
type GrVkFunCPtr = IO (())
-- | `gr_vk_get_proc`
type GrVkGetProc = (Ptr (())) -> (Ptr (CChar)) -> (Ptr (VkInstance)) -> (Ptr (VkDevice)) -> IO (FunPtr (GrVkFunCPtr))
-- | `gr_vk_backendcontext_t`
data GrVkBackendContext = GrVkBackendContext
  { instance_ :: Ptr (VkInstance)
  -- ^ `fInstance`
  , physicalDevice :: Ptr (VkPhysicalDevice)
  -- ^ `fPhysicalDevice`
  , device :: Ptr (VkDevice)
  -- ^ `fDevice`
  , queue :: Ptr (VkQueue)
  -- ^ `fQueue`
  , graphicsQueueIndex :: Word32
  -- ^ `fGraphicsQueueIndex`
  , minAPIVersion :: Word32
  -- ^ `fMinAPIVersion`
  , instanceVersion :: Word32
  -- ^ `fInstanceVersion`
  , maxAPIVersion :: Word32
  -- ^ `fMaxAPIVersion`
  , extensions :: Word32
  -- ^ `fExtensions`
  , vkExtensions :: Ptr (GrVkExtensions)
  -- ^ `fVkExtensions`
  , features :: Word32
  -- ^ `fFeatures`
  , deviceFeatures :: Ptr (VkPhysicalDeviceFeatures)
  -- ^ `fDeviceFeatures`
  , deviceFeatures2 :: Ptr (VkPhysicalDeviceFeatures2)
  -- ^ `fDeviceFeatures2`
  , memoryAllocator :: Ptr (GrVkMemoryAllocAtOr)
  -- ^ `fMemoryAllocator`
  , getProc :: FunPtr (GrVkGetProc)
  -- ^ `fGetProc`
  , getProcUserData :: Ptr (())
  -- ^ `fGetProcUserData`
  , ownsInstanceAndDevice :: CBool
  -- ^ `fOwnsInstanceAndDevice`
  , protectedContext :: CBool
  -- ^ `fProtectedContext`
  } deriving (Show, Eq, Ord)
instance Offset "instance_" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fInstance)
instance Offset "physicalDevice" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fPhysicalDevice)
instance Offset "device" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fDevice)
instance Offset "queue" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fQueue)
instance Offset "graphicsQueueIndex" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fGraphicsQueueIndex)
instance Offset "minAPIVersion" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fMinAPIVersion)
instance Offset "instanceVersion" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fInstanceVersion)
instance Offset "maxAPIVersion" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fMaxAPIVersion)
instance Offset "extensions" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fExtensions)
instance Offset "vkExtensions" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fVkExtensions)
instance Offset "features" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fFeatures)
instance Offset "deviceFeatures" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures)
instance Offset "deviceFeatures2" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures2)
instance Offset "memoryAllocator" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fMemoryAllocator)
instance Offset "getProc" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fGetProc)
instance Offset "getProcUserData" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fGetProcUserData)
instance Offset "ownsInstanceAndDevice" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fOwnsInstanceAndDevice)
instance Offset "protectedContext" GrVkBackendContext where rawOffset = (#offset gr_vk_backendcontext_t, fProtectedContext)
instance Storable GrVkBackendContext where
  sizeOf _ = (#size gr_vk_backendcontext_t)
  alignment _ = (#alignment gr_vk_backendcontext_t)
  peek in'ptr = do
    instance_ <- (#peek gr_vk_backendcontext_t, fInstance) in'ptr
    physicalDevice <- (#peek gr_vk_backendcontext_t, fPhysicalDevice) in'ptr
    device <- (#peek gr_vk_backendcontext_t, fDevice) in'ptr
    queue <- (#peek gr_vk_backendcontext_t, fQueue) in'ptr
    graphicsQueueIndex <- (#peek gr_vk_backendcontext_t, fGraphicsQueueIndex) in'ptr
    minAPIVersion <- (#peek gr_vk_backendcontext_t, fMinAPIVersion) in'ptr
    instanceVersion <- (#peek gr_vk_backendcontext_t, fInstanceVersion) in'ptr
    maxAPIVersion <- (#peek gr_vk_backendcontext_t, fMaxAPIVersion) in'ptr
    extensions <- (#peek gr_vk_backendcontext_t, fExtensions) in'ptr
    vkExtensions <- (#peek gr_vk_backendcontext_t, fVkExtensions) in'ptr
    features <- (#peek gr_vk_backendcontext_t, fFeatures) in'ptr
    deviceFeatures <- (#peek gr_vk_backendcontext_t, fDeviceFeatures) in'ptr
    deviceFeatures2 <- (#peek gr_vk_backendcontext_t, fDeviceFeatures2) in'ptr
    memoryAllocator <- (#peek gr_vk_backendcontext_t, fMemoryAllocator) in'ptr
    getProc <- (#peek gr_vk_backendcontext_t, fGetProc) in'ptr
    getProcUserData <- (#peek gr_vk_backendcontext_t, fGetProcUserData) in'ptr
    ownsInstanceAndDevice <- (#peek gr_vk_backendcontext_t, fOwnsInstanceAndDevice) in'ptr
    protectedContext <- (#peek gr_vk_backendcontext_t, fProtectedContext) in'ptr
    pure GrVkBackendContext{..}
  poke in'ptr in'value = do
    (#poke gr_vk_backendcontext_t, fInstance) in'ptr in'value.instance_
    (#poke gr_vk_backendcontext_t, fPhysicalDevice) in'ptr in'value.physicalDevice
    (#poke gr_vk_backendcontext_t, fDevice) in'ptr in'value.device
    (#poke gr_vk_backendcontext_t, fQueue) in'ptr in'value.queue
    (#poke gr_vk_backendcontext_t, fGraphicsQueueIndex) in'ptr in'value.graphicsQueueIndex
    (#poke gr_vk_backendcontext_t, fMinAPIVersion) in'ptr in'value.minAPIVersion
    (#poke gr_vk_backendcontext_t, fInstanceVersion) in'ptr in'value.instanceVersion
    (#poke gr_vk_backendcontext_t, fMaxAPIVersion) in'ptr in'value.maxAPIVersion
    (#poke gr_vk_backendcontext_t, fExtensions) in'ptr in'value.extensions
    (#poke gr_vk_backendcontext_t, fVkExtensions) in'ptr in'value.vkExtensions
    (#poke gr_vk_backendcontext_t, fFeatures) in'ptr in'value.features
    (#poke gr_vk_backendcontext_t, fDeviceFeatures) in'ptr in'value.deviceFeatures
    (#poke gr_vk_backendcontext_t, fDeviceFeatures2) in'ptr in'value.deviceFeatures2
    (#poke gr_vk_backendcontext_t, fMemoryAllocator) in'ptr in'value.memoryAllocator
    (#poke gr_vk_backendcontext_t, fGetProc) in'ptr in'value.getProc
    (#poke gr_vk_backendcontext_t, fGetProcUserData) in'ptr in'value.getProcUserData
    (#poke gr_vk_backendcontext_t, fOwnsInstanceAndDevice) in'ptr in'value.ownsInstanceAndDevice
    (#poke gr_vk_backendcontext_t, fProtectedContext) in'ptr in'value.protectedContext
-- | `gr_vk_backendmemory_t`
type GrVkBackendMemory = CIntPtr
-- | `gr_vk_alloc_t`
data GrVkAlloc = GrVkAlloc
  { memory :: Word64
  -- ^ `fMemory`
  , offset :: Word64
  -- ^ `fOffset`
  , size :: Word64
  -- ^ `fSize`
  , flags :: Word32
  -- ^ `fFlags`
  , backendMemory :: GrVkBackendMemory
  -- ^ `fBackendMemory`
  , fUsesSystemHeap :: CBool
  -- ^ `_private_fUsesSystemHeap`
  } deriving (Show, Eq, Ord)
instance Offset "memory" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, fMemory)
instance Offset "offset" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, fOffset)
instance Offset "size" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, fSize)
instance Offset "flags" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, fFlags)
instance Offset "backendMemory" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, fBackendMemory)
instance Offset "fUsesSystemHeap" GrVkAlloc where rawOffset = (#offset gr_vk_alloc_t, _private_fUsesSystemHeap)
instance Storable GrVkAlloc where
  sizeOf _ = (#size gr_vk_alloc_t)
  alignment _ = (#alignment gr_vk_alloc_t)
  peek in'ptr = do
    memory <- (#peek gr_vk_alloc_t, fMemory) in'ptr
    offset <- (#peek gr_vk_alloc_t, fOffset) in'ptr
    size <- (#peek gr_vk_alloc_t, fSize) in'ptr
    flags <- (#peek gr_vk_alloc_t, fFlags) in'ptr
    backendMemory <- (#peek gr_vk_alloc_t, fBackendMemory) in'ptr
    fUsesSystemHeap <- (#peek gr_vk_alloc_t, _private_fUsesSystemHeap) in'ptr
    pure GrVkAlloc{..}
  poke in'ptr in'value = do
    (#poke gr_vk_alloc_t, fMemory) in'ptr in'value.memory
    (#poke gr_vk_alloc_t, fOffset) in'ptr in'value.offset
    (#poke gr_vk_alloc_t, fSize) in'ptr in'value.size
    (#poke gr_vk_alloc_t, fFlags) in'ptr in'value.flags
    (#poke gr_vk_alloc_t, fBackendMemory) in'ptr in'value.backendMemory
    (#poke gr_vk_alloc_t, _private_fUsesSystemHeap) in'ptr in'value.fUsesSystemHeap
-- | `gr_vk_ycbcrconversioninfo_t`
data GrVkYCbcRConversionInfo = GrVkYCbcRConversionInfo
  { format :: Word32
  -- ^ `fFormat`
  , externalFormat :: Word64
  -- ^ `fExternalFormat`
  , ycbcrModel :: Word32
  -- ^ `fYcbcrModel`
  , ycbcrRange :: Word32
  -- ^ `fYcbcrRange`
  , xChromaOffset :: Word32
  -- ^ `fXChromaOffset`
  , yChromaOffset :: Word32
  -- ^ `fYChromaOffset`
  , chromaFilter :: Word32
  -- ^ `fChromaFilter`
  , forceExplicitReconstruction :: Word32
  -- ^ `fForceExplicitReconstruction`
  , formatFeatures :: Word32
  -- ^ `fFormatFeatures`
  } deriving (Show, Eq, Ord)
instance Offset "format" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormat)
instance Offset "externalFormat" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fExternalFormat)
instance Offset "ycbcrModel" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrModel)
instance Offset "ycbcrRange" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrRange)
instance Offset "xChromaOffset" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fXChromaOffset)
instance Offset "yChromaOffset" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYChromaOffset)
instance Offset "chromaFilter" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fChromaFilter)
instance Offset "forceExplicitReconstruction" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction)
instance Offset "formatFeatures" GrVkYCbcRConversionInfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormatFeatures)
instance Storable GrVkYCbcRConversionInfo where
  sizeOf _ = (#size gr_vk_ycbcrconversioninfo_t)
  alignment _ = (#alignment gr_vk_ycbcrconversioninfo_t)
  peek in'ptr = do
    format <- (#peek gr_vk_ycbcrconversioninfo_t, fFormat) in'ptr
    externalFormat <- (#peek gr_vk_ycbcrconversioninfo_t, fExternalFormat) in'ptr
    ycbcrModel <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrModel) in'ptr
    ycbcrRange <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrRange) in'ptr
    xChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fXChromaOffset) in'ptr
    yChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fYChromaOffset) in'ptr
    chromaFilter <- (#peek gr_vk_ycbcrconversioninfo_t, fChromaFilter) in'ptr
    forceExplicitReconstruction <- (#peek gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) in'ptr
    formatFeatures <- (#peek gr_vk_ycbcrconversioninfo_t, fFormatFeatures) in'ptr
    pure GrVkYCbcRConversionInfo{..}
  poke in'ptr in'value = do
    (#poke gr_vk_ycbcrconversioninfo_t, fFormat) in'ptr in'value.format
    (#poke gr_vk_ycbcrconversioninfo_t, fExternalFormat) in'ptr in'value.externalFormat
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrModel) in'ptr in'value.ycbcrModel
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrRange) in'ptr in'value.ycbcrRange
    (#poke gr_vk_ycbcrconversioninfo_t, fXChromaOffset) in'ptr in'value.xChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fYChromaOffset) in'ptr in'value.yChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fChromaFilter) in'ptr in'value.chromaFilter
    (#poke gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) in'ptr in'value.forceExplicitReconstruction
    (#poke gr_vk_ycbcrconversioninfo_t, fFormatFeatures) in'ptr in'value.formatFeatures
-- | `gr_vk_imageinfo_t`
data GrVkImageInfo = GrVkImageInfo
  { image :: Word64
  -- ^ `fImage`
  , alloc :: GrVkAlloc
  -- ^ `fAlloc`
  , imageTiling :: Word32
  -- ^ `fImageTiling`
  , imageLayout :: Word32
  -- ^ `fImageLayout`
  , format :: Word32
  -- ^ `fFormat`
  , imageUsageFlags :: Word32
  -- ^ `fImageUsageFlags`
  , sampleCount :: Word32
  -- ^ `fSampleCount`
  , levelCount :: Word32
  -- ^ `fLevelCount`
  , currentQueueFamily :: Word32
  -- ^ `fCurrentQueueFamily`
  , protected :: CBool
  -- ^ `fProtected`
  , ycbcrConversionInfo :: GrVkYCbcRConversionInfo
  -- ^ `fYcbcrConversionInfo`
  , sharingMode :: Word32
  -- ^ `fSharingMode`
  } deriving (Show, Eq, Ord)
instance Offset "image" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fImage)
instance Offset "alloc" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fAlloc)
instance Offset "imageTiling" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageTiling)
instance Offset "imageLayout" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageLayout)
instance Offset "format" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fFormat)
instance Offset "imageUsageFlags" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageUsageFlags)
instance Offset "sampleCount" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fSampleCount)
instance Offset "levelCount" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fLevelCount)
instance Offset "currentQueueFamily" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fCurrentQueueFamily)
instance Offset "protected" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fProtected)
instance Offset "ycbcrConversionInfo" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fYcbcrConversionInfo)
instance Offset "sharingMode" GrVkImageInfo where rawOffset = (#offset gr_vk_imageinfo_t, fSharingMode)
instance Storable GrVkImageInfo where
  sizeOf _ = (#size gr_vk_imageinfo_t)
  alignment _ = (#alignment gr_vk_imageinfo_t)
  peek in'ptr = do
    image <- (#peek gr_vk_imageinfo_t, fImage) in'ptr
    alloc <- (#peek gr_vk_imageinfo_t, fAlloc) in'ptr
    imageTiling <- (#peek gr_vk_imageinfo_t, fImageTiling) in'ptr
    imageLayout <- (#peek gr_vk_imageinfo_t, fImageLayout) in'ptr
    format <- (#peek gr_vk_imageinfo_t, fFormat) in'ptr
    imageUsageFlags <- (#peek gr_vk_imageinfo_t, fImageUsageFlags) in'ptr
    sampleCount <- (#peek gr_vk_imageinfo_t, fSampleCount) in'ptr
    levelCount <- (#peek gr_vk_imageinfo_t, fLevelCount) in'ptr
    currentQueueFamily <- (#peek gr_vk_imageinfo_t, fCurrentQueueFamily) in'ptr
    protected <- (#peek gr_vk_imageinfo_t, fProtected) in'ptr
    ycbcrConversionInfo <- (#peek gr_vk_imageinfo_t, fYcbcrConversionInfo) in'ptr
    sharingMode <- (#peek gr_vk_imageinfo_t, fSharingMode) in'ptr
    pure GrVkImageInfo{..}
  poke in'ptr in'value = do
    (#poke gr_vk_imageinfo_t, fImage) in'ptr in'value.image
    (#poke gr_vk_imageinfo_t, fAlloc) in'ptr in'value.alloc
    (#poke gr_vk_imageinfo_t, fImageTiling) in'ptr in'value.imageTiling
    (#poke gr_vk_imageinfo_t, fImageLayout) in'ptr in'value.imageLayout
    (#poke gr_vk_imageinfo_t, fFormat) in'ptr in'value.format
    (#poke gr_vk_imageinfo_t, fImageUsageFlags) in'ptr in'value.imageUsageFlags
    (#poke gr_vk_imageinfo_t, fSampleCount) in'ptr in'value.sampleCount
    (#poke gr_vk_imageinfo_t, fLevelCount) in'ptr in'value.levelCount
    (#poke gr_vk_imageinfo_t, fCurrentQueueFamily) in'ptr in'value.currentQueueFamily
    (#poke gr_vk_imageinfo_t, fProtected) in'ptr in'value.protected
    (#poke gr_vk_imageinfo_t, fYcbcrConversionInfo) in'ptr in'value.ycbcrConversionInfo
    (#poke gr_vk_imageinfo_t, fSharingMode) in'ptr in'value.sharingMode
-- | `gr_mtl_textureinfo_t`
data GrMtLTextureInfo = GrMtLTextureInfo
  { texture :: Ptr (())
  -- ^ `fTexture`
  } deriving (Show, Eq, Ord)
instance Offset "texture" GrMtLTextureInfo where rawOffset = (#offset gr_mtl_textureinfo_t, fTexture)
instance Storable GrMtLTextureInfo where
  sizeOf _ = (#size gr_mtl_textureinfo_t)
  alignment _ = (#alignment gr_mtl_textureinfo_t)
  peek in'ptr = do
    texture <- (#peek gr_mtl_textureinfo_t, fTexture) in'ptr
    pure GrMtLTextureInfo{..}
  poke in'ptr in'value = do
    (#poke gr_mtl_textureinfo_t, fTexture) in'ptr in'value.texture
-- | `sk_pathop_t`
newtype SkPathOp = SkPathOp (#type sk_pathop_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_PATHOP`
skPathOp'Difference :: SkPathOp
skPathOp'Difference = #const DIFFERENCE_SK_PATHOP
-- | `INTERSECT_SK_PATHOP`
skPathOp'Intersect :: SkPathOp
skPathOp'Intersect = #const INTERSECT_SK_PATHOP
-- | `UNION_SK_PATHOP`
skPathOp'Union :: SkPathOp
skPathOp'Union = #const UNION_SK_PATHOP
-- | `XOR_SK_PATHOP`
skPathOp'Xor :: SkPathOp
skPathOp'Xor = #const XOR_SK_PATHOP
-- | `REVERSE_DIFFERENCE_SK_PATHOP`
skPathOp'ReverseDifference :: SkPathOp
skPathOp'ReverseDifference = #const REVERSE_DIFFERENCE_SK_PATHOP
-- | `sk_opbuilder_t`
data SkOpBuilder = SkOpBuilder
  deriving (Show, Eq, Ord)
-- | `sk_lattice_recttype_t`
newtype SkLatticeRectType = SkLatticeRectType (#type sk_lattice_recttype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DEFAULT_SK_LATTICE_RECT_TYPE`
skLatticeRectType'Default :: SkLatticeRectType
skLatticeRectType'Default = #const DEFAULT_SK_LATTICE_RECT_TYPE
-- | `TRANSPARENT_SK_LATTICE_RECT_TYPE`
skLatticeRectType'Transparent :: SkLatticeRectType
skLatticeRectType'Transparent = #const TRANSPARENT_SK_LATTICE_RECT_TYPE
-- | `FIXED_COLOR_SK_LATTICE_RECT_TYPE`
skLatticeRectType'FixedColor :: SkLatticeRectType
skLatticeRectType'FixedColor = #const FIXED_COLOR_SK_LATTICE_RECT_TYPE
-- | `sk_lattice_t`
data SkLattice = SkLattice
  { xDivs :: Ptr (CInt)
  -- ^ `fXDivs`
  , yDivs :: Ptr (CInt)
  -- ^ `fYDivs`
  , rectTypes :: Ptr (SkLatticeRectType)
  -- ^ `fRectTypes`
  , xCount :: CInt
  -- ^ `fXCount`
  , yCount :: CInt
  -- ^ `fYCount`
  , bounds :: Ptr (SkIRect)
  -- ^ `fBounds`
  , colors :: Ptr (SkColor)
  -- ^ `fColors`
  } deriving (Show, Eq, Ord)
instance Offset "xDivs" SkLattice where rawOffset = (#offset sk_lattice_t, fXDivs)
instance Offset "yDivs" SkLattice where rawOffset = (#offset sk_lattice_t, fYDivs)
instance Offset "rectTypes" SkLattice where rawOffset = (#offset sk_lattice_t, fRectTypes)
instance Offset "xCount" SkLattice where rawOffset = (#offset sk_lattice_t, fXCount)
instance Offset "yCount" SkLattice where rawOffset = (#offset sk_lattice_t, fYCount)
instance Offset "bounds" SkLattice where rawOffset = (#offset sk_lattice_t, fBounds)
instance Offset "colors" SkLattice where rawOffset = (#offset sk_lattice_t, fColors)
instance Storable SkLattice where
  sizeOf _ = (#size sk_lattice_t)
  alignment _ = (#alignment sk_lattice_t)
  peek in'ptr = do
    xDivs <- (#peek sk_lattice_t, fXDivs) in'ptr
    yDivs <- (#peek sk_lattice_t, fYDivs) in'ptr
    rectTypes <- (#peek sk_lattice_t, fRectTypes) in'ptr
    xCount <- (#peek sk_lattice_t, fXCount) in'ptr
    yCount <- (#peek sk_lattice_t, fYCount) in'ptr
    bounds <- (#peek sk_lattice_t, fBounds) in'ptr
    colors <- (#peek sk_lattice_t, fColors) in'ptr
    pure SkLattice{..}
  poke in'ptr in'value = do
    (#poke sk_lattice_t, fXDivs) in'ptr in'value.xDivs
    (#poke sk_lattice_t, fYDivs) in'ptr in'value.yDivs
    (#poke sk_lattice_t, fRectTypes) in'ptr in'value.rectTypes
    (#poke sk_lattice_t, fXCount) in'ptr in'value.xCount
    (#poke sk_lattice_t, fYCount) in'ptr in'value.yCount
    (#poke sk_lattice_t, fBounds) in'ptr in'value.bounds
    (#poke sk_lattice_t, fColors) in'ptr in'value.colors
-- | `sk_pathmeasure_t`
data SkPathMeasure = SkPathMeasure
  deriving (Show, Eq, Ord)
-- | `sk_pathmeasure_matrixflags_t`
newtype SkPathMeasureMatrixFlags = SkPathMeasureMatrixFlags (#type sk_pathmeasure_matrixflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS`
skPathMeasureMatrixFlags'GetPosition :: SkPathMeasureMatrixFlags
skPathMeasureMatrixFlags'GetPosition = #const GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS
-- | `GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS`
skPathMeasureMatrixFlags'GetTangent :: SkPathMeasureMatrixFlags
skPathMeasureMatrixFlags'GetTangent = #const GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS
-- | `GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS`
skPathMeasureMatrixFlags'GetPosAndTan :: SkPathMeasureMatrixFlags
skPathMeasureMatrixFlags'GetPosAndTan = #const GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS
-- | `sk_bitmap_release_proc`
type SkBitmapReleaseProc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_data_release_proc`
type SkDataReleaseProc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_image_raster_release_proc`
type SkImageRasterReleaseProc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_image_texture_release_proc`
type SkImageTextureReleaseProc = (Ptr (())) -> IO (())
-- | `sk_surface_raster_release_proc`
type SkSurfaceRasterReleaseProc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_glyph_path_proc`
type SkGlyphPathProc = (Ptr (SkPath)) -> (Ptr (SkMatrix)) -> (Ptr (())) -> IO (())
-- | `sk_image_caching_hint_t`
newtype SkImageCachingHint = SkImageCachingHint (#type sk_image_caching_hint_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ALLOW_SK_IMAGE_CACHING_HINT`
skImageCachingHint'Allow :: SkImageCachingHint
skImageCachingHint'Allow = #const ALLOW_SK_IMAGE_CACHING_HINT
-- | `DISALLOW_SK_IMAGE_CACHING_HINT`
skImageCachingHint'Disallow :: SkImageCachingHint
skImageCachingHint'Disallow = #const DISALLOW_SK_IMAGE_CACHING_HINT
-- | `sk_bitmap_allocflags_t`
newtype SkBitmapAllocFlags = SkBitmapAllocFlags (#type sk_bitmap_allocflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_BITMAP_ALLOC_FLAGS`
skBitmapAllocFlags'None :: SkBitmapAllocFlags
skBitmapAllocFlags'None = #const NONE_SK_BITMAP_ALLOC_FLAGS
-- | `ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS`
skBitmapAllocFlags'ZeroPixels :: SkBitmapAllocFlags
skBitmapAllocFlags'ZeroPixels = #const ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS
-- | `sk_document_pdf_datetime_t`
data SkDocumentPdfDateTime = SkDocumentPdfDateTime
  { timeZoneMinutes :: Int16
  -- ^ `fTimeZoneMinutes`
  , year :: Word16
  -- ^ `fYear`
  , month :: Word8
  -- ^ `fMonth`
  , dayOfWeek :: Word8
  -- ^ `fDayOfWeek`
  , day :: Word8
  -- ^ `fDay`
  , hour :: Word8
  -- ^ `fHour`
  , minute :: Word8
  -- ^ `fMinute`
  , second :: Word8
  -- ^ `fSecond`
  } deriving (Show, Eq, Ord)
instance Offset "timeZoneMinutes" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fTimeZoneMinutes)
instance Offset "year" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fYear)
instance Offset "month" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fMonth)
instance Offset "dayOfWeek" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fDayOfWeek)
instance Offset "day" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fDay)
instance Offset "hour" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fHour)
instance Offset "minute" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fMinute)
instance Offset "second" SkDocumentPdfDateTime where rawOffset = (#offset sk_document_pdf_datetime_t, fSecond)
instance Storable SkDocumentPdfDateTime where
  sizeOf _ = (#size sk_document_pdf_datetime_t)
  alignment _ = (#alignment sk_document_pdf_datetime_t)
  peek in'ptr = do
    timeZoneMinutes <- (#peek sk_document_pdf_datetime_t, fTimeZoneMinutes) in'ptr
    year <- (#peek sk_document_pdf_datetime_t, fYear) in'ptr
    month <- (#peek sk_document_pdf_datetime_t, fMonth) in'ptr
    dayOfWeek <- (#peek sk_document_pdf_datetime_t, fDayOfWeek) in'ptr
    day <- (#peek sk_document_pdf_datetime_t, fDay) in'ptr
    hour <- (#peek sk_document_pdf_datetime_t, fHour) in'ptr
    minute <- (#peek sk_document_pdf_datetime_t, fMinute) in'ptr
    second <- (#peek sk_document_pdf_datetime_t, fSecond) in'ptr
    pure SkDocumentPdfDateTime{..}
  poke in'ptr in'value = do
    (#poke sk_document_pdf_datetime_t, fTimeZoneMinutes) in'ptr in'value.timeZoneMinutes
    (#poke sk_document_pdf_datetime_t, fYear) in'ptr in'value.year
    (#poke sk_document_pdf_datetime_t, fMonth) in'ptr in'value.month
    (#poke sk_document_pdf_datetime_t, fDayOfWeek) in'ptr in'value.dayOfWeek
    (#poke sk_document_pdf_datetime_t, fDay) in'ptr in'value.day
    (#poke sk_document_pdf_datetime_t, fHour) in'ptr in'value.hour
    (#poke sk_document_pdf_datetime_t, fMinute) in'ptr in'value.minute
    (#poke sk_document_pdf_datetime_t, fSecond) in'ptr in'value.second
-- | `sk_document_pdf_metadata_t`
data SkDocumentPdfMetadata = SkDocumentPdfMetadata
  { title :: Ptr (SkString)
  -- ^ `fTitle`
  , author :: Ptr (SkString)
  -- ^ `fAuthor`
  , subject :: Ptr (SkString)
  -- ^ `fSubject`
  , keywords :: Ptr (SkString)
  -- ^ `fKeywords`
  , creator :: Ptr (SkString)
  -- ^ `fCreator`
  , producer :: Ptr (SkString)
  -- ^ `fProducer`
  , creation :: Ptr (SkDocumentPdfDateTime)
  -- ^ `fCreation`
  , modified :: Ptr (SkDocumentPdfDateTime)
  -- ^ `fModified`
  , rasterDPI :: CFloat
  -- ^ `fRasterDPI`
  , pdfa :: CBool
  -- ^ `fPDFA`
  , encodingQuality :: CInt
  -- ^ `fEncodingQuality`
  } deriving (Show, Eq, Ord)
instance Offset "title" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fTitle)
instance Offset "author" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fAuthor)
instance Offset "subject" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fSubject)
instance Offset "keywords" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fKeywords)
instance Offset "creator" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fCreator)
instance Offset "producer" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fProducer)
instance Offset "creation" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fCreation)
instance Offset "modified" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fModified)
instance Offset "rasterDPI" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fRasterDPI)
instance Offset "pdfa" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fPDFA)
instance Offset "encodingQuality" SkDocumentPdfMetadata where rawOffset = (#offset sk_document_pdf_metadata_t, fEncodingQuality)
instance Storable SkDocumentPdfMetadata where
  sizeOf _ = (#size sk_document_pdf_metadata_t)
  alignment _ = (#alignment sk_document_pdf_metadata_t)
  peek in'ptr = do
    title <- (#peek sk_document_pdf_metadata_t, fTitle) in'ptr
    author <- (#peek sk_document_pdf_metadata_t, fAuthor) in'ptr
    subject <- (#peek sk_document_pdf_metadata_t, fSubject) in'ptr
    keywords <- (#peek sk_document_pdf_metadata_t, fKeywords) in'ptr
    creator <- (#peek sk_document_pdf_metadata_t, fCreator) in'ptr
    producer <- (#peek sk_document_pdf_metadata_t, fProducer) in'ptr
    creation <- (#peek sk_document_pdf_metadata_t, fCreation) in'ptr
    modified <- (#peek sk_document_pdf_metadata_t, fModified) in'ptr
    rasterDPI <- (#peek sk_document_pdf_metadata_t, fRasterDPI) in'ptr
    pdfa <- (#peek sk_document_pdf_metadata_t, fPDFA) in'ptr
    encodingQuality <- (#peek sk_document_pdf_metadata_t, fEncodingQuality) in'ptr
    pure SkDocumentPdfMetadata{..}
  poke in'ptr in'value = do
    (#poke sk_document_pdf_metadata_t, fTitle) in'ptr in'value.title
    (#poke sk_document_pdf_metadata_t, fAuthor) in'ptr in'value.author
    (#poke sk_document_pdf_metadata_t, fSubject) in'ptr in'value.subject
    (#poke sk_document_pdf_metadata_t, fKeywords) in'ptr in'value.keywords
    (#poke sk_document_pdf_metadata_t, fCreator) in'ptr in'value.creator
    (#poke sk_document_pdf_metadata_t, fProducer) in'ptr in'value.producer
    (#poke sk_document_pdf_metadata_t, fCreation) in'ptr in'value.creation
    (#poke sk_document_pdf_metadata_t, fModified) in'ptr in'value.modified
    (#poke sk_document_pdf_metadata_t, fRasterDPI) in'ptr in'value.rasterDPI
    (#poke sk_document_pdf_metadata_t, fPDFA) in'ptr in'value.pdfa
    (#poke sk_document_pdf_metadata_t, fEncodingQuality) in'ptr in'value.encodingQuality
-- | `sk_imageinfo_t`
data SkImageInfo = SkImageInfo
  { colorspace :: Ptr (SkColorSpace)
  -- ^ `colorspace`
  , width :: Int32
  -- ^ `width`
  , height :: Int32
  -- ^ `height`
  , colorType :: SkColorType
  -- ^ `colorType`
  , alphaType :: SkAlphaType
  -- ^ `alphaType`
  } deriving (Show, Eq, Ord)
instance Offset "colorspace" SkImageInfo where rawOffset = (#offset sk_imageinfo_t, colorspace)
instance Offset "width" SkImageInfo where rawOffset = (#offset sk_imageinfo_t, width)
instance Offset "height" SkImageInfo where rawOffset = (#offset sk_imageinfo_t, height)
instance Offset "colorType" SkImageInfo where rawOffset = (#offset sk_imageinfo_t, colorType)
instance Offset "alphaType" SkImageInfo where rawOffset = (#offset sk_imageinfo_t, alphaType)
instance Storable SkImageInfo where
  sizeOf _ = (#size sk_imageinfo_t)
  alignment _ = (#alignment sk_imageinfo_t)
  peek in'ptr = do
    colorspace <- (#peek sk_imageinfo_t, colorspace) in'ptr
    width <- (#peek sk_imageinfo_t, width) in'ptr
    height <- (#peek sk_imageinfo_t, height) in'ptr
    colorType <- (#peek sk_imageinfo_t, colorType) in'ptr
    alphaType <- (#peek sk_imageinfo_t, alphaType) in'ptr
    pure SkImageInfo{..}
  poke in'ptr in'value = do
    (#poke sk_imageinfo_t, colorspace) in'ptr in'value.colorspace
    (#poke sk_imageinfo_t, width) in'ptr in'value.width
    (#poke sk_imageinfo_t, height) in'ptr in'value.height
    (#poke sk_imageinfo_t, colorType) in'ptr in'value.colorType
    (#poke sk_imageinfo_t, alphaType) in'ptr in'value.alphaType
-- | `sk_codecanimation_disposalmethod_t`
newtype SkCodecAnimationDisposalMethod = SkCodecAnimationDisposalMethod (#type sk_codecanimation_disposalmethod_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
skCodecAnimationDisposalMethod'Keep :: SkCodecAnimationDisposalMethod
skCodecAnimationDisposalMethod'Keep = #const KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
skCodecAnimationDisposalMethod'RestoreBgColor :: SkCodecAnimationDisposalMethod
skCodecAnimationDisposalMethod'RestoreBgColor = #const RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
skCodecAnimationDisposalMethod'RestorePrevious :: SkCodecAnimationDisposalMethod
skCodecAnimationDisposalMethod'RestorePrevious = #const RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `sk_codecanimation_blend_t`
newtype SkCodecAnimationBlend = SkCodecAnimationBlend (#type sk_codecanimation_blend_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SRC_OVER_SK_CODEC_ANIMATION_BLEND`
skCodecAnimationBlend'SrcOver :: SkCodecAnimationBlend
skCodecAnimationBlend'SrcOver = #const SRC_OVER_SK_CODEC_ANIMATION_BLEND
-- | `SRC_SK_CODEC_ANIMATION_BLEND`
skCodecAnimationBlend'Src :: SkCodecAnimationBlend
skCodecAnimationBlend'Src = #const SRC_SK_CODEC_ANIMATION_BLEND
-- | `sk_codec_frameinfo_t`
data SkCodecFrameInfo = SkCodecFrameInfo
  { requiredFrame :: CInt
  -- ^ `fRequiredFrame`
  , duration :: CInt
  -- ^ `fDuration`
  , fullyReceived :: CBool
  -- ^ `fFullyReceived`
  , alphaType :: SkAlphaType
  -- ^ `fAlphaType`
  , hasAlphaWithinBounds :: CBool
  -- ^ `fHasAlphaWithinBounds`
  , disposalMethod :: SkCodecAnimationDisposalMethod
  -- ^ `fDisposalMethod`
  , blend :: SkCodecAnimationBlend
  -- ^ `fBlend`
  , frameRect :: SkIRect
  -- ^ `fFrameRect`
  } deriving (Show, Eq, Ord)
instance Offset "requiredFrame" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fRequiredFrame)
instance Offset "duration" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fDuration)
instance Offset "fullyReceived" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fFullyReceived)
instance Offset "alphaType" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fAlphaType)
instance Offset "hasAlphaWithinBounds" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fHasAlphaWithinBounds)
instance Offset "disposalMethod" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fDisposalMethod)
instance Offset "blend" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fBlend)
instance Offset "frameRect" SkCodecFrameInfo where rawOffset = (#offset sk_codec_frameinfo_t, fFrameRect)
instance Storable SkCodecFrameInfo where
  sizeOf _ = (#size sk_codec_frameinfo_t)
  alignment _ = (#alignment sk_codec_frameinfo_t)
  peek in'ptr = do
    requiredFrame <- (#peek sk_codec_frameinfo_t, fRequiredFrame) in'ptr
    duration <- (#peek sk_codec_frameinfo_t, fDuration) in'ptr
    fullyReceived <- (#peek sk_codec_frameinfo_t, fFullyReceived) in'ptr
    alphaType <- (#peek sk_codec_frameinfo_t, fAlphaType) in'ptr
    hasAlphaWithinBounds <- (#peek sk_codec_frameinfo_t, fHasAlphaWithinBounds) in'ptr
    disposalMethod <- (#peek sk_codec_frameinfo_t, fDisposalMethod) in'ptr
    blend <- (#peek sk_codec_frameinfo_t, fBlend) in'ptr
    frameRect <- (#peek sk_codec_frameinfo_t, fFrameRect) in'ptr
    pure SkCodecFrameInfo{..}
  poke in'ptr in'value = do
    (#poke sk_codec_frameinfo_t, fRequiredFrame) in'ptr in'value.requiredFrame
    (#poke sk_codec_frameinfo_t, fDuration) in'ptr in'value.duration
    (#poke sk_codec_frameinfo_t, fFullyReceived) in'ptr in'value.fullyReceived
    (#poke sk_codec_frameinfo_t, fAlphaType) in'ptr in'value.alphaType
    (#poke sk_codec_frameinfo_t, fHasAlphaWithinBounds) in'ptr in'value.hasAlphaWithinBounds
    (#poke sk_codec_frameinfo_t, fDisposalMethod) in'ptr in'value.disposalMethod
    (#poke sk_codec_frameinfo_t, fBlend) in'ptr in'value.blend
    (#poke sk_codec_frameinfo_t, fFrameRect) in'ptr in'value.frameRect
-- | `sk_svgcanvas_t`
data SkSvgCanvas = SkSvgCanvas
  deriving (Show, Eq, Ord)
-- | `sk_vertices_vertex_mode_t`
newtype SkVerticesVertexMode = SkVerticesVertexMode (#type sk_vertices_vertex_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TRIANGLES_SK_VERTICES_VERTEX_MODE`
skVerticesVertexMode'Triangles :: SkVerticesVertexMode
skVerticesVertexMode'Triangles = #const TRIANGLES_SK_VERTICES_VERTEX_MODE
-- | `TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE`
skVerticesVertexMode'TriangleStrip :: SkVerticesVertexMode
skVerticesVertexMode'TriangleStrip = #const TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE
-- | `TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE`
skVerticesVertexMode'TriangleFan :: SkVerticesVertexMode
skVerticesVertexMode'TriangleFan = #const TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE
-- | `sk_vertices_t`
data SkVertices = SkVertices
  deriving (Show, Eq, Ord)
-- | `sk_colorspace_transfer_fn_t`
data SkColorSpaceTransferFn = SkColorSpaceTransferFn
  { g :: CFloat
  -- ^ `fG`
  , a :: CFloat
  -- ^ `fA`
  , b :: CFloat
  -- ^ `fB`
  , c :: CFloat
  -- ^ `fC`
  , d :: CFloat
  -- ^ `fD`
  , e :: CFloat
  -- ^ `fE`
  , f :: CFloat
  -- ^ `fF`
  } deriving (Show, Eq, Ord)
instance Offset "g" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fG)
instance Offset "a" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fA)
instance Offset "b" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fB)
instance Offset "c" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fC)
instance Offset "d" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fD)
instance Offset "e" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fE)
instance Offset "f" SkColorSpaceTransferFn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fF)
instance Storable SkColorSpaceTransferFn where
  sizeOf _ = (#size sk_colorspace_transfer_fn_t)
  alignment _ = (#alignment sk_colorspace_transfer_fn_t)
  peek in'ptr = do
    g <- (#peek sk_colorspace_transfer_fn_t, fG) in'ptr
    a <- (#peek sk_colorspace_transfer_fn_t, fA) in'ptr
    b <- (#peek sk_colorspace_transfer_fn_t, fB) in'ptr
    c <- (#peek sk_colorspace_transfer_fn_t, fC) in'ptr
    d <- (#peek sk_colorspace_transfer_fn_t, fD) in'ptr
    e <- (#peek sk_colorspace_transfer_fn_t, fE) in'ptr
    f <- (#peek sk_colorspace_transfer_fn_t, fF) in'ptr
    pure SkColorSpaceTransferFn{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_transfer_fn_t, fG) in'ptr in'value.g
    (#poke sk_colorspace_transfer_fn_t, fA) in'ptr in'value.a
    (#poke sk_colorspace_transfer_fn_t, fB) in'ptr in'value.b
    (#poke sk_colorspace_transfer_fn_t, fC) in'ptr in'value.c
    (#poke sk_colorspace_transfer_fn_t, fD) in'ptr in'value.d
    (#poke sk_colorspace_transfer_fn_t, fE) in'ptr in'value.e
    (#poke sk_colorspace_transfer_fn_t, fF) in'ptr in'value.f
-- | `sk_colorspace_primaries_t`
data SkColorSpacePrimaries = SkColorSpacePrimaries
  { rx :: CFloat
  -- ^ `fRX`
  , ry :: CFloat
  -- ^ `fRY`
  , gx :: CFloat
  -- ^ `fGX`
  , gy :: CFloat
  -- ^ `fGY`
  , bx :: CFloat
  -- ^ `fBX`
  , by :: CFloat
  -- ^ `fBY`
  , wx :: CFloat
  -- ^ `fWX`
  , wy :: CFloat
  -- ^ `fWY`
  } deriving (Show, Eq, Ord)
instance Offset "rx" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fRX)
instance Offset "ry" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fRY)
instance Offset "gx" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fGX)
instance Offset "gy" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fGY)
instance Offset "bx" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fBX)
instance Offset "by" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fBY)
instance Offset "wx" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fWX)
instance Offset "wy" SkColorSpacePrimaries where rawOffset = (#offset sk_colorspace_primaries_t, fWY)
instance Storable SkColorSpacePrimaries where
  sizeOf _ = (#size sk_colorspace_primaries_t)
  alignment _ = (#alignment sk_colorspace_primaries_t)
  peek in'ptr = do
    rx <- (#peek sk_colorspace_primaries_t, fRX) in'ptr
    ry <- (#peek sk_colorspace_primaries_t, fRY) in'ptr
    gx <- (#peek sk_colorspace_primaries_t, fGX) in'ptr
    gy <- (#peek sk_colorspace_primaries_t, fGY) in'ptr
    bx <- (#peek sk_colorspace_primaries_t, fBX) in'ptr
    by <- (#peek sk_colorspace_primaries_t, fBY) in'ptr
    wx <- (#peek sk_colorspace_primaries_t, fWX) in'ptr
    wy <- (#peek sk_colorspace_primaries_t, fWY) in'ptr
    pure SkColorSpacePrimaries{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_primaries_t, fRX) in'ptr in'value.rx
    (#poke sk_colorspace_primaries_t, fRY) in'ptr in'value.ry
    (#poke sk_colorspace_primaries_t, fGX) in'ptr in'value.gx
    (#poke sk_colorspace_primaries_t, fGY) in'ptr in'value.gy
    (#poke sk_colorspace_primaries_t, fBX) in'ptr in'value.bx
    (#poke sk_colorspace_primaries_t, fBY) in'ptr in'value.by
    (#poke sk_colorspace_primaries_t, fWX) in'ptr in'value.wx
    (#poke sk_colorspace_primaries_t, fWY) in'ptr in'value.wy
-- | `sk_colorspace_xyz_t`
data SkColorSpaceXyz = SkColorSpaceXyz
  { m00 :: CFloat
  -- ^ `fM00`
  , m01 :: CFloat
  -- ^ `fM01`
  , m02 :: CFloat
  -- ^ `fM02`
  , m10 :: CFloat
  -- ^ `fM10`
  , m11 :: CFloat
  -- ^ `fM11`
  , m12 :: CFloat
  -- ^ `fM12`
  , m20 :: CFloat
  -- ^ `fM20`
  , m21 :: CFloat
  -- ^ `fM21`
  , m22 :: CFloat
  -- ^ `fM22`
  } deriving (Show, Eq, Ord)
instance Offset "m00" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM00)
instance Offset "m01" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM01)
instance Offset "m02" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM02)
instance Offset "m10" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM10)
instance Offset "m11" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM11)
instance Offset "m12" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM12)
instance Offset "m20" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM20)
instance Offset "m21" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM21)
instance Offset "m22" SkColorSpaceXyz where rawOffset = (#offset sk_colorspace_xyz_t, fM22)
instance Storable SkColorSpaceXyz where
  sizeOf _ = (#size sk_colorspace_xyz_t)
  alignment _ = (#alignment sk_colorspace_xyz_t)
  peek in'ptr = do
    m00 <- (#peek sk_colorspace_xyz_t, fM00) in'ptr
    m01 <- (#peek sk_colorspace_xyz_t, fM01) in'ptr
    m02 <- (#peek sk_colorspace_xyz_t, fM02) in'ptr
    m10 <- (#peek sk_colorspace_xyz_t, fM10) in'ptr
    m11 <- (#peek sk_colorspace_xyz_t, fM11) in'ptr
    m12 <- (#peek sk_colorspace_xyz_t, fM12) in'ptr
    m20 <- (#peek sk_colorspace_xyz_t, fM20) in'ptr
    m21 <- (#peek sk_colorspace_xyz_t, fM21) in'ptr
    m22 <- (#peek sk_colorspace_xyz_t, fM22) in'ptr
    pure SkColorSpaceXyz{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_xyz_t, fM00) in'ptr in'value.m00
    (#poke sk_colorspace_xyz_t, fM01) in'ptr in'value.m01
    (#poke sk_colorspace_xyz_t, fM02) in'ptr in'value.m02
    (#poke sk_colorspace_xyz_t, fM10) in'ptr in'value.m10
    (#poke sk_colorspace_xyz_t, fM11) in'ptr in'value.m11
    (#poke sk_colorspace_xyz_t, fM12) in'ptr in'value.m12
    (#poke sk_colorspace_xyz_t, fM20) in'ptr in'value.m20
    (#poke sk_colorspace_xyz_t, fM21) in'ptr in'value.m21
    (#poke sk_colorspace_xyz_t, fM22) in'ptr in'value.m22
-- | `sk_colorspace_icc_profile_t`
data SkColorSpaceIccProfile = SkColorSpaceIccProfile
  deriving (Show, Eq, Ord)
-- | `sk_highcontrastconfig_invertstyle_t`
newtype SkHighContrastConfigInvertStyle = SkHighContrastConfigInvertStyle (#type sk_highcontrastconfig_invertstyle_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
skHighContrastConfigInvertStyle'NoInvert :: SkHighContrastConfigInvertStyle
skHighContrastConfigInvertStyle'NoInvert = #const NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
skHighContrastConfigInvertStyle'InvertBrightness :: SkHighContrastConfigInvertStyle
skHighContrastConfigInvertStyle'InvertBrightness = #const INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
skHighContrastConfigInvertStyle'InvertLightness :: SkHighContrastConfigInvertStyle
skHighContrastConfigInvertStyle'InvertLightness = #const INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `sk_highcontrastconfig_t`
data SkHighContrastConfig = SkHighContrastConfig
  { grayscale :: CBool
  -- ^ `fGrayscale`
  , invertStyle :: SkHighContrastConfigInvertStyle
  -- ^ `fInvertStyle`
  , contrast :: CFloat
  -- ^ `fContrast`
  } deriving (Show, Eq, Ord)
instance Offset "grayscale" SkHighContrastConfig where rawOffset = (#offset sk_highcontrastconfig_t, fGrayscale)
instance Offset "invertStyle" SkHighContrastConfig where rawOffset = (#offset sk_highcontrastconfig_t, fInvertStyle)
instance Offset "contrast" SkHighContrastConfig where rawOffset = (#offset sk_highcontrastconfig_t, fContrast)
instance Storable SkHighContrastConfig where
  sizeOf _ = (#size sk_highcontrastconfig_t)
  alignment _ = (#alignment sk_highcontrastconfig_t)
  peek in'ptr = do
    grayscale <- (#peek sk_highcontrastconfig_t, fGrayscale) in'ptr
    invertStyle <- (#peek sk_highcontrastconfig_t, fInvertStyle) in'ptr
    contrast <- (#peek sk_highcontrastconfig_t, fContrast) in'ptr
    pure SkHighContrastConfig{..}
  poke in'ptr in'value = do
    (#poke sk_highcontrastconfig_t, fGrayscale) in'ptr in'value.grayscale
    (#poke sk_highcontrastconfig_t, fInvertStyle) in'ptr in'value.invertStyle
    (#poke sk_highcontrastconfig_t, fContrast) in'ptr in'value.contrast
-- | `sk_pngencoder_filterflags_t`
newtype SkPngEncoderFilterFlags = SkPngEncoderFilterFlags (#type sk_pngencoder_filterflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ZERO_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'Zero :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'Zero = #const ZERO_SK_PNGENCODER_FILTER_FLAGS
-- | `NONE_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'None :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'None = #const NONE_SK_PNGENCODER_FILTER_FLAGS
-- | `SUB_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'Sub :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'Sub = #const SUB_SK_PNGENCODER_FILTER_FLAGS
-- | `UP_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'Up :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'Up = #const UP_SK_PNGENCODER_FILTER_FLAGS
-- | `AVG_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'Avg :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'Avg = #const AVG_SK_PNGENCODER_FILTER_FLAGS
-- | `PAETH_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'PaeTh :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'PaeTh = #const PAETH_SK_PNGENCODER_FILTER_FLAGS
-- | `ALL_SK_PNGENCODER_FILTER_FLAGS`
skPngEncoderFilterFlags'All :: SkPngEncoderFilterFlags
skPngEncoderFilterFlags'All = #const ALL_SK_PNGENCODER_FILTER_FLAGS
-- | `sk_pngencoder_options_t`
data SkPngEncoderOptions = SkPngEncoderOptions
  { filterFlags :: SkPngEncoderFilterFlags
  -- ^ `fFilterFlags`
  , zLibLevel :: CInt
  -- ^ `fZLibLevel`
  , comments :: Ptr (())
  -- ^ `fComments`
  , iccProfile :: Ptr (SkColorSpaceIccProfile)
  -- ^ `fICCProfile`
  , iccProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "filterFlags" SkPngEncoderOptions where rawOffset = (#offset sk_pngencoder_options_t, fFilterFlags)
instance Offset "zLibLevel" SkPngEncoderOptions where rawOffset = (#offset sk_pngencoder_options_t, fZLibLevel)
instance Offset "comments" SkPngEncoderOptions where rawOffset = (#offset sk_pngencoder_options_t, fComments)
instance Offset "iccProfile" SkPngEncoderOptions where rawOffset = (#offset sk_pngencoder_options_t, fICCProfile)
instance Offset "iccProfileDescription" SkPngEncoderOptions where rawOffset = (#offset sk_pngencoder_options_t, fICCProfileDescription)
instance Storable SkPngEncoderOptions where
  sizeOf _ = (#size sk_pngencoder_options_t)
  alignment _ = (#alignment sk_pngencoder_options_t)
  peek in'ptr = do
    filterFlags <- (#peek sk_pngencoder_options_t, fFilterFlags) in'ptr
    zLibLevel <- (#peek sk_pngencoder_options_t, fZLibLevel) in'ptr
    comments <- (#peek sk_pngencoder_options_t, fComments) in'ptr
    iccProfile <- (#peek sk_pngencoder_options_t, fICCProfile) in'ptr
    iccProfileDescription <- (#peek sk_pngencoder_options_t, fICCProfileDescription) in'ptr
    pure SkPngEncoderOptions{..}
  poke in'ptr in'value = do
    (#poke sk_pngencoder_options_t, fFilterFlags) in'ptr in'value.filterFlags
    (#poke sk_pngencoder_options_t, fZLibLevel) in'ptr in'value.zLibLevel
    (#poke sk_pngencoder_options_t, fComments) in'ptr in'value.comments
    (#poke sk_pngencoder_options_t, fICCProfile) in'ptr in'value.iccProfile
    (#poke sk_pngencoder_options_t, fICCProfileDescription) in'ptr in'value.iccProfileDescription
-- | `sk_jpegencoder_downsample_t`
newtype SkJpegEncoderDownSample = SkJpegEncoderDownSample (#type sk_jpegencoder_downsample_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE`
skJpegEncoderDownSample'DownSample420 :: SkJpegEncoderDownSample
skJpegEncoderDownSample'DownSample420 = #const DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE
-- | `DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE`
skJpegEncoderDownSample'DownSample422 :: SkJpegEncoderDownSample
skJpegEncoderDownSample'DownSample422 = #const DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE
-- | `DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE`
skJpegEncoderDownSample'DownSample444 :: SkJpegEncoderDownSample
skJpegEncoderDownSample'DownSample444 = #const DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE
-- | `sk_jpegencoder_alphaoption_t`
newtype SkJpegEncoderAlphaOption = SkJpegEncoderAlphaOption (#type sk_jpegencoder_alphaoption_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `IGNORE_SK_JPEGENCODER_ALPHA_OPTION`
skJpegEncoderAlphaOption'Ignore :: SkJpegEncoderAlphaOption
skJpegEncoderAlphaOption'Ignore = #const IGNORE_SK_JPEGENCODER_ALPHA_OPTION
-- | `BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION`
skJpegEncoderAlphaOption'BlendOnBlack :: SkJpegEncoderAlphaOption
skJpegEncoderAlphaOption'BlendOnBlack = #const BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION
-- | `sk_jpegencoder_options_t`
data SkJpegEncoderOptions = SkJpegEncoderOptions
  { quality :: CInt
  -- ^ `fQuality`
  , downsample :: SkJpegEncoderDownSample
  -- ^ `fDownsample`
  , alphaOption :: SkJpegEncoderAlphaOption
  -- ^ `fAlphaOption`
  , xmpMetadata :: Ptr (SkData)
  -- ^ `xmpMetadata`
  , iccProfile :: Ptr (SkColorSpaceIccProfile)
  -- ^ `fICCProfile`
  , iccProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "quality" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, fQuality)
instance Offset "downsample" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, fDownsample)
instance Offset "alphaOption" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, fAlphaOption)
instance Offset "xmpMetadata" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, xmpMetadata)
instance Offset "iccProfile" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, fICCProfile)
instance Offset "iccProfileDescription" SkJpegEncoderOptions where rawOffset = (#offset sk_jpegencoder_options_t, fICCProfileDescription)
instance Storable SkJpegEncoderOptions where
  sizeOf _ = (#size sk_jpegencoder_options_t)
  alignment _ = (#alignment sk_jpegencoder_options_t)
  peek in'ptr = do
    quality <- (#peek sk_jpegencoder_options_t, fQuality) in'ptr
    downsample <- (#peek sk_jpegencoder_options_t, fDownsample) in'ptr
    alphaOption <- (#peek sk_jpegencoder_options_t, fAlphaOption) in'ptr
    xmpMetadata <- (#peek sk_jpegencoder_options_t, xmpMetadata) in'ptr
    iccProfile <- (#peek sk_jpegencoder_options_t, fICCProfile) in'ptr
    iccProfileDescription <- (#peek sk_jpegencoder_options_t, fICCProfileDescription) in'ptr
    pure SkJpegEncoderOptions{..}
  poke in'ptr in'value = do
    (#poke sk_jpegencoder_options_t, fQuality) in'ptr in'value.quality
    (#poke sk_jpegencoder_options_t, fDownsample) in'ptr in'value.downsample
    (#poke sk_jpegencoder_options_t, fAlphaOption) in'ptr in'value.alphaOption
    (#poke sk_jpegencoder_options_t, xmpMetadata) in'ptr in'value.xmpMetadata
    (#poke sk_jpegencoder_options_t, fICCProfile) in'ptr in'value.iccProfile
    (#poke sk_jpegencoder_options_t, fICCProfileDescription) in'ptr in'value.iccProfileDescription
-- | `sk_webpencoder_compression_t`
newtype SkWebpEncoderCompression = SkWebpEncoderCompression (#type sk_webpencoder_compression_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LOSSY_SK_WEBPENCODER_COMPTRESSION`
skWebpEncoderCompression'LossySkWebpEncoderCompTressIon :: SkWebpEncoderCompression
skWebpEncoderCompression'LossySkWebpEncoderCompTressIon = #const LOSSY_SK_WEBPENCODER_COMPTRESSION
-- | `LOSSLESS_SK_WEBPENCODER_COMPTRESSION`
skWebpEncoderCompression'LosslessSkWebpEncoderCompTressIon :: SkWebpEncoderCompression
skWebpEncoderCompression'LosslessSkWebpEncoderCompTressIon = #const LOSSLESS_SK_WEBPENCODER_COMPTRESSION
-- | `sk_webpencoder_options_t`
data SkWebpEncoderOptions = SkWebpEncoderOptions
  { compression :: SkWebpEncoderCompression
  -- ^ `fCompression`
  , quality :: CFloat
  -- ^ `fQuality`
  , iccProfile :: Ptr (SkColorSpaceIccProfile)
  -- ^ `fICCProfile`
  , iccProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "compression" SkWebpEncoderOptions where rawOffset = (#offset sk_webpencoder_options_t, fCompression)
instance Offset "quality" SkWebpEncoderOptions where rawOffset = (#offset sk_webpencoder_options_t, fQuality)
instance Offset "iccProfile" SkWebpEncoderOptions where rawOffset = (#offset sk_webpencoder_options_t, fICCProfile)
instance Offset "iccProfileDescription" SkWebpEncoderOptions where rawOffset = (#offset sk_webpencoder_options_t, fICCProfileDescription)
instance Storable SkWebpEncoderOptions where
  sizeOf _ = (#size sk_webpencoder_options_t)
  alignment _ = (#alignment sk_webpencoder_options_t)
  peek in'ptr = do
    compression <- (#peek sk_webpencoder_options_t, fCompression) in'ptr
    quality <- (#peek sk_webpencoder_options_t, fQuality) in'ptr
    iccProfile <- (#peek sk_webpencoder_options_t, fICCProfile) in'ptr
    iccProfileDescription <- (#peek sk_webpencoder_options_t, fICCProfileDescription) in'ptr
    pure SkWebpEncoderOptions{..}
  poke in'ptr in'value = do
    (#poke sk_webpencoder_options_t, fCompression) in'ptr in'value.compression
    (#poke sk_webpencoder_options_t, fQuality) in'ptr in'value.quality
    (#poke sk_webpencoder_options_t, fICCProfile) in'ptr in'value.iccProfile
    (#poke sk_webpencoder_options_t, fICCProfileDescription) in'ptr in'value.iccProfileDescription
-- | `sk_rrect_t`
data SkRRect = SkRRect
  deriving (Show, Eq, Ord)
-- | `sk_rrect_type_t`
newtype SkRRectType = SkRRectType (#type sk_rrect_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `EMPTY_SK_RRECT_TYPE`
skRRectType'Empty :: SkRRectType
skRRectType'Empty = #const EMPTY_SK_RRECT_TYPE
-- | `RECT_SK_RRECT_TYPE`
skRRectType'Rect :: SkRRectType
skRRectType'Rect = #const RECT_SK_RRECT_TYPE
-- | `OVAL_SK_RRECT_TYPE`
skRRectType'Oval :: SkRRectType
skRRectType'Oval = #const OVAL_SK_RRECT_TYPE
-- | `SIMPLE_SK_RRECT_TYPE`
skRRectType'Simple :: SkRRectType
skRRectType'Simple = #const SIMPLE_SK_RRECT_TYPE
-- | `NINE_PATCH_SK_RRECT_TYPE`
skRRectType'NinePatch :: SkRRectType
skRRectType'NinePatch = #const NINE_PATCH_SK_RRECT_TYPE
-- | `COMPLEX_SK_RRECT_TYPE`
skRRectType'Complex :: SkRRectType
skRRectType'Complex = #const COMPLEX_SK_RRECT_TYPE
-- | `sk_rrect_corner_t`
newtype SkRRectCorner = SkRRectCorner (#type sk_rrect_corner_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UPPER_LEFT_SK_RRECT_CORNER`
skRRectCorner'UpperLeft :: SkRRectCorner
skRRectCorner'UpperLeft = #const UPPER_LEFT_SK_RRECT_CORNER
-- | `UPPER_RIGHT_SK_RRECT_CORNER`
skRRectCorner'UpperRight :: SkRRectCorner
skRRectCorner'UpperRight = #const UPPER_RIGHT_SK_RRECT_CORNER
-- | `LOWER_RIGHT_SK_RRECT_CORNER`
skRRectCorner'LowerRight :: SkRRectCorner
skRRectCorner'LowerRight = #const LOWER_RIGHT_SK_RRECT_CORNER
-- | `LOWER_LEFT_SK_RRECT_CORNER`
skRRectCorner'LowerLeft :: SkRRectCorner
skRRectCorner'LowerLeft = #const LOWER_LEFT_SK_RRECT_CORNER
-- | `sk_textblob_t`
data SkTextBlob = SkTextBlob
  deriving (Show, Eq, Ord)
-- | `sk_textblob_builder_t`
data SkTextBlobBuilder = SkTextBlobBuilder
  deriving (Show, Eq, Ord)
-- | `sk_textblob_builder_runbuffer_t`
data SkTextBlobBuilderRunBuffer = SkTextBlobBuilderRunBuffer
  { glyphs :: Ptr (())
  -- ^ `glyphs`
  , pos :: Ptr (())
  -- ^ `pos`
  , utf8text :: Ptr (())
  -- ^ `utf8text`
  , clusters :: Ptr (())
  -- ^ `clusters`
  } deriving (Show, Eq, Ord)
instance Offset "glyphs" SkTextBlobBuilderRunBuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, glyphs)
instance Offset "pos" SkTextBlobBuilderRunBuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, pos)
instance Offset "utf8text" SkTextBlobBuilderRunBuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, utf8text)
instance Offset "clusters" SkTextBlobBuilderRunBuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, clusters)
instance Storable SkTextBlobBuilderRunBuffer where
  sizeOf _ = (#size sk_textblob_builder_runbuffer_t)
  alignment _ = (#alignment sk_textblob_builder_runbuffer_t)
  peek in'ptr = do
    glyphs <- (#peek sk_textblob_builder_runbuffer_t, glyphs) in'ptr
    pos <- (#peek sk_textblob_builder_runbuffer_t, pos) in'ptr
    utf8text <- (#peek sk_textblob_builder_runbuffer_t, utf8text) in'ptr
    clusters <- (#peek sk_textblob_builder_runbuffer_t, clusters) in'ptr
    pure SkTextBlobBuilderRunBuffer{..}
  poke in'ptr in'value = do
    (#poke sk_textblob_builder_runbuffer_t, glyphs) in'ptr in'value.glyphs
    (#poke sk_textblob_builder_runbuffer_t, pos) in'ptr in'value.pos
    (#poke sk_textblob_builder_runbuffer_t, utf8text) in'ptr in'value.utf8text
    (#poke sk_textblob_builder_runbuffer_t, clusters) in'ptr in'value.clusters
-- | `sk_rsxform_t`
data SkRsxForm = SkRsxForm
  { sCos :: CFloat
  -- ^ `fSCos`
  , sSin :: CFloat
  -- ^ `fSSin`
  , tx :: CFloat
  -- ^ `fTX`
  , ty :: CFloat
  -- ^ `fTY`
  } deriving (Show, Eq, Ord)
instance Offset "sCos" SkRsxForm where rawOffset = (#offset sk_rsxform_t, fSCos)
instance Offset "sSin" SkRsxForm where rawOffset = (#offset sk_rsxform_t, fSSin)
instance Offset "tx" SkRsxForm where rawOffset = (#offset sk_rsxform_t, fTX)
instance Offset "ty" SkRsxForm where rawOffset = (#offset sk_rsxform_t, fTY)
instance Storable SkRsxForm where
  sizeOf _ = (#size sk_rsxform_t)
  alignment _ = (#alignment sk_rsxform_t)
  peek in'ptr = do
    sCos <- (#peek sk_rsxform_t, fSCos) in'ptr
    sSin <- (#peek sk_rsxform_t, fSSin) in'ptr
    tx <- (#peek sk_rsxform_t, fTX) in'ptr
    ty <- (#peek sk_rsxform_t, fTY) in'ptr
    pure SkRsxForm{..}
  poke in'ptr in'value = do
    (#poke sk_rsxform_t, fSCos) in'ptr in'value.sCos
    (#poke sk_rsxform_t, fSSin) in'ptr in'value.sSin
    (#poke sk_rsxform_t, fTX) in'ptr in'value.tx
    (#poke sk_rsxform_t, fTY) in'ptr in'value.ty
-- | `sk_tracememorydump_t`
data SkTraceMemoryDump = SkTraceMemoryDump
  deriving (Show, Eq, Ord)
-- | `sk_runtimeeffect_t`
data SkRuntimeEffect = SkRuntimeEffect
  deriving (Show, Eq, Ord)
-- | `sk_runtimeeffect_uniform_type_t`
newtype SkRuntimeEffectUniformType = SkRuntimeEffectUniformType (#type sk_runtimeeffect_uniform_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float = #const FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float2 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float2 = #const FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float3 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float3 = #const FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float4 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float4 = #const FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float2X2 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float2X2 = #const FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float3X3 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float3X3 = #const FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Float4X4 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Float4X4 = #const FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Int :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Int = #const INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Int2 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Int2 = #const INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Int3 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Int3 = #const INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
skRuntimeEffectUniformType'Int4 :: SkRuntimeEffectUniformType
skRuntimeEffectUniformType'Int4 = #const INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `sk_runtimeeffect_child_type_t`
newtype SkRuntimeEffectChildType = SkRuntimeEffectChildType (#type sk_runtimeeffect_child_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE`
skRuntimeEffectChildType'Shader :: SkRuntimeEffectChildType
skRuntimeEffectChildType'Shader = #const SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE`
skRuntimeEffectChildType'ColorFilter :: SkRuntimeEffectChildType
skRuntimeEffectChildType'ColorFilter = #const COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE`
skRuntimeEffectChildType'Blender :: SkRuntimeEffectChildType
skRuntimeEffectChildType'Blender = #const BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `sk_runtimeeffect_uniform_flags_t`
newtype SkRuntimeEffectUniformFlags = SkRuntimeEffectUniformFlags (#type sk_runtimeeffect_uniform_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'None :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'None = #const NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'Array :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'Array = #const ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'Color :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'Color = #const COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'Vertex :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'Vertex = #const VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'Fragment :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'Fragment = #const FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
skRuntimeEffectUniformFlags'HalfPrecision :: SkRuntimeEffectUniformFlags
skRuntimeEffectUniformFlags'HalfPrecision = #const HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `sk_runtimeeffect_uniform_t`
data SkRuntimeEffectUniform = SkRuntimeEffectUniform
  { name :: Ptr (CChar)
  -- ^ `fName`
  , nameLength :: CSize
  -- ^ `fNameLength`
  , offset :: CSize
  -- ^ `fOffset`
  , type_ :: SkRuntimeEffectUniformType
  -- ^ `fType`
  , count :: CInt
  -- ^ `fCount`
  , flags :: SkRuntimeEffectUniformFlags
  -- ^ `fFlags`
  } deriving (Show, Eq, Ord)
instance Offset "name" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fName)
instance Offset "nameLength" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fNameLength)
instance Offset "offset" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fOffset)
instance Offset "type_" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fType)
instance Offset "count" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fCount)
instance Offset "flags" SkRuntimeEffectUniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fFlags)
instance Storable SkRuntimeEffectUniform where
  sizeOf _ = (#size sk_runtimeeffect_uniform_t)
  alignment _ = (#alignment sk_runtimeeffect_uniform_t)
  peek in'ptr = do
    name <- (#peek sk_runtimeeffect_uniform_t, fName) in'ptr
    nameLength <- (#peek sk_runtimeeffect_uniform_t, fNameLength) in'ptr
    offset <- (#peek sk_runtimeeffect_uniform_t, fOffset) in'ptr
    type_ <- (#peek sk_runtimeeffect_uniform_t, fType) in'ptr
    count <- (#peek sk_runtimeeffect_uniform_t, fCount) in'ptr
    flags <- (#peek sk_runtimeeffect_uniform_t, fFlags) in'ptr
    pure SkRuntimeEffectUniform{..}
  poke in'ptr in'value = do
    (#poke sk_runtimeeffect_uniform_t, fName) in'ptr in'value.name
    (#poke sk_runtimeeffect_uniform_t, fNameLength) in'ptr in'value.nameLength
    (#poke sk_runtimeeffect_uniform_t, fOffset) in'ptr in'value.offset
    (#poke sk_runtimeeffect_uniform_t, fType) in'ptr in'value.type_
    (#poke sk_runtimeeffect_uniform_t, fCount) in'ptr in'value.count
    (#poke sk_runtimeeffect_uniform_t, fFlags) in'ptr in'value.flags
-- | `sk_runtimeeffect_child_t`
data SkRuntimeEffectChild = SkRuntimeEffectChild
  { name :: Ptr (CChar)
  -- ^ `fName`
  , nameLength :: CSize
  -- ^ `fNameLength`
  , type_ :: SkRuntimeEffectChildType
  -- ^ `fType`
  , index :: CInt
  -- ^ `fIndex`
  } deriving (Show, Eq, Ord)
instance Offset "name" SkRuntimeEffectChild where rawOffset = (#offset sk_runtimeeffect_child_t, fName)
instance Offset "nameLength" SkRuntimeEffectChild where rawOffset = (#offset sk_runtimeeffect_child_t, fNameLength)
instance Offset "type_" SkRuntimeEffectChild where rawOffset = (#offset sk_runtimeeffect_child_t, fType)
instance Offset "index" SkRuntimeEffectChild where rawOffset = (#offset sk_runtimeeffect_child_t, fIndex)
instance Storable SkRuntimeEffectChild where
  sizeOf _ = (#size sk_runtimeeffect_child_t)
  alignment _ = (#alignment sk_runtimeeffect_child_t)
  peek in'ptr = do
    name <- (#peek sk_runtimeeffect_child_t, fName) in'ptr
    nameLength <- (#peek sk_runtimeeffect_child_t, fNameLength) in'ptr
    type_ <- (#peek sk_runtimeeffect_child_t, fType) in'ptr
    index <- (#peek sk_runtimeeffect_child_t, fIndex) in'ptr
    pure SkRuntimeEffectChild{..}
  poke in'ptr in'value = do
    (#poke sk_runtimeeffect_child_t, fName) in'ptr in'value.name
    (#poke sk_runtimeeffect_child_t, fNameLength) in'ptr in'value.nameLength
    (#poke sk_runtimeeffect_child_t, fType) in'ptr in'value.type_
    (#poke sk_runtimeeffect_child_t, fIndex) in'ptr in'value.index
-- | `sk_filter_mode_t`
newtype SkFilterMode = SkFilterMode (#type sk_filter_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NEAREST_SK_FILTER_MODE`
skFilterMode'Nearest :: SkFilterMode
skFilterMode'Nearest = #const NEAREST_SK_FILTER_MODE
-- | `LINEAR_SK_FILTER_MODE`
skFilterMode'Linear :: SkFilterMode
skFilterMode'Linear = #const LINEAR_SK_FILTER_MODE
-- | `sk_mipmap_mode_t`
newtype SkMIpMapMode = SkMIpMapMode (#type sk_mipmap_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_MIPMAP_MODE`
skMIpMapMode'None :: SkMIpMapMode
skMIpMapMode'None = #const NONE_SK_MIPMAP_MODE
-- | `NEAREST_SK_MIPMAP_MODE`
skMIpMapMode'Nearest :: SkMIpMapMode
skMIpMapMode'Nearest = #const NEAREST_SK_MIPMAP_MODE
-- | `LINEAR_SK_MIPMAP_MODE`
skMIpMapMode'Linear :: SkMIpMapMode
skMIpMapMode'Linear = #const LINEAR_SK_MIPMAP_MODE
-- | `sk_cubic_resampler_t`
data SkCubicReSampler = SkCubicReSampler
  { b :: CFloat
  -- ^ `fB`
  , c :: CFloat
  -- ^ `fC`
  } deriving (Show, Eq, Ord)
instance Offset "b" SkCubicReSampler where rawOffset = (#offset sk_cubic_resampler_t, fB)
instance Offset "c" SkCubicReSampler where rawOffset = (#offset sk_cubic_resampler_t, fC)
instance Storable SkCubicReSampler where
  sizeOf _ = (#size sk_cubic_resampler_t)
  alignment _ = (#alignment sk_cubic_resampler_t)
  peek in'ptr = do
    b <- (#peek sk_cubic_resampler_t, fB) in'ptr
    c <- (#peek sk_cubic_resampler_t, fC) in'ptr
    pure SkCubicReSampler{..}
  poke in'ptr in'value = do
    (#poke sk_cubic_resampler_t, fB) in'ptr in'value.b
    (#poke sk_cubic_resampler_t, fC) in'ptr in'value.c
-- | `sk_sampling_options_t`
data SkSamplingOptions = SkSamplingOptions
  { maxAniso :: CInt
  -- ^ `fMaxAniso`
  , useCubic :: CBool
  -- ^ `fUseCubic`
  , cubic :: SkCubicReSampler
  -- ^ `fCubic`
  , filter :: SkFilterMode
  -- ^ `fFilter`
  , mipmap :: SkMIpMapMode
  -- ^ `fMipmap`
  } deriving (Show, Eq, Ord)
instance Offset "maxAniso" SkSamplingOptions where rawOffset = (#offset sk_sampling_options_t, fMaxAniso)
instance Offset "useCubic" SkSamplingOptions where rawOffset = (#offset sk_sampling_options_t, fUseCubic)
instance Offset "cubic" SkSamplingOptions where rawOffset = (#offset sk_sampling_options_t, fCubic)
instance Offset "filter" SkSamplingOptions where rawOffset = (#offset sk_sampling_options_t, fFilter)
instance Offset "mipmap" SkSamplingOptions where rawOffset = (#offset sk_sampling_options_t, fMipmap)
instance Storable SkSamplingOptions where
  sizeOf _ = (#size sk_sampling_options_t)
  alignment _ = (#alignment sk_sampling_options_t)
  peek in'ptr = do
    maxAniso <- (#peek sk_sampling_options_t, fMaxAniso) in'ptr
    useCubic <- (#peek sk_sampling_options_t, fUseCubic) in'ptr
    cubic <- (#peek sk_sampling_options_t, fCubic) in'ptr
    filter <- (#peek sk_sampling_options_t, fFilter) in'ptr
    mipmap <- (#peek sk_sampling_options_t, fMipmap) in'ptr
    pure SkSamplingOptions{..}
  poke in'ptr in'value = do
    (#poke sk_sampling_options_t, fMaxAniso) in'ptr in'value.maxAniso
    (#poke sk_sampling_options_t, fUseCubic) in'ptr in'value.useCubic
    (#poke sk_sampling_options_t, fCubic) in'ptr in'value.cubic
    (#poke sk_sampling_options_t, fFilter) in'ptr in'value.filter
    (#poke sk_sampling_options_t, fMipmap) in'ptr in'value.mipmap
-- | `sk_canvas_savelayerrec_flags_t`
newtype SkCanvasSaveLayerRecFlags = SkCanvasSaveLayerRecFlags (#type sk_canvas_savelayerrec_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_CANVAS_SAVELAYERREC_FLAGS`
skCanvasSaveLayerRecFlags'None :: SkCanvasSaveLayerRecFlags
skCanvasSaveLayerRecFlags'None = #const NONE_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS`
skCanvasSaveLayerRecFlags'PreserveLcdText :: SkCanvasSaveLayerRecFlags
skCanvasSaveLayerRecFlags'PreserveLcdText = #const PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS`
skCanvasSaveLayerRecFlags'InitializeWithPrevious :: SkCanvasSaveLayerRecFlags
skCanvasSaveLayerRecFlags'InitializeWithPrevious = #const INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS`
skCanvasSaveLayerRecFlags'F16ColorType :: SkCanvasSaveLayerRecFlags
skCanvasSaveLayerRecFlags'F16ColorType = #const F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `sk_canvas_savelayerrec_t`
data SkCanvasSaveLayerRec = SkCanvasSaveLayerRec
  { bounds :: Ptr (SkRect)
  -- ^ `fBounds`
  , paint :: Ptr (SkPaint)
  -- ^ `fPaint`
  , backdrop :: Ptr (SkImageFilter)
  -- ^ `fBackdrop`
  , flags :: SkCanvasSaveLayerRecFlags
  -- ^ `fFlags`
  } deriving (Show, Eq, Ord)
instance Offset "bounds" SkCanvasSaveLayerRec where rawOffset = (#offset sk_canvas_savelayerrec_t, fBounds)
instance Offset "paint" SkCanvasSaveLayerRec where rawOffset = (#offset sk_canvas_savelayerrec_t, fPaint)
instance Offset "backdrop" SkCanvasSaveLayerRec where rawOffset = (#offset sk_canvas_savelayerrec_t, fBackdrop)
instance Offset "flags" SkCanvasSaveLayerRec where rawOffset = (#offset sk_canvas_savelayerrec_t, fFlags)
instance Storable SkCanvasSaveLayerRec where
  sizeOf _ = (#size sk_canvas_savelayerrec_t)
  alignment _ = (#alignment sk_canvas_savelayerrec_t)
  peek in'ptr = do
    bounds <- (#peek sk_canvas_savelayerrec_t, fBounds) in'ptr
    paint <- (#peek sk_canvas_savelayerrec_t, fPaint) in'ptr
    backdrop <- (#peek sk_canvas_savelayerrec_t, fBackdrop) in'ptr
    flags <- (#peek sk_canvas_savelayerrec_t, fFlags) in'ptr
    pure SkCanvasSaveLayerRec{..}
  poke in'ptr in'value = do
    (#poke sk_canvas_savelayerrec_t, fBounds) in'ptr in'value.bounds
    (#poke sk_canvas_savelayerrec_t, fPaint) in'ptr in'value.paint
    (#poke sk_canvas_savelayerrec_t, fBackdrop) in'ptr in'value.backdrop
    (#poke sk_canvas_savelayerrec_t, fFlags) in'ptr in'value.flags
-- | `skottie_animation_t`
data SkottieAnimation = SkottieAnimation
  deriving (Show, Eq, Ord)
-- | `skottie_animation_builder_t`
data SkottieAnimationBuilder = SkottieAnimationBuilder
  deriving (Show, Eq, Ord)
-- | `skottie_resource_provider_t`
data SkottieResourceProvider = SkottieResourceProvider
  deriving (Show, Eq, Ord)
-- | `skottie_property_observer_t`
data SkottiePropertyObserver = SkottiePropertyObserver
  deriving (Show, Eq, Ord)
-- | `skottie_logger_t`
data SkottieLogger = SkottieLogger
  deriving (Show, Eq, Ord)
-- | `skottie_marker_observer_t`
data SkottieMarkerObserver = SkottieMarkerObserver
  deriving (Show, Eq, Ord)
-- | `sksg_invalidation_controller_t`
data SksgInvalidationController = SksgInvalidationController
  deriving (Show, Eq, Ord)
-- | `skottie_animation_renderflags_t`
newtype SkottieAnimationRenderFlags = SkottieAnimationRenderFlags (#type skottie_animation_renderflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SKIP_TOP_LEVEL_ISOLATION`
skottieAnimationRenderFlags'SkipTopLevelIsolation :: SkottieAnimationRenderFlags
skottieAnimationRenderFlags'SkipTopLevelIsolation = #const SKIP_TOP_LEVEL_ISOLATION
-- | `DISABLE_TOP_LEVEL_CLIPPING`
skottieAnimationRenderFlags'DisableTopLevelClipping :: SkottieAnimationRenderFlags
skottieAnimationRenderFlags'DisableTopLevelClipping = #const DISABLE_TOP_LEVEL_CLIPPING
-- | `skottie_animation_builder_flags_t`
newtype SkottieAnimationBuilderFlags = SkottieAnimationBuilderFlags (#type skottie_animation_builder_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottieAnimationBuilderFlags'None :: SkottieAnimationBuilderFlags
skottieAnimationBuilderFlags'None = #const NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottieAnimationBuilderFlags'DeferImageLoading :: SkottieAnimationBuilderFlags
skottieAnimationBuilderFlags'DeferImageLoading = #const DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottieAnimationBuilderFlags'PreferEmbeddedFonts :: SkottieAnimationBuilderFlags
skottieAnimationBuilderFlags'PreferEmbeddedFonts = #const PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `skottie_animation_builder_stats_t`
data SkottieAnimationBuilderStats = SkottieAnimationBuilderStats
  { totalLoadTimeMS :: CFloat
  -- ^ `fTotalLoadTimeMS`
  , jsonParseTimeMS :: CFloat
  -- ^ `fJsonParseTimeMS`
  , sceneParseTimeMS :: CFloat
  -- ^ `fSceneParseTimeMS`
  , jsonSize :: CSize
  -- ^ `fJsonSize`
  , animatorCount :: CSize
  -- ^ `fAnimatorCount`
  } deriving (Show, Eq, Ord)
instance Offset "totalLoadTimeMS" SkottieAnimationBuilderStats where rawOffset = (#offset skottie_animation_builder_stats_t, fTotalLoadTimeMS)
instance Offset "jsonParseTimeMS" SkottieAnimationBuilderStats where rawOffset = (#offset skottie_animation_builder_stats_t, fJsonParseTimeMS)
instance Offset "sceneParseTimeMS" SkottieAnimationBuilderStats where rawOffset = (#offset skottie_animation_builder_stats_t, fSceneParseTimeMS)
instance Offset "jsonSize" SkottieAnimationBuilderStats where rawOffset = (#offset skottie_animation_builder_stats_t, fJsonSize)
instance Offset "animatorCount" SkottieAnimationBuilderStats where rawOffset = (#offset skottie_animation_builder_stats_t, fAnimatorCount)
instance Storable SkottieAnimationBuilderStats where
  sizeOf _ = (#size skottie_animation_builder_stats_t)
  alignment _ = (#alignment skottie_animation_builder_stats_t)
  peek in'ptr = do
    totalLoadTimeMS <- (#peek skottie_animation_builder_stats_t, fTotalLoadTimeMS) in'ptr
    jsonParseTimeMS <- (#peek skottie_animation_builder_stats_t, fJsonParseTimeMS) in'ptr
    sceneParseTimeMS <- (#peek skottie_animation_builder_stats_t, fSceneParseTimeMS) in'ptr
    jsonSize <- (#peek skottie_animation_builder_stats_t, fJsonSize) in'ptr
    animatorCount <- (#peek skottie_animation_builder_stats_t, fAnimatorCount) in'ptr
    pure SkottieAnimationBuilderStats{..}
  poke in'ptr in'value = do
    (#poke skottie_animation_builder_stats_t, fTotalLoadTimeMS) in'ptr in'value.totalLoadTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonParseTimeMS) in'ptr in'value.jsonParseTimeMS
    (#poke skottie_animation_builder_stats_t, fSceneParseTimeMS) in'ptr in'value.sceneParseTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonSize) in'ptr in'value.jsonSize
    (#poke skottie_animation_builder_stats_t, fAnimatorCount) in'ptr in'value.animatorCount
-- | `skresources_image_asset_t`
data SkResourcesImageAsset = SkResourcesImageAsset
  deriving (Show, Eq, Ord)
-- | `skresources_multi_frame_image_asset_t`
data SkResourcesMultiFrameImageAsset = SkResourcesMultiFrameImageAsset
  deriving (Show, Eq, Ord)
-- | `skresources_external_track_asset_t`
data SkResourcesExternalTrackAsset = SkResourcesExternalTrackAsset
  deriving (Show, Eq, Ord)
-- | `skresources_resource_provider_t`
data SkResourcesResourceProvider = SkResourcesResourceProvider
  deriving (Show, Eq, Ord)
-- | `d3d_dxgi_adapter_t`
data D3dDxgiAdapter = D3dDxgiAdapter
  deriving (Show, Eq, Ord)
-- | `d3d_d12_device_t`
data D3dD12Device = D3dD12Device
  deriving (Show, Eq, Ord)
-- | `d3d_d12_command_queue_t`
data D3dD12CommandQueue = D3dD12CommandQueue
  deriving (Show, Eq, Ord)
-- | `gr_d3d_memory_allocator_t`
data GrD3dMemoryAllocAtOr = GrD3dMemoryAllocAtOr
  deriving (Show, Eq, Ord)
-- | `gr_d3d_backendcontext_t`
data GrD3dBackendContext = GrD3dBackendContext
  { adapter :: Ptr (D3dDxgiAdapter)
  -- ^ `fAdapter`
  , device :: Ptr (D3dD12Device)
  -- ^ `fDevice`
  , queue :: Ptr (D3dD12CommandQueue)
  -- ^ `fQueue`
  , memoryAllocator :: Ptr (GrD3dMemoryAllocAtOr)
  -- ^ `fMemoryAllocator`
  , protectedContext :: CBool
  -- ^ `fProtectedContext`
  } deriving (Show, Eq, Ord)
instance Offset "adapter" GrD3dBackendContext where rawOffset = (#offset gr_d3d_backendcontext_t, fAdapter)
instance Offset "device" GrD3dBackendContext where rawOffset = (#offset gr_d3d_backendcontext_t, fDevice)
instance Offset "queue" GrD3dBackendContext where rawOffset = (#offset gr_d3d_backendcontext_t, fQueue)
instance Offset "memoryAllocator" GrD3dBackendContext where rawOffset = (#offset gr_d3d_backendcontext_t, fMemoryAllocator)
instance Offset "protectedContext" GrD3dBackendContext where rawOffset = (#offset gr_d3d_backendcontext_t, fProtectedContext)
instance Storable GrD3dBackendContext where
  sizeOf _ = (#size gr_d3d_backendcontext_t)
  alignment _ = (#alignment gr_d3d_backendcontext_t)
  peek in'ptr = do
    adapter <- (#peek gr_d3d_backendcontext_t, fAdapter) in'ptr
    device <- (#peek gr_d3d_backendcontext_t, fDevice) in'ptr
    queue <- (#peek gr_d3d_backendcontext_t, fQueue) in'ptr
    memoryAllocator <- (#peek gr_d3d_backendcontext_t, fMemoryAllocator) in'ptr
    protectedContext <- (#peek gr_d3d_backendcontext_t, fProtectedContext) in'ptr
    pure GrD3dBackendContext{..}
  poke in'ptr in'value = do
    (#poke gr_d3d_backendcontext_t, fAdapter) in'ptr in'value.adapter
    (#poke gr_d3d_backendcontext_t, fDevice) in'ptr in'value.device
    (#poke gr_d3d_backendcontext_t, fQueue) in'ptr in'value.queue
    (#poke gr_d3d_backendcontext_t, fMemoryAllocator) in'ptr in'value.memoryAllocator
    (#poke gr_d3d_backendcontext_t, fProtectedContext) in'ptr in'value.protectedContext
-- | `d3d_d12_resource_t`
data D3dD12Resource = D3dD12Resource
  deriving (Show, Eq, Ord)
-- | `d3d_alloc_t`
data D3dAlloc = D3dAlloc
  deriving (Show, Eq, Ord)
-- | `gr_d3d_textureresourceinfo_t`
data GrD3dTextureResourceInfo = GrD3dTextureResourceInfo
  { resource :: Ptr (D3dD12Resource)
  -- ^ `fResource`
  , alloc :: Ptr (D3dAlloc)
  -- ^ `fAlloc`
  , resourceState :: Word32
  -- ^ `fResourceState`
  , format :: Word32
  -- ^ `fFormat`
  , sampleCount :: Word32
  -- ^ `fSampleCount`
  , levelCount :: Word32
  -- ^ `fLevelCount`
  , sampleQualityPattern :: CUInt
  -- ^ `fSampleQualityPattern`
  , protected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "resource" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResource)
instance Offset "alloc" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fAlloc)
instance Offset "resourceState" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResourceState)
instance Offset "format" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fFormat)
instance Offset "sampleCount" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleCount)
instance Offset "levelCount" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fLevelCount)
instance Offset "sampleQualityPattern" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleQualityPattern)
instance Offset "protected" GrD3dTextureResourceInfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fProtected)
instance Storable GrD3dTextureResourceInfo where
  sizeOf _ = (#size gr_d3d_textureresourceinfo_t)
  alignment _ = (#alignment gr_d3d_textureresourceinfo_t)
  peek in'ptr = do
    resource <- (#peek gr_d3d_textureresourceinfo_t, fResource) in'ptr
    alloc <- (#peek gr_d3d_textureresourceinfo_t, fAlloc) in'ptr
    resourceState <- (#peek gr_d3d_textureresourceinfo_t, fResourceState) in'ptr
    format <- (#peek gr_d3d_textureresourceinfo_t, fFormat) in'ptr
    sampleCount <- (#peek gr_d3d_textureresourceinfo_t, fSampleCount) in'ptr
    levelCount <- (#peek gr_d3d_textureresourceinfo_t, fLevelCount) in'ptr
    sampleQualityPattern <- (#peek gr_d3d_textureresourceinfo_t, fSampleQualityPattern) in'ptr
    protected <- (#peek gr_d3d_textureresourceinfo_t, fProtected) in'ptr
    pure GrD3dTextureResourceInfo{..}
  poke in'ptr in'value = do
    (#poke gr_d3d_textureresourceinfo_t, fResource) in'ptr in'value.resource
    (#poke gr_d3d_textureresourceinfo_t, fAlloc) in'ptr in'value.alloc
    (#poke gr_d3d_textureresourceinfo_t, fResourceState) in'ptr in'value.resourceState
    (#poke gr_d3d_textureresourceinfo_t, fFormat) in'ptr in'value.format
    (#poke gr_d3d_textureresourceinfo_t, fSampleCount) in'ptr in'value.sampleCount
    (#poke gr_d3d_textureresourceinfo_t, fLevelCount) in'ptr in'value.levelCount
    (#poke gr_d3d_textureresourceinfo_t, fSampleQualityPattern) in'ptr in'value.sampleQualityPattern
    (#poke gr_d3d_textureresourceinfo_t, fProtected) in'ptr in'value.protected
-- | `sk_colorfilter_unref`
foreign import ccall "sk_colorfilter_unref" skColorFilterUnRef :: (Ptr (SkColorFilter)) -> IO (())
-- | `sk_colorfilter_new_mode`
foreign import ccall "sk_colorfilter_new_mode" skColorFilterNewMode :: (SkColor) -> (SkBlendMode) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_lighting`
foreign import ccall "sk_colorfilter_new_lighting" skColorFilterNewLighting :: (SkColor) -> (SkColor) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_compose`
foreign import ccall "sk_colorfilter_new_compose" skColorFilterNewCompose :: (Ptr (SkColorFilter)) -> (Ptr (SkColorFilter)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_color_matrix`
foreign import ccall "sk_colorfilter_new_color_matrix" skColorFilterNewColorMatrix :: (Ptr (CFloat)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_hsla_matrix`
foreign import ccall "sk_colorfilter_new_hsla_matrix" skColorFilterNewHsLaMatrix :: (Ptr (CFloat)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_linear_to_srgb_gamma`
foreign import ccall "sk_colorfilter_new_linear_to_srgb_gamma" skColorFilterNewLinearToSrgbGamma :: IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_srgb_to_linear_gamma`
foreign import ccall "sk_colorfilter_new_srgb_to_linear_gamma" skColorFilterNewSrgbToLinearGamma :: IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_lerp`
foreign import ccall "sk_colorfilter_new_lerp" skColorFilterNewLeRp :: (CFloat) -> (Ptr (SkColorFilter)) -> (Ptr (SkColorFilter)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_luma_color`
foreign import ccall "sk_colorfilter_new_luma_color" skColorFilterNewLumaColor :: IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_high_contrast`
foreign import ccall "sk_colorfilter_new_high_contrast" skColorFilterNewHighContrast :: (Ptr (SkHighContrastConfig)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_table`
foreign import ccall "sk_colorfilter_new_table" skColorFilterNewTable :: (Ptr (Word8)) -> IO (Ptr (SkColorFilter))
-- | `sk_colorfilter_new_table_argb`
foreign import ccall "sk_colorfilter_new_table_argb" skColorFilterNewTableArgb :: (Ptr (Word8)) -> (Ptr (Word8)) -> (Ptr (Word8)) -> (Ptr (Word8)) -> IO (Ptr (SkColorFilter))
-- | `sk_typeface_unref`
foreign import ccall "sk_typeface_unref" skTypefaceUnRef :: (Ptr (SkTypeface)) -> IO (())
-- | `sk_typeface_get_fontstyle`
foreign import ccall "sk_typeface_get_fontstyle" skTypefaceGetFontStyle :: (Ptr (SkTypeface)) -> IO (Ptr (SkFontStyle))
-- | `sk_typeface_get_font_weight`
foreign import ccall "sk_typeface_get_font_weight" skTypefaceGetFontWeight :: (Ptr (SkTypeface)) -> IO (CInt)
-- | `sk_typeface_get_font_width`
foreign import ccall "sk_typeface_get_font_width" skTypefaceGetFontWidth :: (Ptr (SkTypeface)) -> IO (CInt)
-- | `sk_typeface_get_font_slant`
foreign import ccall "sk_typeface_get_font_slant" skTypefaceGetFontSlant :: (Ptr (SkTypeface)) -> IO (SkFontStyleSlant)
-- | `sk_typeface_is_fixed_pitch`
foreign import ccall "sk_typeface_is_fixed_pitch" skTypefaceIsFixedPitch :: (Ptr (SkTypeface)) -> IO (CBool)
-- | `sk_typeface_create_default`
foreign import ccall "sk_typeface_create_default" skTypefaceCreateDefault :: IO (Ptr (SkTypeface))
-- | `sk_typeface_ref_default`
foreign import ccall "sk_typeface_ref_default" skTypefaceRefDefault :: IO (Ptr (SkTypeface))
-- | `sk_typeface_create_from_name`
foreign import ccall "sk_typeface_create_from_name" skTypefaceCreateFromName :: (Ptr (CChar)) -> (Ptr (SkFontStyle)) -> IO (Ptr (SkTypeface))
-- | `sk_typeface_create_from_file`
foreign import ccall "sk_typeface_create_from_file" skTypefaceCreateFromFile :: (Ptr (CChar)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_typeface_create_from_stream`
foreign import ccall "sk_typeface_create_from_stream" skTypefaceCreateFromStream :: (Ptr (SkStreamAsset)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_typeface_create_from_data`
foreign import ccall "sk_typeface_create_from_data" skTypefaceCreateFromData :: (Ptr (SkData)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_typeface_unichars_to_glyphs`
foreign import ccall "sk_typeface_unichars_to_glyphs" skTypefaceUniCharsToGlyphs :: (Ptr (SkTypeface)) -> (Ptr (Int32)) -> (CInt) -> (Ptr (Word16)) -> IO (())
-- | `sk_typeface_unichar_to_glyph`
foreign import ccall "sk_typeface_unichar_to_glyph" skTypefaceUniCharToGlyph :: (Ptr (SkTypeface)) -> (Int32) -> IO (Word16)
-- | `sk_typeface_count_glyphs`
foreign import ccall "sk_typeface_count_glyphs" skTypefaceCountGlyphs :: (Ptr (SkTypeface)) -> IO (CInt)
-- | `sk_typeface_count_tables`
foreign import ccall "sk_typeface_count_tables" skTypefaceCountTables :: (Ptr (SkTypeface)) -> IO (CInt)
-- | `sk_typeface_get_table_tags`
foreign import ccall "sk_typeface_get_table_tags" skTypefaceGetTableTags :: (Ptr (SkTypeface)) -> (Ptr (SkFontTableTag)) -> IO (CInt)
-- | `sk_typeface_get_table_size`
foreign import ccall "sk_typeface_get_table_size" skTypefaceGetTableSize :: (Ptr (SkTypeface)) -> (SkFontTableTag) -> IO (CSize)
-- | `sk_typeface_get_table_data`
foreign import ccall "sk_typeface_get_table_data" skTypefaceGetTableData :: (Ptr (SkTypeface)) -> (SkFontTableTag) -> (CSize) -> (CSize) -> (Ptr (())) -> IO (CSize)
-- | `sk_typeface_copy_table_data`
foreign import ccall "sk_typeface_copy_table_data" skTypefaceCopyTableData :: (Ptr (SkTypeface)) -> (SkFontTableTag) -> IO (Ptr (SkData))
-- | `sk_typeface_get_units_per_em`
foreign import ccall "sk_typeface_get_units_per_em" skTypefaceGetUnitsPerEm :: (Ptr (SkTypeface)) -> IO (CInt)
-- | `sk_typeface_get_kerning_pair_adjustments`
foreign import ccall "sk_typeface_get_kerning_pair_adjustments" skTypefaceGetKernIngPairAdjustments :: (Ptr (SkTypeface)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (Int32)) -> IO (CBool)
-- | `sk_typeface_get_family_name`
foreign import ccall "sk_typeface_get_family_name" skTypefaceGetFamilyName :: (Ptr (SkTypeface)) -> IO (Ptr (SkString))
-- | `sk_typeface_open_stream`
foreign import ccall "sk_typeface_open_stream" skTypefaceOpenStream :: (Ptr (SkTypeface)) -> (Ptr (CInt)) -> IO (Ptr (SkStreamAsset))
-- | `sk_fontmgr_create_default`
foreign import ccall "sk_fontmgr_create_default" skFontMGrCreateDefault :: IO (Ptr (SkFontMGr))
-- | `sk_fontmgr_ref_default`
foreign import ccall "sk_fontmgr_ref_default" skFontMGrRefDefault :: IO (Ptr (SkFontMGr))
-- | `sk_fontmgr_unref`
foreign import ccall "sk_fontmgr_unref" skFontMGrUnRef :: (Ptr (SkFontMGr)) -> IO (())
-- | `sk_fontmgr_count_families`
foreign import ccall "sk_fontmgr_count_families" skFontMGrCountFamilies :: (Ptr (SkFontMGr)) -> IO (CInt)
-- | `sk_fontmgr_get_family_name`
foreign import ccall "sk_fontmgr_get_family_name" skFontMGrGetFamilyName :: (Ptr (SkFontMGr)) -> (CInt) -> (Ptr (SkString)) -> IO (())
-- | `sk_fontmgr_create_styleset`
foreign import ccall "sk_fontmgr_create_styleset" skFontMGrCreateStyleSet :: (Ptr (SkFontMGr)) -> (CInt) -> IO (Ptr (SkFontStyleSet))
-- | `sk_fontmgr_match_family`
foreign import ccall "sk_fontmgr_match_family" skFontMGrMatchFamily :: (Ptr (SkFontMGr)) -> (Ptr (CChar)) -> IO (Ptr (SkFontStyleSet))
-- | `sk_fontmgr_match_family_style`
foreign import ccall "sk_fontmgr_match_family_style" skFontMGrMatchFamilyStyle :: (Ptr (SkFontMGr)) -> (Ptr (CChar)) -> (Ptr (SkFontStyle)) -> IO (Ptr (SkTypeface))
-- | `sk_fontmgr_match_family_style_character`
foreign import ccall "sk_fontmgr_match_family_style_character" skFontMGrMatchFamilyStyleCharacter :: (Ptr (SkFontMGr)) -> (Ptr (CChar)) -> (Ptr (SkFontStyle)) -> (Ptr (Ptr (CChar))) -> (CInt) -> (Int32) -> IO (Ptr (SkTypeface))
-- | `sk_fontmgr_create_from_data`
foreign import ccall "sk_fontmgr_create_from_data" skFontMGrCreateFromData :: (Ptr (SkFontMGr)) -> (Ptr (SkData)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_fontmgr_create_from_stream`
foreign import ccall "sk_fontmgr_create_from_stream" skFontMGrCreateFromStream :: (Ptr (SkFontMGr)) -> (Ptr (SkStreamAsset)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_fontmgr_create_from_file`
foreign import ccall "sk_fontmgr_create_from_file" skFontMGrCreateFromFile :: (Ptr (SkFontMGr)) -> (Ptr (CChar)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_fontstyle_new`
foreign import ccall "sk_fontstyle_new" skFontStyleNew :: (CInt) -> (CInt) -> (SkFontStyleSlant) -> IO (Ptr (SkFontStyle))
-- | `sk_fontstyle_delete`
foreign import ccall "sk_fontstyle_delete" skFontStyleDelete :: (Ptr (SkFontStyle)) -> IO (())
-- | `sk_fontstyle_get_weight`
foreign import ccall "sk_fontstyle_get_weight" skFontStyleGetWeight :: (Ptr (SkFontStyle)) -> IO (CInt)
-- | `sk_fontstyle_get_width`
foreign import ccall "sk_fontstyle_get_width" skFontStyleGetWidth :: (Ptr (SkFontStyle)) -> IO (CInt)
-- | `sk_fontstyle_get_slant`
foreign import ccall "sk_fontstyle_get_slant" skFontStyleGetSlant :: (Ptr (SkFontStyle)) -> IO (SkFontStyleSlant)
-- | `sk_fontstyleset_create_empty`
foreign import ccall "sk_fontstyleset_create_empty" skFontStyleSetCreateEmpty :: IO (Ptr (SkFontStyleSet))
-- | `sk_fontstyleset_unref`
foreign import ccall "sk_fontstyleset_unref" skFontStyleSetUnRef :: (Ptr (SkFontStyleSet)) -> IO (())
-- | `sk_fontstyleset_get_count`
foreign import ccall "sk_fontstyleset_get_count" skFontStyleSetGetCount :: (Ptr (SkFontStyleSet)) -> IO (CInt)
-- | `sk_fontstyleset_get_style`
foreign import ccall "sk_fontstyleset_get_style" skFontStyleSetGetStyle :: (Ptr (SkFontStyleSet)) -> (CInt) -> (Ptr (SkFontStyle)) -> (Ptr (SkString)) -> IO (())
-- | `sk_fontstyleset_create_typeface`
foreign import ccall "sk_fontstyleset_create_typeface" skFontStyleSetCreateTypeface :: (Ptr (SkFontStyleSet)) -> (CInt) -> IO (Ptr (SkTypeface))
-- | `sk_fontstyleset_match_style`
foreign import ccall "sk_fontstyleset_match_style" skFontStyleSetMatchStyle :: (Ptr (SkFontStyleSet)) -> (Ptr (SkFontStyle)) -> IO (Ptr (SkTypeface))
-- | `sk_picture_recorder_new`
foreign import ccall "sk_picture_recorder_new" skPictureRecorderNew :: IO (Ptr (SkPictureRecorder))
-- | `sk_picture_recorder_delete`
foreign import ccall "sk_picture_recorder_delete" skPictureRecorderDelete :: (Ptr (SkPictureRecorder)) -> IO (())
-- | `sk_picture_recorder_begin_recording`
foreign import ccall "sk_picture_recorder_begin_recording" skPictureRecorderBeginRecording :: (Ptr (SkPictureRecorder)) -> (Ptr (SkRect)) -> IO (Ptr (SkCanvas))
-- | `sk_picture_recorder_begin_recording_with_bbh_factory`
foreign import ccall "sk_picture_recorder_begin_recording_with_bbh_factory" skPictureRecorderBeginRecordingWithBbhFactory :: (Ptr (SkPictureRecorder)) -> (Ptr (SkRect)) -> (Ptr (SkBbhFactory)) -> IO (Ptr (SkCanvas))
-- | `sk_picture_recorder_end_recording`
foreign import ccall "sk_picture_recorder_end_recording" skPictureRecorderEndRecording :: (Ptr (SkPictureRecorder)) -> IO (Ptr (SkPicture))
-- | `sk_picture_recorder_end_recording_as_drawable`
foreign import ccall "sk_picture_recorder_end_recording_as_drawable" skPictureRecorderEndRecordingAsDrawAble :: (Ptr (SkPictureRecorder)) -> IO (Ptr (SkDrawAble))
-- | `sk_picture_get_recording_canvas`
foreign import ccall "sk_picture_get_recording_canvas" skPictureGetRecordingCanvas :: (Ptr (SkPictureRecorder)) -> IO (Ptr (SkCanvas))
-- | `sk_picture_ref`
foreign import ccall "sk_picture_ref" skPictureRef :: (Ptr (SkPicture)) -> IO (())
-- | `sk_picture_unref`
foreign import ccall "sk_picture_unref" skPictureUnRef :: (Ptr (SkPicture)) -> IO (())
-- | `sk_picture_get_unique_id`
foreign import ccall "sk_picture_get_unique_id" skPictureGetUniqueId :: (Ptr (SkPicture)) -> IO (Word32)
-- | `sk_picture_get_cull_rect`
foreign import ccall "sk_picture_get_cull_rect" skPictureGetCullRect :: (Ptr (SkPicture)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_picture_make_shader`
foreign import ccall "sk_picture_make_shader" skPictureMakeShader :: (Ptr (SkPicture)) -> (SkShaderTileMode) -> (SkShaderTileMode) -> (SkFilterMode) -> (Ptr (SkMatrix)) -> (Ptr (SkRect)) -> IO (Ptr (SkShader))
-- | `sk_picture_serialize_to_data`
foreign import ccall "sk_picture_serialize_to_data" skPictureSerializeToData :: (Ptr (SkPicture)) -> IO (Ptr (SkData))
-- | `sk_picture_serialize_to_stream`
foreign import ccall "sk_picture_serialize_to_stream" skPictureSerializeToStream :: (Ptr (SkPicture)) -> (Ptr (SkWStream)) -> IO (())
-- | `sk_picture_deserialize_from_stream`
foreign import ccall "sk_picture_deserialize_from_stream" skPictureDeSerializeFromStream :: (Ptr (SkStream)) -> IO (Ptr (SkPicture))
-- | `sk_picture_deserialize_from_data`
foreign import ccall "sk_picture_deserialize_from_data" skPictureDeSerializeFromData :: (Ptr (SkData)) -> IO (Ptr (SkPicture))
-- | `sk_picture_deserialize_from_memory`
foreign import ccall "sk_picture_deserialize_from_memory" skPictureDeSerializeFromMemory :: (Ptr (())) -> (CSize) -> IO (Ptr (SkPicture))
-- | `sk_picture_playback`
foreign import ccall "sk_picture_playback" skPicturePlayback :: (Ptr (SkPicture)) -> (Ptr (SkCanvas)) -> IO (())
-- | `sk_picture_approximate_op_count`
foreign import ccall "sk_picture_approximate_op_count" skPictureApproximateOpCount :: (Ptr (SkPicture)) -> (CBool) -> IO (CInt)
-- | `sk_picture_approximate_bytes_used`
foreign import ccall "sk_picture_approximate_bytes_used" skPictureApproximateBytesUsed :: (Ptr (SkPicture)) -> IO (CSize)
-- | `sk_rtree_factory_new`
foreign import ccall "sk_rtree_factory_new" skRTreeFactoryNew :: IO (Ptr (SkRTreeFactory))
-- | `sk_rtree_factory_delete`
foreign import ccall "sk_rtree_factory_delete" skRTreeFactoryDelete :: (Ptr (SkRTreeFactory)) -> IO (())
-- | `sk_surface_new_null`
foreign import ccall "sk_surface_new_null" skSurfaceNewNull :: (CInt) -> (CInt) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_raster`
foreign import ccall "sk_surface_new_raster" skSurfaceNewRaster :: (Ptr (SkImageInfo)) -> (CSize) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_raster_direct`
foreign import ccall "sk_surface_new_raster_direct" skSurfaceNewRasterDirect :: (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (FunPtr (SkSurfaceRasterReleaseProc)) -> (Ptr (())) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_backend_texture`
foreign import ccall "sk_surface_new_backend_texture" skSurfaceNewBackendTexture :: (Ptr (GrRecordingContext)) -> (Ptr (GrBackendTexture)) -> (GrSurfaceOrigin) -> (CInt) -> (SkColorType) -> (Ptr (SkColorSpace)) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_backend_render_target`
foreign import ccall "sk_surface_new_backend_render_target" skSurfaceNewBackendRenderTarget :: (Ptr (GrRecordingContext)) -> (Ptr (GrBackendRenderTarget)) -> (GrSurfaceOrigin) -> (SkColorType) -> (Ptr (SkColorSpace)) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_render_target`
foreign import ccall "sk_surface_new_render_target" skSurfaceNewRenderTarget :: (Ptr (GrRecordingContext)) -> (CBool) -> (Ptr (SkImageInfo)) -> (CInt) -> (GrSurfaceOrigin) -> (Ptr (SkSurfaceProps)) -> (CBool) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_metal_layer`
foreign import ccall "sk_surface_new_metal_layer" skSurfaceNewMetalLayer :: (Ptr (GrRecordingContext)) -> (Ptr (())) -> (GrSurfaceOrigin) -> (CInt) -> (SkColorType) -> (Ptr (SkColorSpace)) -> (Ptr (SkSurfaceProps)) -> (Ptr (Ptr (()))) -> IO (Ptr (SkSurface))
-- | `sk_surface_new_metal_view`
foreign import ccall "sk_surface_new_metal_view" skSurfaceNewMetalView :: (Ptr (GrRecordingContext)) -> (Ptr (())) -> (GrSurfaceOrigin) -> (CInt) -> (SkColorType) -> (Ptr (SkColorSpace)) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkSurface))
-- | `sk_surface_unref`
foreign import ccall "sk_surface_unref" skSurfaceUnRef :: (Ptr (SkSurface)) -> IO (())
-- | `sk_surface_get_canvas`
foreign import ccall "sk_surface_get_canvas" skSurfaceGetCanvas :: (Ptr (SkSurface)) -> IO (Ptr (SkCanvas))
-- | `sk_surface_new_image_snapshot`
foreign import ccall "sk_surface_new_image_snapshot" skSurfaceNewImageSnapshot :: (Ptr (SkSurface)) -> IO (Ptr (SkImage))
-- | `sk_surface_new_image_snapshot_with_crop`
foreign import ccall "sk_surface_new_image_snapshot_with_crop" skSurfaceNewImageSnapshotWithCrop :: (Ptr (SkSurface)) -> (Ptr (SkIRect)) -> IO (Ptr (SkImage))
-- | `sk_surface_draw`
foreign import ccall "sk_surface_draw" skSurfaceDraw :: (Ptr (SkSurface)) -> (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_surface_peek_pixels`
foreign import ccall "sk_surface_peek_pixels" skSurfacePeekPixels :: (Ptr (SkSurface)) -> (Ptr (SkPixmap)) -> IO (CBool)
-- | `sk_surface_read_pixels`
foreign import ccall "sk_surface_read_pixels" skSurfaceReadPixels :: (Ptr (SkSurface)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_surface_get_props`
foreign import ccall "sk_surface_get_props" skSurfaceGetProps :: (Ptr (SkSurface)) -> IO (Ptr (SkSurfaceProps))
-- | `sk_surface_get_recording_context`
foreign import ccall "sk_surface_get_recording_context" skSurfaceGetRecordingContext :: (Ptr (SkSurface)) -> IO (Ptr (GrRecordingContext))
-- | `sk_surfaceprops_new`
foreign import ccall "sk_surfaceprops_new" skSurfacePropsNew :: (Word32) -> (SkPixelGeometry) -> IO (Ptr (SkSurfaceProps))
-- | `sk_surfaceprops_delete`
foreign import ccall "sk_surfaceprops_delete" skSurfacePropsDelete :: (Ptr (SkSurfaceProps)) -> IO (())
-- | `sk_surfaceprops_get_flags`
foreign import ccall "sk_surfaceprops_get_flags" skSurfacePropsGetFlags :: (Ptr (SkSurfaceProps)) -> IO (Word32)
-- | `sk_surfaceprops_get_pixel_geometry`
foreign import ccall "sk_surfaceprops_get_pixel_geometry" skSurfacePropsGetPixelGeometry :: (Ptr (SkSurfaceProps)) -> IO (SkPixelGeometry)
-- | `sk_pixmap_destructor`
foreign import ccall "sk_pixmap_destructor" skPixmapDestructOr :: (Ptr (SkPixmap)) -> IO (())
-- | `sk_pixmap_new`
foreign import ccall "sk_pixmap_new" skPixmapNew :: IO (Ptr (SkPixmap))
-- | `sk_pixmap_new_with_params`
foreign import ccall "sk_pixmap_new_with_params" skPixmapNewWithParams :: (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> IO (Ptr (SkPixmap))
-- | `sk_pixmap_reset`
foreign import ccall "sk_pixmap_reset" skPixmapReset :: (Ptr (SkPixmap)) -> IO (())
-- | `sk_pixmap_reset_with_params`
foreign import ccall "sk_pixmap_reset_with_params" skPixmapResetWithParams :: (Ptr (SkPixmap)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> IO (())
-- | `sk_pixmap_set_colorspace`
foreign import ccall "sk_pixmap_set_colorspace" skPixmapSetColorSpace :: (Ptr (SkPixmap)) -> (Ptr (SkColorSpace)) -> IO (())
-- | `sk_pixmap_extract_subset`
foreign import ccall "sk_pixmap_extract_subset" skPixmapExtractSubset :: (Ptr (SkPixmap)) -> (Ptr (SkPixmap)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_pixmap_get_info`
foreign import ccall "sk_pixmap_get_info" skPixmapGetInfo :: (Ptr (SkPixmap)) -> (Ptr (SkImageInfo)) -> IO (())
-- | `sk_pixmap_get_row_bytes`
foreign import ccall "sk_pixmap_get_row_bytes" skPixmapGetRowBytes :: (Ptr (SkPixmap)) -> IO (CSize)
-- | `sk_pixmap_get_colorspace`
foreign import ccall "sk_pixmap_get_colorspace" skPixmapGetColorSpace :: (Ptr (SkPixmap)) -> IO (Ptr (SkColorSpace))
-- | `sk_pixmap_compute_is_opaque`
foreign import ccall "sk_pixmap_compute_is_opaque" skPixmapComputeIsOpaque :: (Ptr (SkPixmap)) -> IO (CBool)
-- | `sk_pixmap_get_pixel_color`
foreign import ccall "sk_pixmap_get_pixel_color" skPixmapGetPixelColor :: (Ptr (SkPixmap)) -> (CInt) -> (CInt) -> IO (SkColor)
-- | `sk_pixmap_get_pixel_color4f`
foreign import ccall "sk_pixmap_get_pixel_color4f" skPixmapGetPixelColor4F :: (Ptr (SkPixmap)) -> (CInt) -> (CInt) -> (Ptr (SkColor4F)) -> IO (())
-- | `sk_pixmap_get_pixel_alphaf`
foreign import ccall "sk_pixmap_get_pixel_alphaf" skPixmapGetPixelAlphaF :: (Ptr (SkPixmap)) -> (CInt) -> (CInt) -> IO (CFloat)
-- | `sk_pixmap_get_writable_addr`
foreign import ccall "sk_pixmap_get_writable_addr" skPixmapGetWritableAddR :: (Ptr (SkPixmap)) -> IO (Ptr (()))
-- | `sk_pixmap_get_writeable_addr_with_xy`
foreign import ccall "sk_pixmap_get_writeable_addr_with_xy" skPixmapGetWriteAbleAddRWithXy :: (Ptr (SkPixmap)) -> (CInt) -> (CInt) -> IO (Ptr (()))
-- | `sk_pixmap_read_pixels`
foreign import ccall "sk_pixmap_read_pixels" skPixmapReadPixels :: (Ptr (SkPixmap)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_pixmap_scale_pixels`
foreign import ccall "sk_pixmap_scale_pixels" skPixmapScalePixels :: (Ptr (SkPixmap)) -> (Ptr (SkPixmap)) -> (Ptr (SkSamplingOptions)) -> IO (CBool)
-- | `sk_pixmap_erase_color`
foreign import ccall "sk_pixmap_erase_color" skPixmapEraseColor :: (Ptr (SkPixmap)) -> (SkColor) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_pixmap_erase_color4f`
foreign import ccall "sk_pixmap_erase_color4f" skPixmapEraseColor4F :: (Ptr (SkPixmap)) -> (Ptr (SkColor4F)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_webpencoder_encode`
foreign import ccall "sk_webpencoder_encode" skWebpEncoderEncode :: (Ptr (SkWStream)) -> (Ptr (SkPixmap)) -> (Ptr (SkWebpEncoderOptions)) -> IO (CBool)
-- | `sk_jpegencoder_encode`
foreign import ccall "sk_jpegencoder_encode" skJpegEncoderEncode :: (Ptr (SkWStream)) -> (Ptr (SkPixmap)) -> (Ptr (SkJpegEncoderOptions)) -> IO (CBool)
-- | `sk_pngencoder_encode`
foreign import ccall "sk_pngencoder_encode" skPngEncoderEncode :: (Ptr (SkWStream)) -> (Ptr (SkPixmap)) -> (Ptr (SkPngEncoderOptions)) -> IO (CBool)
-- | `sk_swizzle_swap_rb`
foreign import ccall "sk_swizzle_swap_rb" skSwizzLeSwapRb :: (Ptr (Word32)) -> (Ptr (Word32)) -> (CInt) -> IO (())
-- | `sk_color_unpremultiply`
foreign import ccall "sk_color_unpremultiply" skColorUnpremulTipLy :: (SkPmColor) -> IO (SkColor)
-- | `sk_color_premultiply`
foreign import ccall "sk_color_premultiply" skColorPreMultiply :: (SkColor) -> IO (SkPmColor)
-- | `sk_color_unpremultiply_array`
foreign import ccall "sk_color_unpremultiply_array" skColorUnpremulTipLyArray :: (Ptr (SkPmColor)) -> (CInt) -> (Ptr (SkColor)) -> IO (())
-- | `sk_color_premultiply_array`
foreign import ccall "sk_color_premultiply_array" skColorPreMultiplyArray :: (Ptr (SkColor)) -> (CInt) -> (Ptr (SkPmColor)) -> IO (())
-- | `sk_color_get_bit_shift`
foreign import ccall "sk_color_get_bit_shift" skColorGetBitShift :: (Ptr (CInt)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> IO (())
-- | `sk_region_new`
foreign import ccall "sk_region_new" skRegionNew :: IO (Ptr (SkRegion))
-- | `sk_region_delete`
foreign import ccall "sk_region_delete" skRegionDelete :: (Ptr (SkRegion)) -> IO (())
-- | `sk_region_is_empty`
foreign import ccall "sk_region_is_empty" skRegionIsEmpty :: (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_is_rect`
foreign import ccall "sk_region_is_rect" skRegionIsRect :: (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_is_complex`
foreign import ccall "sk_region_is_complex" skRegionIsComplex :: (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_get_bounds`
foreign import ccall "sk_region_get_bounds" skRegionGetBounds :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (())
-- | `sk_region_get_boundary_path`
foreign import ccall "sk_region_get_boundary_path" skRegionGetBoundaryPath :: (Ptr (SkRegion)) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_region_set_empty`
foreign import ccall "sk_region_set_empty" skRegionSetEmpty :: (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_set_rect`
foreign import ccall "sk_region_set_rect" skRegionSetRect :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_region_set_rects`
foreign import ccall "sk_region_set_rects" skRegionSetRectS :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> (CInt) -> IO (CBool)
-- | `sk_region_set_region`
foreign import ccall "sk_region_set_region" skRegionSetRegion :: (Ptr (SkRegion)) -> (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_set_path`
foreign import ccall "sk_region_set_path" skRegionSetPath :: (Ptr (SkRegion)) -> (Ptr (SkPath)) -> (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_intersects_rect`
foreign import ccall "sk_region_intersects_rect" skRegionIntersectsRect :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_region_intersects`
foreign import ccall "sk_region_intersects" skRegionIntersects :: (Ptr (SkRegion)) -> (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_contains_point`
foreign import ccall "sk_region_contains_point" skRegionContainsPoint :: (Ptr (SkRegion)) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_region_contains_rect`
foreign import ccall "sk_region_contains_rect" skRegionContainsRect :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_region_contains`
foreign import ccall "sk_region_contains" skRegionContains :: (Ptr (SkRegion)) -> (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_quick_contains`
foreign import ccall "sk_region_quick_contains" skRegionQuickContains :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_region_quick_reject_rect`
foreign import ccall "sk_region_quick_reject_rect" skRegionQuickRejectRect :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_region_quick_reject`
foreign import ccall "sk_region_quick_reject" skRegionQuickReject :: (Ptr (SkRegion)) -> (Ptr (SkRegion)) -> IO (CBool)
-- | `sk_region_translate`
foreign import ccall "sk_region_translate" skRegionTranslate :: (Ptr (SkRegion)) -> (CInt) -> (CInt) -> IO (())
-- | `sk_region_op_rect`
foreign import ccall "sk_region_op_rect" skRegionOpRect :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> (SkRegionOp) -> IO (CBool)
-- | `sk_region_op`
foreign import ccall "sk_region_op" skRegionOp :: (Ptr (SkRegion)) -> (Ptr (SkRegion)) -> (SkRegionOp) -> IO (CBool)
-- | `sk_region_iterator_new`
foreign import ccall "sk_region_iterator_new" skRegionIteratorNew :: (Ptr (SkRegion)) -> IO (Ptr (SkRegionIterator))
-- | `sk_region_iterator_delete`
foreign import ccall "sk_region_iterator_delete" skRegionIteratorDelete :: (Ptr (SkRegionIterator)) -> IO (())
-- | `sk_region_iterator_rewind`
foreign import ccall "sk_region_iterator_rewind" skRegionIteratorRewind :: (Ptr (SkRegionIterator)) -> IO (CBool)
-- | `sk_region_iterator_done`
foreign import ccall "sk_region_iterator_done" skRegionIteratorDone :: (Ptr (SkRegionIterator)) -> IO (CBool)
-- | `sk_region_iterator_next`
foreign import ccall "sk_region_iterator_next" skRegionIteratorNext :: (Ptr (SkRegionIterator)) -> IO (())
-- | `sk_region_iterator_rect`
foreign import ccall "sk_region_iterator_rect" skRegionIteratorRect :: (Ptr (SkRegionIterator)) -> (Ptr (SkIRect)) -> IO (())
-- | `sk_region_cliperator_new`
foreign import ccall "sk_region_cliperator_new" skRegionCliperatorNew :: (Ptr (SkRegion)) -> (Ptr (SkIRect)) -> IO (Ptr (SkRegionCliperator))
-- | `sk_region_cliperator_delete`
foreign import ccall "sk_region_cliperator_delete" skRegionCliperatorDelete :: (Ptr (SkRegionCliperator)) -> IO (())
-- | `sk_region_cliperator_done`
foreign import ccall "sk_region_cliperator_done" skRegionCliperatorDone :: (Ptr (SkRegionCliperator)) -> IO (CBool)
-- | `sk_region_cliperator_next`
foreign import ccall "sk_region_cliperator_next" skRegionCliperatorNext :: (Ptr (SkRegionCliperator)) -> IO (())
-- | `sk_region_cliperator_rect`
foreign import ccall "sk_region_cliperator_rect" skRegionCliperatorRect :: (Ptr (SkRegionCliperator)) -> (Ptr (SkIRect)) -> IO (())
-- | `sk_region_spanerator_new`
foreign import ccall "sk_region_spanerator_new" skRegionSpaneratorNew :: (Ptr (SkRegion)) -> (CInt) -> (CInt) -> (CInt) -> IO (Ptr (SkRegionSpanerator))
-- | `sk_region_spanerator_delete`
foreign import ccall "sk_region_spanerator_delete" skRegionSpaneratorDelete :: (Ptr (SkRegionSpanerator)) -> IO (())
-- | `sk_region_spanerator_next`
foreign import ccall "sk_region_spanerator_next" skRegionSpaneratorNext :: (Ptr (SkRegionSpanerator)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> IO (CBool)
-- | `sk_canvas_destroy`
foreign import ccall "sk_canvas_destroy" skCanvasDestroy :: (Ptr (SkCanvas)) -> IO (())
-- | `sk_canvas_clear`
foreign import ccall "sk_canvas_clear" skCanvasClear :: (Ptr (SkCanvas)) -> (SkColor) -> IO (())
-- | `sk_canvas_discard`
foreign import ccall "sk_canvas_discard" skCanvasDiscard :: (Ptr (SkCanvas)) -> IO (())
-- | `sk_canvas_get_save_count`
foreign import ccall "sk_canvas_get_save_count" skCanvasGetSaveCount :: (Ptr (SkCanvas)) -> IO (CInt)
-- | `sk_canvas_restore_to_count`
foreign import ccall "sk_canvas_restore_to_count" skCanvasRestoreToCount :: (Ptr (SkCanvas)) -> (CInt) -> IO (())
-- | `sk_canvas_draw_color`
foreign import ccall "sk_canvas_draw_color" skCanvasDrawColor :: (Ptr (SkCanvas)) -> (SkColor) -> (SkBlendMode) -> IO (())
-- | `sk_canvas_draw_points`
foreign import ccall "sk_canvas_draw_points" skCanvasDrawPoints :: (Ptr (SkCanvas)) -> (SkPointMode) -> (CSize) -> (Ptr (SkPoint)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_point`
foreign import ccall "sk_canvas_draw_point" skCanvasDrawPoint :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_line`
foreign import ccall "sk_canvas_draw_line" skCanvasDrawLine :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_simple_text`
foreign import ccall "sk_canvas_draw_simple_text" skCanvasDrawSimpleText :: (Ptr (SkCanvas)) -> (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (CFloat) -> (CFloat) -> (Ptr (SkFont)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_text_blob`
foreign import ccall "sk_canvas_draw_text_blob" skCanvasDrawTextBlob :: (Ptr (SkCanvas)) -> (Ptr (SkTextBlob)) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_reset_matrix`
foreign import ccall "sk_canvas_reset_matrix" skCanvasResetMatrix :: (Ptr (SkCanvas)) -> IO (())
-- | `sk_canvas_set_matrix`
foreign import ccall "sk_canvas_set_matrix" skCanvasSetMatrix :: (Ptr (SkCanvas)) -> (Ptr (SkMatrix44)) -> IO (())
-- | `sk_canvas_get_matrix`
foreign import ccall "sk_canvas_get_matrix" skCanvasGetMatrix :: (Ptr (SkCanvas)) -> (Ptr (SkMatrix44)) -> IO (())
-- | `sk_canvas_draw_round_rect`
foreign import ccall "sk_canvas_draw_round_rect" skCanvasDrawRoundRect :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_clip_rect_with_operation`
foreign import ccall "sk_canvas_clip_rect_with_operation" skCanvasClipRectWithOperation :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (SkClipOp) -> (CBool) -> IO (())
-- | `sk_canvas_clip_path_with_operation`
foreign import ccall "sk_canvas_clip_path_with_operation" skCanvasClipPathWithOperation :: (Ptr (SkCanvas)) -> (Ptr (SkPath)) -> (SkClipOp) -> (CBool) -> IO (())
-- | `sk_canvas_clip_rrect_with_operation`
foreign import ccall "sk_canvas_clip_rrect_with_operation" skCanvasClipRRectWithOperation :: (Ptr (SkCanvas)) -> (Ptr (SkRRect)) -> (SkClipOp) -> (CBool) -> IO (())
-- | `sk_canvas_get_local_clip_bounds`
foreign import ccall "sk_canvas_get_local_clip_bounds" skCanvasGetLocalClipBounds :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> IO (CBool)
-- | `sk_canvas_get_device_clip_bounds`
foreign import ccall "sk_canvas_get_device_clip_bounds" skCanvasGetDeviceClipBounds :: (Ptr (SkCanvas)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_canvas_save`
foreign import ccall "sk_canvas_save" skCanvasSave :: (Ptr (SkCanvas)) -> IO (CInt)
-- | `sk_canvas_save_layer`
foreign import ccall "sk_canvas_save_layer" skCanvasSaveLayer :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (CInt)
-- | `sk_canvas_save_layer_rec`
foreign import ccall "sk_canvas_save_layer_rec" skCanvasSaveLayerRec :: (Ptr (SkCanvas)) -> (Ptr (SkCanvasSaveLayerRec)) -> IO (CInt)
-- | `sk_canvas_restore`
foreign import ccall "sk_canvas_restore" skCanvasRestore :: (Ptr (SkCanvas)) -> IO (())
-- | `sk_canvas_translate`
foreign import ccall "sk_canvas_translate" skCanvasTranslate :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_scale`
foreign import ccall "sk_canvas_scale" skCanvasScale :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_rotate_degrees`
foreign import ccall "sk_canvas_rotate_degrees" skCanvasRotateDegrees :: (Ptr (SkCanvas)) -> (CFloat) -> IO (())
-- | `sk_canvas_rotate_radians`
foreign import ccall "sk_canvas_rotate_radians" skCanvasRotateRadians :: (Ptr (SkCanvas)) -> (CFloat) -> IO (())
-- | `sk_canvas_skew`
foreign import ccall "sk_canvas_skew" skCanvasSkew :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_concat`
foreign import ccall "sk_canvas_concat" skCanvasConCat :: (Ptr (SkCanvas)) -> (Ptr (SkMatrix44)) -> IO (())
-- | `sk_canvas_quick_reject`
foreign import ccall "sk_canvas_quick_reject" skCanvasQuickReject :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> IO (CBool)
-- | `sk_canvas_clip_region`
foreign import ccall "sk_canvas_clip_region" skCanvasClipRegion :: (Ptr (SkCanvas)) -> (Ptr (SkRegion)) -> (SkClipOp) -> IO (())
-- | `sk_canvas_draw_paint`
foreign import ccall "sk_canvas_draw_paint" skCanvasDrawPaint :: (Ptr (SkCanvas)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_region`
foreign import ccall "sk_canvas_draw_region" skCanvasDrawRegion :: (Ptr (SkCanvas)) -> (Ptr (SkRegion)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_rect`
foreign import ccall "sk_canvas_draw_rect" skCanvasDrawRect :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_rrect`
foreign import ccall "sk_canvas_draw_rrect" skCanvasDrawRRect :: (Ptr (SkCanvas)) -> (Ptr (SkRRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_circle`
foreign import ccall "sk_canvas_draw_circle" skCanvasDrawCircle :: (Ptr (SkCanvas)) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_oval`
foreign import ccall "sk_canvas_draw_oval" skCanvasDrawOval :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_path`
foreign import ccall "sk_canvas_draw_path" skCanvasDrawPath :: (Ptr (SkCanvas)) -> (Ptr (SkPath)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_image`
foreign import ccall "sk_canvas_draw_image" skCanvasDrawImage :: (Ptr (SkCanvas)) -> (Ptr (SkImage)) -> (CFloat) -> (CFloat) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_image_rect`
foreign import ccall "sk_canvas_draw_image_rect" skCanvasDrawImageRect :: (Ptr (SkCanvas)) -> (Ptr (SkImage)) -> (Ptr (SkRect)) -> (Ptr (SkRect)) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_picture`
foreign import ccall "sk_canvas_draw_picture" skCanvasDrawPicture :: (Ptr (SkCanvas)) -> (Ptr (SkPicture)) -> (Ptr (SkMatrix)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_drawable`
foreign import ccall "sk_canvas_draw_drawable" skCanvasDrawDrawAble :: (Ptr (SkCanvas)) -> (Ptr (SkDrawAble)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_canvas_new_from_bitmap`
foreign import ccall "sk_canvas_new_from_bitmap" skCanvasNewFromBitmap :: (Ptr (SkBitmap)) -> IO (Ptr (SkCanvas))
-- | `sk_canvas_new_from_raster`
foreign import ccall "sk_canvas_new_from_raster" skCanvasNewFromRaster :: (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkCanvas))
-- | `sk_canvas_draw_annotation`
foreign import ccall "sk_canvas_draw_annotation" skCanvasDrawAnnotation :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (CChar)) -> (Ptr (SkData)) -> IO (())
-- | `sk_canvas_draw_url_annotation`
foreign import ccall "sk_canvas_draw_url_annotation" skCanvasDrawUrlAnnotation :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (SkData)) -> IO (())
-- | `sk_canvas_draw_named_destination_annotation`
foreign import ccall "sk_canvas_draw_named_destination_annotation" skCanvasDrawNamedDestinationAnnotation :: (Ptr (SkCanvas)) -> (Ptr (SkPoint)) -> (Ptr (SkData)) -> IO (())
-- | `sk_canvas_draw_link_destination_annotation`
foreign import ccall "sk_canvas_draw_link_destination_annotation" skCanvasDrawLinkDestinationAnnotation :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (Ptr (SkData)) -> IO (())
-- | `sk_canvas_draw_image_lattice`
foreign import ccall "sk_canvas_draw_image_lattice" skCanvasDrawImageLattice :: (Ptr (SkCanvas)) -> (Ptr (SkImage)) -> (Ptr (SkLattice)) -> (Ptr (SkRect)) -> (SkFilterMode) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_image_nine`
foreign import ccall "sk_canvas_draw_image_nine" skCanvasDrawImageNine :: (Ptr (SkCanvas)) -> (Ptr (SkImage)) -> (Ptr (SkIRect)) -> (Ptr (SkRect)) -> (SkFilterMode) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_vertices`
foreign import ccall "sk_canvas_draw_vertices" skCanvasDrawVertices :: (Ptr (SkCanvas)) -> (Ptr (SkVertices)) -> (SkBlendMode) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_arc`
foreign import ccall "sk_canvas_draw_arc" skCanvasDrawArc :: (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (CBool) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_drrect`
foreign import ccall "sk_canvas_draw_drrect" skCanvasDrawDrRect :: (Ptr (SkCanvas)) -> (Ptr (SkRRect)) -> (Ptr (SkRRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_atlas`
foreign import ccall "sk_canvas_draw_atlas" skCanvasDrawAtlas :: (Ptr (SkCanvas)) -> (Ptr (SkImage)) -> (Ptr (SkRsxForm)) -> (Ptr (SkRect)) -> (Ptr (SkColor)) -> (CInt) -> (SkBlendMode) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_draw_patch`
foreign import ccall "sk_canvas_draw_patch" skCanvasDrawPatch :: (Ptr (SkCanvas)) -> (Ptr (SkPoint)) -> (Ptr (SkColor)) -> (Ptr (SkPoint)) -> (SkBlendMode) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_canvas_is_clip_empty`
foreign import ccall "sk_canvas_is_clip_empty" skCanvasIsClipEmpty :: (Ptr (SkCanvas)) -> IO (CBool)
-- | `sk_canvas_is_clip_rect`
foreign import ccall "sk_canvas_is_clip_rect" skCanvasIsClipRect :: (Ptr (SkCanvas)) -> IO (CBool)
-- | `sk_nodraw_canvas_new`
foreign import ccall "sk_nodraw_canvas_new" skNoDrawCanvasNew :: (CInt) -> (CInt) -> IO (Ptr (SkNoDrawCanvas))
-- | `sk_nodraw_canvas_destroy`
foreign import ccall "sk_nodraw_canvas_destroy" skNoDrawCanvasDestroy :: (Ptr (SkNoDrawCanvas)) -> IO (())
-- | `sk_nway_canvas_new`
foreign import ccall "sk_nway_canvas_new" skNWayCanvasNew :: (CInt) -> (CInt) -> IO (Ptr (SkNWayCanvas))
-- | `sk_nway_canvas_destroy`
foreign import ccall "sk_nway_canvas_destroy" skNWayCanvasDestroy :: (Ptr (SkNWayCanvas)) -> IO (())
-- | `sk_nway_canvas_add_canvas`
foreign import ccall "sk_nway_canvas_add_canvas" skNWayCanvasAddCanvas :: (Ptr (SkNWayCanvas)) -> (Ptr (SkCanvas)) -> IO (())
-- | `sk_nway_canvas_remove_canvas`
foreign import ccall "sk_nway_canvas_remove_canvas" skNWayCanvasRemoveCanvas :: (Ptr (SkNWayCanvas)) -> (Ptr (SkCanvas)) -> IO (())
-- | `sk_nway_canvas_remove_all`
foreign import ccall "sk_nway_canvas_remove_all" skNWayCanvasRemoveAll :: (Ptr (SkNWayCanvas)) -> IO (())
-- | `sk_overdraw_canvas_new`
foreign import ccall "sk_overdraw_canvas_new" skOverdrawCanvasNew :: (Ptr (SkCanvas)) -> IO (Ptr (SkOverdrawCanvas))
-- | `sk_overdraw_canvas_destroy`
foreign import ccall "sk_overdraw_canvas_destroy" skOverdrawCanvasDestroy :: (Ptr (SkOverdrawCanvas)) -> IO (())
-- | `sk_get_recording_context`
foreign import ccall "sk_get_recording_context" skGetRecordingContext :: (Ptr (SkCanvas)) -> IO (Ptr (GrRecordingContext))
-- | `sk_get_surface`
foreign import ccall "sk_get_surface" skGetSurface :: (Ptr (SkCanvas)) -> IO (Ptr (SkSurface))
-- | `sk_textblob_ref`
foreign import ccall "sk_textblob_ref" skTextBlobRef :: (Ptr (SkTextBlob)) -> IO (())
-- | `sk_textblob_unref`
foreign import ccall "sk_textblob_unref" skTextBlobUnRef :: (Ptr (SkTextBlob)) -> IO (())
-- | `sk_textblob_get_unique_id`
foreign import ccall "sk_textblob_get_unique_id" skTextBlobGetUniqueId :: (Ptr (SkTextBlob)) -> IO (Word32)
-- | `sk_textblob_get_bounds`
foreign import ccall "sk_textblob_get_bounds" skTextBlobGetBounds :: (Ptr (SkTextBlob)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_textblob_get_intercepts`
foreign import ccall "sk_textblob_get_intercepts" skTextBlobGetIntercepts :: (Ptr (SkTextBlob)) -> (Ptr (CFloat)) -> (Ptr (CFloat)) -> (Ptr (SkPaint)) -> IO (CInt)
-- | `sk_textblob_builder_new`
foreign import ccall "sk_textblob_builder_new" skTextBlobBuilderNew :: IO (Ptr (SkTextBlobBuilder))
-- | `sk_textblob_builder_delete`
foreign import ccall "sk_textblob_builder_delete" skTextBlobBuilderDelete :: (Ptr (SkTextBlobBuilder)) -> IO (())
-- | `sk_textblob_builder_make`
foreign import ccall "sk_textblob_builder_make" skTextBlobBuilderMake :: (Ptr (SkTextBlobBuilder)) -> IO (Ptr (SkTextBlob))
-- | `sk_textblob_builder_alloc_run`
foreign import ccall "sk_textblob_builder_alloc_run" skTextBlobBuilderAllocRun :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CFloat) -> (CFloat) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_pos_h`
foreign import ccall "sk_textblob_builder_alloc_run_pos_h" skTextBlobBuilderAllocRunPosH :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CFloat) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_pos`
foreign import ccall "sk_textblob_builder_alloc_run_pos" skTextBlobBuilderAllocRunPos :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_rsxform`
foreign import ccall "sk_textblob_builder_alloc_run_rsxform" skTextBlobBuilderAllocRunRsxForm :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text`
foreign import ccall "sk_textblob_builder_alloc_run_text" skTextBlobBuilderAllocRunText :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CFloat) -> (CFloat) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_pos_h`
foreign import ccall "sk_textblob_builder_alloc_run_text_pos_h" skTextBlobBuilderAllocRunTextPosH :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CFloat) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_pos`
foreign import ccall "sk_textblob_builder_alloc_run_text_pos" skTextBlobBuilderAllocRunTextPos :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_rsxform`
foreign import ccall "sk_textblob_builder_alloc_run_text_rsxform" skTextBlobBuilderAllocRunTextRsxForm :: (Ptr (SkTextBlobBuilder)) -> (Ptr (SkFont)) -> (CInt) -> (CInt) -> (Ptr (SkRect)) -> (Ptr (SkTextBlobBuilderRunBuffer)) -> IO (())
-- | `sk_maskfilter_ref`
foreign import ccall "sk_maskfilter_ref" skMaskFilterRef :: (Ptr (SkMaskFilter)) -> IO (())
-- | `sk_maskfilter_unref`
foreign import ccall "sk_maskfilter_unref" skMaskFilterUnRef :: (Ptr (SkMaskFilter)) -> IO (())
-- | `sk_maskfilter_new_blur`
foreign import ccall "sk_maskfilter_new_blur" skMaskFilterNewBlur :: (SkBlurStyle) -> (CFloat) -> IO (Ptr (SkMaskFilter))
-- | `sk_maskfilter_new_blur_with_flags`
foreign import ccall "sk_maskfilter_new_blur_with_flags" skMaskFilterNewBlurWithFlags :: (SkBlurStyle) -> (CFloat) -> (CBool) -> IO (Ptr (SkMaskFilter))
-- | `sk_maskfilter_new_table`
foreign import ccall "sk_maskfilter_new_table" skMaskFilterNewTable :: (Ptr (Word8)) -> IO (Ptr (SkMaskFilter))
-- | `sk_maskfilter_new_gamma`
foreign import ccall "sk_maskfilter_new_gamma" skMaskFilterNewGamma :: (CFloat) -> IO (Ptr (SkMaskFilter))
-- | `sk_maskfilter_new_clip`
foreign import ccall "sk_maskfilter_new_clip" skMaskFilterNewClip :: (Word8) -> (Word8) -> IO (Ptr (SkMaskFilter))
-- | `sk_maskfilter_new_shader`
foreign import ccall "sk_maskfilter_new_shader" skMaskFilterNewShader :: (Ptr (SkShader)) -> IO (Ptr (SkMaskFilter))
-- | `sk_colorspace_ref`
foreign import ccall "sk_colorspace_ref" skColorSpaceRef :: (Ptr (SkColorSpace)) -> IO (())
-- | `sk_colorspace_unref`
foreign import ccall "sk_colorspace_unref" skColorSpaceUnRef :: (Ptr (SkColorSpace)) -> IO (())
-- | `sk_colorspace_new_srgb`
foreign import ccall "sk_colorspace_new_srgb" skColorSpaceNewSrgb :: IO (Ptr (SkColorSpace))
-- | `sk_colorspace_new_srgb_linear`
foreign import ccall "sk_colorspace_new_srgb_linear" skColorSpaceNewSrgbLinear :: IO (Ptr (SkColorSpace))
-- | `sk_colorspace_new_rgb`
foreign import ccall "sk_colorspace_new_rgb" skColorSpaceNewRgb :: (Ptr (SkColorSpaceTransferFn)) -> (Ptr (SkColorSpaceXyz)) -> IO (Ptr (SkColorSpace))
-- | `sk_colorspace_new_icc`
foreign import ccall "sk_colorspace_new_icc" skColorSpaceNewIcc :: (Ptr (SkColorSpaceIccProfile)) -> IO (Ptr (SkColorSpace))
-- | `sk_colorspace_to_profile`
foreign import ccall "sk_colorspace_to_profile" skColorSpaceToProfile :: (Ptr (SkColorSpace)) -> (Ptr (SkColorSpaceIccProfile)) -> IO (())
-- | `sk_colorspace_gamma_close_to_srgb`
foreign import ccall "sk_colorspace_gamma_close_to_srgb" skColorSpaceGammaCloseToSrgb :: (Ptr (SkColorSpace)) -> IO (CBool)
-- | `sk_colorspace_gamma_is_linear`
foreign import ccall "sk_colorspace_gamma_is_linear" skColorSpaceGammaIsLinear :: (Ptr (SkColorSpace)) -> IO (CBool)
-- | `sk_colorspace_is_numerical_transfer_fn`
foreign import ccall "sk_colorspace_is_numerical_transfer_fn" skColorSpaceIsNumericalTransferFn :: (Ptr (SkColorSpace)) -> (Ptr (SkColorSpaceTransferFn)) -> IO (CBool)
-- | `sk_colorspace_to_xyzd50`
foreign import ccall "sk_colorspace_to_xyzd50" skColorSpaceToXyzD50 :: (Ptr (SkColorSpace)) -> (Ptr (SkColorSpaceXyz)) -> IO (CBool)
-- | `sk_colorspace_make_linear_gamma`
foreign import ccall "sk_colorspace_make_linear_gamma" skColorSpaceMakeLinearGamma :: (Ptr (SkColorSpace)) -> IO (Ptr (SkColorSpace))
-- | `sk_colorspace_make_srgb_gamma`
foreign import ccall "sk_colorspace_make_srgb_gamma" skColorSpaceMakeSrgbGamma :: (Ptr (SkColorSpace)) -> IO (Ptr (SkColorSpace))
-- | `sk_colorspace_is_srgb`
foreign import ccall "sk_colorspace_is_srgb" skColorSpaceIsSrgb :: (Ptr (SkColorSpace)) -> IO (CBool)
-- | `sk_colorspace_equals`
foreign import ccall "sk_colorspace_equals" skColorSpaceEquals :: (Ptr (SkColorSpace)) -> (Ptr (SkColorSpace)) -> IO (CBool)
-- | `sk_colorspace_transfer_fn_named_srgb`
foreign import ccall "sk_colorspace_transfer_fn_named_srgb" skColorSpaceTransferFnNamedSrgb :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_2dot2`
foreign import ccall "sk_colorspace_transfer_fn_named_2dot2" skColorSpaceTransferFnNamed2Dot2 :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_linear`
foreign import ccall "sk_colorspace_transfer_fn_named_linear" skColorSpaceTransferFnNamedLinear :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_rec2020`
foreign import ccall "sk_colorspace_transfer_fn_named_rec2020" skColorSpaceTransferFnNamedRec2020 :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_pq`
foreign import ccall "sk_colorspace_transfer_fn_named_pq" skColorSpaceTransferFnNamedPq :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_hlg`
foreign import ccall "sk_colorspace_transfer_fn_named_hlg" skColorSpaceTransferFnNamedHLg :: (Ptr (SkColorSpaceTransferFn)) -> IO (())
-- | `sk_colorspace_transfer_fn_eval`
foreign import ccall "sk_colorspace_transfer_fn_eval" skColorSpaceTransferFnEVal :: (Ptr (SkColorSpaceTransferFn)) -> (CFloat) -> IO (CFloat)
-- | `sk_colorspace_transfer_fn_invert`
foreign import ccall "sk_colorspace_transfer_fn_invert" skColorSpaceTransferFnInvert :: (Ptr (SkColorSpaceTransferFn)) -> (Ptr (SkColorSpaceTransferFn)) -> IO (CBool)
-- | `sk_colorspace_primaries_to_xyzd50`
foreign import ccall "sk_colorspace_primaries_to_xyzd50" skColorSpacePrimariesToXyzD50 :: (Ptr (SkColorSpacePrimaries)) -> (Ptr (SkColorSpaceXyz)) -> IO (CBool)
-- | `sk_colorspace_xyz_named_srgb`
foreign import ccall "sk_colorspace_xyz_named_srgb" skColorSpaceXyzNamedSrgb :: (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_xyz_named_adobe_rgb`
foreign import ccall "sk_colorspace_xyz_named_adobe_rgb" skColorSpaceXyzNamedAdobeRgb :: (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_xyz_named_display_p3`
foreign import ccall "sk_colorspace_xyz_named_display_p3" skColorSpaceXyzNamedDisplayP3 :: (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_xyz_named_rec2020`
foreign import ccall "sk_colorspace_xyz_named_rec2020" skColorSpaceXyzNamedRec2020 :: (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_xyz_named_xyz`
foreign import ccall "sk_colorspace_xyz_named_xyz" skColorSpaceXyzNamedXyz :: (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_xyz_invert`
foreign import ccall "sk_colorspace_xyz_invert" skColorSpaceXyzInvert :: (Ptr (SkColorSpaceXyz)) -> (Ptr (SkColorSpaceXyz)) -> IO (CBool)
-- | `sk_colorspace_xyz_concat`
foreign import ccall "sk_colorspace_xyz_concat" skColorSpaceXyzConCat :: (Ptr (SkColorSpaceXyz)) -> (Ptr (SkColorSpaceXyz)) -> (Ptr (SkColorSpaceXyz)) -> IO (())
-- | `sk_colorspace_icc_profile_delete`
foreign import ccall "sk_colorspace_icc_profile_delete" skColorSpaceIccProfileDelete :: (Ptr (SkColorSpaceIccProfile)) -> IO (())
-- | `sk_colorspace_icc_profile_new`
foreign import ccall "sk_colorspace_icc_profile_new" skColorSpaceIccProfileNew :: IO (Ptr (SkColorSpaceIccProfile))
-- | `sk_colorspace_icc_profile_parse`
foreign import ccall "sk_colorspace_icc_profile_parse" skColorSpaceIccProfileParse :: (Ptr (())) -> (CSize) -> (Ptr (SkColorSpaceIccProfile)) -> IO (CBool)
-- | `sk_colorspace_icc_profile_get_buffer`
foreign import ccall "sk_colorspace_icc_profile_get_buffer" skColorSpaceIccProfileGetBuffer :: (Ptr (SkColorSpaceIccProfile)) -> (Ptr (Word32)) -> IO (Ptr (Word8))
-- | `sk_colorspace_icc_profile_get_to_xyzd50`
foreign import ccall "sk_colorspace_icc_profile_get_to_xyzd50" skColorSpaceIccProfileGetToXyzD50 :: (Ptr (SkColorSpaceIccProfile)) -> (Ptr (SkColorSpaceXyz)) -> IO (CBool)
-- | `sk_color4f_to_color`
foreign import ccall "sk_color4f_to_color" skColor4FToColor :: (Ptr (SkColor4F)) -> IO (SkColor)
-- | `sk_color4f_from_color`
foreign import ccall "sk_color4f_from_color" skColor4FFromColor :: (SkColor) -> (Ptr (SkColor4F)) -> IO (())
-- | `sk_imagefilter_unref`
foreign import ccall "sk_imagefilter_unref" skImageFilterUnRef :: (Ptr (SkImageFilter)) -> IO (())
-- | `sk_imagefilter_new_arithmetic`
foreign import ccall "sk_imagefilter_new_arithmetic" skImageFilterNewArithmetic :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CBool) -> (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_blend`
foreign import ccall "sk_imagefilter_new_blend" skImageFilterNewBlend :: (SkBlendMode) -> (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_blender`
foreign import ccall "sk_imagefilter_new_blender" skImageFilterNewBlender :: (Ptr (SkBlender)) -> (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_blur`
foreign import ccall "sk_imagefilter_new_blur" skImageFilterNewBlur :: (CFloat) -> (CFloat) -> (SkShaderTileMode) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_color_filter`
foreign import ccall "sk_imagefilter_new_color_filter" skImageFilterNewColorFilter :: (Ptr (SkColorFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_compose`
foreign import ccall "sk_imagefilter_new_compose" skImageFilterNewCompose :: (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_displacement_map_effect`
foreign import ccall "sk_imagefilter_new_displacement_map_effect" skImageFilterNewDisplacementMapEffect :: (SkColorChannel) -> (SkColorChannel) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_drop_shadow`
foreign import ccall "sk_imagefilter_new_drop_shadow" skImageFilterNewDropShadow :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (SkColor) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_drop_shadow_only`
foreign import ccall "sk_imagefilter_new_drop_shadow_only" skImageFilterNewDropShadowOnly :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (SkColor) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_image`
foreign import ccall "sk_imagefilter_new_image" skImageFilterNewImage :: (Ptr (SkImage)) -> (Ptr (SkRect)) -> (Ptr (SkRect)) -> (Ptr (SkSamplingOptions)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_image_simple`
foreign import ccall "sk_imagefilter_new_image_simple" skImageFilterNewImageSimple :: (Ptr (SkImage)) -> (Ptr (SkSamplingOptions)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_magnifier`
foreign import ccall "sk_imagefilter_new_magnifier" skImageFilterNewMagnifier :: (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_matrix_convolution`
foreign import ccall "sk_imagefilter_new_matrix_convolution" skImageFilterNewMatrixConvolution :: (Ptr (SkISize)) -> (Ptr (CFloat)) -> (CFloat) -> (CFloat) -> (Ptr (SkIPoint)) -> (SkShaderTileMode) -> (CBool) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_matrix_transform`
foreign import ccall "sk_imagefilter_new_matrix_transform" skImageFilterNewMatrixTransform :: (Ptr (SkMatrix)) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkImageFilter)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_merge`
foreign import ccall "sk_imagefilter_new_merge" skImageFilterNewMerge :: (Ptr (Ptr (SkImageFilter))) -> (CInt) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_merge_simple`
foreign import ccall "sk_imagefilter_new_merge_simple" skImageFilterNewMergeSimple :: (Ptr (SkImageFilter)) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_offset`
foreign import ccall "sk_imagefilter_new_offset" skImageFilterNewOffset :: (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_picture`
foreign import ccall "sk_imagefilter_new_picture" skImageFilterNewPicture :: (Ptr (SkPicture)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_picture_with_rect`
foreign import ccall "sk_imagefilter_new_picture_with_rect" skImageFilterNewPictureWithRect :: (Ptr (SkPicture)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_shader`
foreign import ccall "sk_imagefilter_new_shader" skImageFilterNewShader :: (Ptr (SkShader)) -> (CBool) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_tile`
foreign import ccall "sk_imagefilter_new_tile" skImageFilterNewTile :: (Ptr (SkRect)) -> (Ptr (SkRect)) -> (Ptr (SkImageFilter)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_dilate`
foreign import ccall "sk_imagefilter_new_dilate" skImageFilterNewDilate :: (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_erode`
foreign import ccall "sk_imagefilter_new_erode" skImageFilterNewErode :: (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_distant_lit_diffuse`
foreign import ccall "sk_imagefilter_new_distant_lit_diffuse" skImageFilterNewDistantLitDiffuse :: (Ptr (SkPoint3)) -> (SkColor) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_point_lit_diffuse`
foreign import ccall "sk_imagefilter_new_point_lit_diffuse" skImageFilterNewPointLitDiffuse :: (Ptr (SkPoint3)) -> (SkColor) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_spot_lit_diffuse`
foreign import ccall "sk_imagefilter_new_spot_lit_diffuse" skImageFilterNewSpotLitDiffuse :: (Ptr (SkPoint3)) -> (Ptr (SkPoint3)) -> (CFloat) -> (CFloat) -> (SkColor) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_distant_lit_specular`
foreign import ccall "sk_imagefilter_new_distant_lit_specular" skImageFilterNewDistantLitSpecULar :: (Ptr (SkPoint3)) -> (SkColor) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_point_lit_specular`
foreign import ccall "sk_imagefilter_new_point_lit_specular" skImageFilterNewPointLitSpecULar :: (Ptr (SkPoint3)) -> (SkColor) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_imagefilter_new_spot_lit_specular`
foreign import ccall "sk_imagefilter_new_spot_lit_specular" skImageFilterNewSpotLitSpecULar :: (Ptr (SkPoint3)) -> (Ptr (SkPoint3)) -> (CFloat) -> (CFloat) -> (SkColor) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (SkImageFilter)) -> (Ptr (SkRect)) -> IO (Ptr (SkImageFilter))
-- | `sk_bitmap_destructor`
foreign import ccall "sk_bitmap_destructor" skBitmapDestructOr :: (Ptr (SkBitmap)) -> IO (())
-- | `sk_bitmap_new`
foreign import ccall "sk_bitmap_new" skBitmapNew :: IO (Ptr (SkBitmap))
-- | `sk_bitmap_get_info`
foreign import ccall "sk_bitmap_get_info" skBitmapGetInfo :: (Ptr (SkBitmap)) -> (Ptr (SkImageInfo)) -> IO (())
-- | `sk_bitmap_get_pixels`
foreign import ccall "sk_bitmap_get_pixels" skBitmapGetPixels :: (Ptr (SkBitmap)) -> (Ptr (CSize)) -> IO (Ptr (()))
-- | `sk_bitmap_get_row_bytes`
foreign import ccall "sk_bitmap_get_row_bytes" skBitmapGetRowBytes :: (Ptr (SkBitmap)) -> IO (CSize)
-- | `sk_bitmap_get_byte_count`
foreign import ccall "sk_bitmap_get_byte_count" skBitmapGetByteCount :: (Ptr (SkBitmap)) -> IO (CSize)
-- | `sk_bitmap_reset`
foreign import ccall "sk_bitmap_reset" skBitmapReset :: (Ptr (SkBitmap)) -> IO (())
-- | `sk_bitmap_is_null`
foreign import ccall "sk_bitmap_is_null" skBitmapIsNull :: (Ptr (SkBitmap)) -> IO (CBool)
-- | `sk_bitmap_is_immutable`
foreign import ccall "sk_bitmap_is_immutable" skBitmapIsImmutable :: (Ptr (SkBitmap)) -> IO (CBool)
-- | `sk_bitmap_set_immutable`
foreign import ccall "sk_bitmap_set_immutable" skBitmapSetImmutable :: (Ptr (SkBitmap)) -> IO (())
-- | `sk_bitmap_erase`
foreign import ccall "sk_bitmap_erase" skBitmapErase :: (Ptr (SkBitmap)) -> (SkColor) -> IO (())
-- | `sk_bitmap_erase_rect`
foreign import ccall "sk_bitmap_erase_rect" skBitmapEraseRect :: (Ptr (SkBitmap)) -> (SkColor) -> (Ptr (SkIRect)) -> IO (())
-- | `sk_bitmap_get_addr_8`
foreign import ccall "sk_bitmap_get_addr_8" skBitmapGetAddR8 :: (Ptr (SkBitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word8))
-- | `sk_bitmap_get_addr_16`
foreign import ccall "sk_bitmap_get_addr_16" skBitmapGetAddR16 :: (Ptr (SkBitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word16))
-- | `sk_bitmap_get_addr_32`
foreign import ccall "sk_bitmap_get_addr_32" skBitmapGetAddR32 :: (Ptr (SkBitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word32))
-- | `sk_bitmap_get_addr`
foreign import ccall "sk_bitmap_get_addr" skBitmapGetAddR :: (Ptr (SkBitmap)) -> (CInt) -> (CInt) -> IO (Ptr (()))
-- | `sk_bitmap_get_pixel_color`
foreign import ccall "sk_bitmap_get_pixel_color" skBitmapGetPixelColor :: (Ptr (SkBitmap)) -> (CInt) -> (CInt) -> IO (SkColor)
-- | `sk_bitmap_ready_to_draw`
foreign import ccall "sk_bitmap_ready_to_draw" skBitmapReadyToDraw :: (Ptr (SkBitmap)) -> IO (CBool)
-- | `sk_bitmap_get_pixel_colors`
foreign import ccall "sk_bitmap_get_pixel_colors" skBitmapGetPixelColors :: (Ptr (SkBitmap)) -> (Ptr (SkColor)) -> IO (())
-- | `sk_bitmap_install_pixels`
foreign import ccall "sk_bitmap_install_pixels" skBitmapInstallPixels :: (Ptr (SkBitmap)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (FunPtr (SkBitmapReleaseProc)) -> (Ptr (())) -> IO (CBool)
-- | `sk_bitmap_install_pixels_with_pixmap`
foreign import ccall "sk_bitmap_install_pixels_with_pixmap" skBitmapInstallPixelsWithPixmap :: (Ptr (SkBitmap)) -> (Ptr (SkPixmap)) -> IO (CBool)
-- | `sk_bitmap_try_alloc_pixels`
foreign import ccall "sk_bitmap_try_alloc_pixels" skBitmapTryAllocPixels :: (Ptr (SkBitmap)) -> (Ptr (SkImageInfo)) -> (CSize) -> IO (CBool)
-- | `sk_bitmap_try_alloc_pixels_with_flags`
foreign import ccall "sk_bitmap_try_alloc_pixels_with_flags" skBitmapTryAllocPixelsWithFlags :: (Ptr (SkBitmap)) -> (Ptr (SkImageInfo)) -> (Word32) -> IO (CBool)
-- | `sk_bitmap_set_pixels`
foreign import ccall "sk_bitmap_set_pixels" skBitmapSetPixels :: (Ptr (SkBitmap)) -> (Ptr (())) -> IO (())
-- | `sk_bitmap_peek_pixels`
foreign import ccall "sk_bitmap_peek_pixels" skBitmapPeekPixels :: (Ptr (SkBitmap)) -> (Ptr (SkPixmap)) -> IO (CBool)
-- | `sk_bitmap_extract_subset`
foreign import ccall "sk_bitmap_extract_subset" skBitmapExtractSubset :: (Ptr (SkBitmap)) -> (Ptr (SkBitmap)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_bitmap_extract_alpha`
foreign import ccall "sk_bitmap_extract_alpha" skBitmapExtractAlpha :: (Ptr (SkBitmap)) -> (Ptr (SkBitmap)) -> (Ptr (SkPaint)) -> (Ptr (SkIPoint)) -> IO (CBool)
-- | `sk_bitmap_notify_pixels_changed`
foreign import ccall "sk_bitmap_notify_pixels_changed" skBitmapNotifyPixelsChanged :: (Ptr (SkBitmap)) -> IO (())
-- | `sk_bitmap_swap`
foreign import ccall "sk_bitmap_swap" skBitmapSwap :: (Ptr (SkBitmap)) -> (Ptr (SkBitmap)) -> IO (())
-- | `sk_bitmap_make_shader`
foreign import ccall "sk_bitmap_make_shader" skBitmapMakeShader :: (Ptr (SkBitmap)) -> (SkShaderTileMode) -> (SkShaderTileMode) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sksg_invalidation_controller_new`
foreign import ccall "sksg_invalidation_controller_new" sksgInvalidationControllerNew :: IO (Ptr (SksgInvalidationController))
-- | `sksg_invalidation_controller_delete`
foreign import ccall "sksg_invalidation_controller_delete" sksgInvalidationControllerDelete :: (Ptr (SksgInvalidationController)) -> IO (())
-- | `sksg_invalidation_controller_inval`
foreign import ccall "sksg_invalidation_controller_inval" sksgInvalidationControllerInVal :: (Ptr (SksgInvalidationController)) -> (Ptr (SkRect)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sksg_invalidation_controller_get_bounds`
foreign import ccall "sksg_invalidation_controller_get_bounds" sksgInvalidationControllerGetBounds :: (Ptr (SksgInvalidationController)) -> (Ptr (SkRect)) -> IO (())
-- | `sksg_invalidation_controller_begin`
foreign import ccall "sksg_invalidation_controller_begin" sksgInvalidationControllerBegin :: (Ptr (SksgInvalidationController)) -> IO (())
-- | `sksg_invalidation_controller_end`
foreign import ccall "sksg_invalidation_controller_end" sksgInvalidationControllerEnd :: (Ptr (SksgInvalidationController)) -> IO (())
-- | `sksg_invalidation_controller_reset`
foreign import ccall "sksg_invalidation_controller_reset" sksgInvalidationControllerReset :: (Ptr (SksgInvalidationController)) -> IO (())
-- | `sk_path_new`
foreign import ccall "sk_path_new" skPathNew :: IO (Ptr (SkPath))
-- | `sk_path_delete`
foreign import ccall "sk_path_delete" skPathDelete :: (Ptr (SkPath)) -> IO (())
-- | `sk_path_move_to`
foreign import ccall "sk_path_move_to" skPathMoveTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_line_to`
foreign import ccall "sk_path_line_to" skPathLineTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_quad_to`
foreign import ccall "sk_path_quad_to" skPathQuadTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_conic_to`
foreign import ccall "sk_path_conic_to" skPathConicTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_cubic_to`
foreign import ccall "sk_path_cubic_to" skPathCubicTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_arc_to`
foreign import ccall "sk_path_arc_to" skPathArcTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (SkPathArcSize) -> (SkPathDirection) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rarc_to`
foreign import ccall "sk_path_rarc_to" skPathRArcTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (SkPathArcSize) -> (SkPathDirection) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_arc_to_with_oval`
foreign import ccall "sk_path_arc_to_with_oval" skPathArcToWithOval :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (CBool) -> IO (())
-- | `sk_path_arc_to_with_points`
foreign import ccall "sk_path_arc_to_with_points" skPathArcToWithPoints :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_close`
foreign import ccall "sk_path_close" skPathClose :: (Ptr (SkPath)) -> IO (())
-- | `sk_path_add_rect`
foreign import ccall "sk_path_add_rect" skPathAddRect :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (SkPathDirection) -> IO (())
-- | `sk_path_add_rrect`
foreign import ccall "sk_path_add_rrect" skPathAddRRect :: (Ptr (SkPath)) -> (Ptr (SkRRect)) -> (SkPathDirection) -> IO (())
-- | `sk_path_add_rrect_start`
foreign import ccall "sk_path_add_rrect_start" skPathAddRRectStart :: (Ptr (SkPath)) -> (Ptr (SkRRect)) -> (SkPathDirection) -> (Word32) -> IO (())
-- | `sk_path_add_rounded_rect`
foreign import ccall "sk_path_add_rounded_rect" skPathAddRoundedRect :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (SkPathDirection) -> IO (())
-- | `sk_path_add_oval`
foreign import ccall "sk_path_add_oval" skPathAddOval :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (SkPathDirection) -> IO (())
-- | `sk_path_add_circle`
foreign import ccall "sk_path_add_circle" skPathAddCircle :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (SkPathDirection) -> IO (())
-- | `sk_path_get_bounds`
foreign import ccall "sk_path_get_bounds" skPathGetBounds :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_path_compute_tight_bounds`
foreign import ccall "sk_path_compute_tight_bounds" skPathComputeTightBounds :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_path_rmove_to`
foreign import ccall "sk_path_rmove_to" skPathRMoveTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rline_to`
foreign import ccall "sk_path_rline_to" skPathRLineTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rquad_to`
foreign import ccall "sk_path_rquad_to" skPathRQuadTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rconic_to`
foreign import ccall "sk_path_rconic_to" skPathRConicTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rcubic_to`
foreign import ccall "sk_path_rcubic_to" skPathRCubicTo :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_add_rect_start`
foreign import ccall "sk_path_add_rect_start" skPathAddRectStart :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (SkPathDirection) -> (Word32) -> IO (())
-- | `sk_path_add_arc`
foreign import ccall "sk_path_add_arc" skPathAddArc :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_get_filltype`
foreign import ccall "sk_path_get_filltype" skPathGetFillType :: (Ptr (SkPath)) -> IO (SkPathFillType)
-- | `sk_path_set_filltype`
foreign import ccall "sk_path_set_filltype" skPathSetFillType :: (Ptr (SkPath)) -> (SkPathFillType) -> IO (())
-- | `sk_path_transform`
foreign import ccall "sk_path_transform" skPathTransform :: (Ptr (SkPath)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_path_transform_to_dest`
foreign import ccall "sk_path_transform_to_dest" skPathTransformToDeSt :: (Ptr (SkPath)) -> (Ptr (SkMatrix)) -> (Ptr (SkPath)) -> IO (())
-- | `sk_path_clone`
foreign import ccall "sk_path_clone" skPathClone :: (Ptr (SkPath)) -> IO (Ptr (SkPath))
-- | `sk_path_add_path_offset`
foreign import ccall "sk_path_add_path_offset" skPathAddPathOffset :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (SkPathAddMode) -> IO (())
-- | `sk_path_add_path_matrix`
foreign import ccall "sk_path_add_path_matrix" skPathAddPathMatrix :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> (Ptr (SkMatrix)) -> (SkPathAddMode) -> IO (())
-- | `sk_path_add_path`
foreign import ccall "sk_path_add_path" skPathAddPath :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> (SkPathAddMode) -> IO (())
-- | `sk_path_add_path_reverse`
foreign import ccall "sk_path_add_path_reverse" skPathAddPathReverse :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> IO (())
-- | `sk_path_reset`
foreign import ccall "sk_path_reset" skPathReset :: (Ptr (SkPath)) -> IO (())
-- | `sk_path_rewind`
foreign import ccall "sk_path_rewind" skPathRewind :: (Ptr (SkPath)) -> IO (())
-- | `sk_path_count_points`
foreign import ccall "sk_path_count_points" skPathCountPoints :: (Ptr (SkPath)) -> IO (CInt)
-- | `sk_path_count_verbs`
foreign import ccall "sk_path_count_verbs" skPathCountVerbs :: (Ptr (SkPath)) -> IO (CInt)
-- | `sk_path_get_point`
foreign import ccall "sk_path_get_point" skPathGetPoint :: (Ptr (SkPath)) -> (CInt) -> (Ptr (SkPoint)) -> IO (())
-- | `sk_path_get_points`
foreign import ccall "sk_path_get_points" skPathGetPoints :: (Ptr (SkPath)) -> (Ptr (SkPoint)) -> (CInt) -> IO (CInt)
-- | `sk_path_contains`
foreign import ccall "sk_path_contains" skPathContains :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> IO (CBool)
-- | `sk_path_parse_svg_string`
foreign import ccall "sk_path_parse_svg_string" skPathParseSvgString :: (Ptr (SkPath)) -> (Ptr (CChar)) -> IO (CBool)
-- | `sk_path_to_svg_string`
foreign import ccall "sk_path_to_svg_string" skPathToSvgString :: (Ptr (SkPath)) -> (Ptr (SkString)) -> IO (())
-- | `sk_path_get_last_point`
foreign import ccall "sk_path_get_last_point" skPathGetLastPoint :: (Ptr (SkPath)) -> (Ptr (SkPoint)) -> IO (CBool)
-- | `sk_path_convert_conic_to_quads`
foreign import ccall "sk_path_convert_conic_to_quads" skPathConvertConicToQuads :: (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkPoint)) -> (CInt) -> IO (CInt)
-- | `sk_path_add_poly`
foreign import ccall "sk_path_add_poly" skPathAddPoly :: (Ptr (SkPath)) -> (Ptr (SkPoint)) -> (CInt) -> (CBool) -> IO (())
-- | `sk_path_get_segment_masks`
foreign import ccall "sk_path_get_segment_masks" skPathGetSegmentMasks :: (Ptr (SkPath)) -> IO (Word32)
-- | `sk_path_is_oval`
foreign import ccall "sk_path_is_oval" skPathIsOval :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> IO (CBool)
-- | `sk_path_is_rrect`
foreign import ccall "sk_path_is_rrect" skPathIsRRect :: (Ptr (SkPath)) -> (Ptr (SkRRect)) -> IO (CBool)
-- | `sk_path_is_line`
foreign import ccall "sk_path_is_line" skPathIsLine :: (Ptr (SkPath)) -> (Ptr (SkPoint)) -> IO (CBool)
-- | `sk_path_is_rect`
foreign import ccall "sk_path_is_rect" skPathIsRect :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> (Ptr (CBool)) -> (Ptr (SkPathDirection)) -> IO (CBool)
-- | `sk_path_is_convex`
foreign import ccall "sk_path_is_convex" skPathIsConvex :: (Ptr (SkPath)) -> IO (CBool)
-- | `sk_path_create_iter`
foreign import ccall "sk_path_create_iter" skPathCreateItEr :: (Ptr (SkPath)) -> (CInt) -> IO (Ptr (SkPathIterator))
-- | `sk_path_iter_next`
foreign import ccall "sk_path_iter_next" skPathItErNext :: (Ptr (SkPathIterator)) -> (Ptr (SkPoint)) -> IO (SkPathVerb)
-- | `sk_path_iter_conic_weight`
foreign import ccall "sk_path_iter_conic_weight" skPathItErConicWeight :: (Ptr (SkPathIterator)) -> IO (CFloat)
-- | `sk_path_iter_is_close_line`
foreign import ccall "sk_path_iter_is_close_line" skPathItErIsCloseLine :: (Ptr (SkPathIterator)) -> IO (CInt)
-- | `sk_path_iter_is_closed_contour`
foreign import ccall "sk_path_iter_is_closed_contour" skPathItErIsClosedContour :: (Ptr (SkPathIterator)) -> IO (CInt)
-- | `sk_path_iter_destroy`
foreign import ccall "sk_path_iter_destroy" skPathItErDestroy :: (Ptr (SkPathIterator)) -> IO (())
-- | `sk_path_create_rawiter`
foreign import ccall "sk_path_create_rawiter" skPathCreateRawItEr :: (Ptr (SkPath)) -> IO (Ptr (SkPathRawIterator))
-- | `sk_path_rawiter_peek`
foreign import ccall "sk_path_rawiter_peek" skPathRawItErPeek :: (Ptr (SkPathRawIterator)) -> IO (SkPathVerb)
-- | `sk_path_rawiter_next`
foreign import ccall "sk_path_rawiter_next" skPathRawItErNext :: (Ptr (SkPathRawIterator)) -> (Ptr (SkPoint)) -> IO (SkPathVerb)
-- | `sk_path_rawiter_conic_weight`
foreign import ccall "sk_path_rawiter_conic_weight" skPathRawItErConicWeight :: (Ptr (SkPathRawIterator)) -> IO (CFloat)
-- | `sk_path_rawiter_destroy`
foreign import ccall "sk_path_rawiter_destroy" skPathRawItErDestroy :: (Ptr (SkPathRawIterator)) -> IO (())
-- | `sk_pathop_op`
foreign import ccall "sk_pathop_op" skPathOpOp :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> (SkPathOp) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_pathop_simplify`
foreign import ccall "sk_pathop_simplify" skPathOpSimplify :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_pathop_tight_bounds`
foreign import ccall "sk_pathop_tight_bounds" skPathOpTightBounds :: (Ptr (SkPath)) -> (Ptr (SkRect)) -> IO (CBool)
-- | `sk_pathop_as_winding`
foreign import ccall "sk_pathop_as_winding" skPathOpAsWinding :: (Ptr (SkPath)) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_opbuilder_new`
foreign import ccall "sk_opbuilder_new" skOpBuilderNew :: IO (Ptr (SkOpBuilder))
-- | `sk_opbuilder_destroy`
foreign import ccall "sk_opbuilder_destroy" skOpBuilderDestroy :: (Ptr (SkOpBuilder)) -> IO (())
-- | `sk_opbuilder_add`
foreign import ccall "sk_opbuilder_add" skOpBuilderAdd :: (Ptr (SkOpBuilder)) -> (Ptr (SkPath)) -> (SkPathOp) -> IO (())
-- | `sk_opbuilder_resolve`
foreign import ccall "sk_opbuilder_resolve" skOpBuilderResolve :: (Ptr (SkOpBuilder)) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_pathmeasure_new`
foreign import ccall "sk_pathmeasure_new" skPathMeasureNew :: IO (Ptr (SkPathMeasure))
-- | `sk_pathmeasure_new_with_path`
foreign import ccall "sk_pathmeasure_new_with_path" skPathMeasureNewWithPath :: (Ptr (SkPath)) -> (CBool) -> (CFloat) -> IO (Ptr (SkPathMeasure))
-- | `sk_pathmeasure_destroy`
foreign import ccall "sk_pathmeasure_destroy" skPathMeasureDestroy :: (Ptr (SkPathMeasure)) -> IO (())
-- | `sk_pathmeasure_set_path`
foreign import ccall "sk_pathmeasure_set_path" skPathMeasureSetPath :: (Ptr (SkPathMeasure)) -> (Ptr (SkPath)) -> (CBool) -> IO (())
-- | `sk_pathmeasure_get_length`
foreign import ccall "sk_pathmeasure_get_length" skPathMeasureGetLength :: (Ptr (SkPathMeasure)) -> IO (CFloat)
-- | `sk_pathmeasure_get_pos_tan`
foreign import ccall "sk_pathmeasure_get_pos_tan" skPathMeasureGetPosTan :: (Ptr (SkPathMeasure)) -> (CFloat) -> (Ptr (SkPoint)) -> (Ptr (SkVector)) -> IO (CBool)
-- | `sk_pathmeasure_get_matrix`
foreign import ccall "sk_pathmeasure_get_matrix" skPathMeasureGetMatrix :: (Ptr (SkPathMeasure)) -> (CFloat) -> (Ptr (SkMatrix)) -> (SkPathMeasureMatrixFlags) -> IO (CBool)
-- | `sk_pathmeasure_get_segment`
foreign import ccall "sk_pathmeasure_get_segment" skPathMeasureGetSegment :: (Ptr (SkPathMeasure)) -> (CFloat) -> (CFloat) -> (Ptr (SkPath)) -> (CBool) -> IO (CBool)
-- | `sk_pathmeasure_is_closed`
foreign import ccall "sk_pathmeasure_is_closed" skPathMeasureIsClosed :: (Ptr (SkPathMeasure)) -> IO (CBool)
-- | `sk_pathmeasure_next_contour`
foreign import ccall "sk_pathmeasure_next_contour" skPathMeasureNextContour :: (Ptr (SkPathMeasure)) -> IO (CBool)
-- | `sk_runtimeeffect_make_for_color_filter`
foreign import ccall "sk_runtimeeffect_make_for_color_filter" skRuntimeEffectMakeForColorFilter :: (Ptr (SkString)) -> (Ptr (SkString)) -> IO (Ptr (SkRuntimeEffect))
-- | `sk_runtimeeffect_make_for_shader`
foreign import ccall "sk_runtimeeffect_make_for_shader" skRuntimeEffectMakeForShader :: (Ptr (SkString)) -> (Ptr (SkString)) -> IO (Ptr (SkRuntimeEffect))
-- | `sk_runtimeeffect_make_for_blender`
foreign import ccall "sk_runtimeeffect_make_for_blender" skRuntimeEffectMakeForBlender :: (Ptr (SkString)) -> (Ptr (SkString)) -> IO (Ptr (SkRuntimeEffect))
-- | `sk_runtimeeffect_unref`
foreign import ccall "sk_runtimeeffect_unref" skRuntimeEffectUnRef :: (Ptr (SkRuntimeEffect)) -> IO (())
-- | `sk_runtimeeffect_make_shader`
foreign import ccall "sk_runtimeeffect_make_shader" skRuntimeEffectMakeShader :: (Ptr (SkRuntimeEffect)) -> (Ptr (SkData)) -> (Ptr (Ptr (SkFlattenAble))) -> (CSize) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_runtimeeffect_make_color_filter`
foreign import ccall "sk_runtimeeffect_make_color_filter" skRuntimeEffectMakeColorFilter :: (Ptr (SkRuntimeEffect)) -> (Ptr (SkData)) -> (Ptr (Ptr (SkFlattenAble))) -> (CSize) -> IO (Ptr (SkColorFilter))
-- | `sk_runtimeeffect_make_blender`
foreign import ccall "sk_runtimeeffect_make_blender" skRuntimeEffectMakeBlender :: (Ptr (SkRuntimeEffect)) -> (Ptr (SkData)) -> (Ptr (Ptr (SkFlattenAble))) -> (CSize) -> IO (Ptr (SkBlender))
-- | `sk_runtimeeffect_get_uniform_byte_size`
foreign import ccall "sk_runtimeeffect_get_uniform_byte_size" skRuntimeEffectGetUniformByteSize :: (Ptr (SkRuntimeEffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_uniforms_size`
foreign import ccall "sk_runtimeeffect_get_uniforms_size" skRuntimeEffectGetUniformsSize :: (Ptr (SkRuntimeEffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_uniform_name`
foreign import ccall "sk_runtimeeffect_get_uniform_name" skRuntimeEffectGetUniformName :: (Ptr (SkRuntimeEffect)) -> (CInt) -> (Ptr (SkString)) -> IO (())
-- | `sk_runtimeeffect_get_uniform_from_index`
foreign import ccall "sk_runtimeeffect_get_uniform_from_index" skRuntimeEffectGetUniformFromIndex :: (Ptr (SkRuntimeEffect)) -> (CInt) -> (Ptr (SkRuntimeEffectUniform)) -> IO (())
-- | `sk_runtimeeffect_get_uniform_from_name`
foreign import ccall "sk_runtimeeffect_get_uniform_from_name" skRuntimeEffectGetUniformFromName :: (Ptr (SkRuntimeEffect)) -> (Ptr (CChar)) -> (CSize) -> (Ptr (SkRuntimeEffectUniform)) -> IO (())
-- | `sk_runtimeeffect_get_children_size`
foreign import ccall "sk_runtimeeffect_get_children_size" skRuntimeEffectGetChildrenSize :: (Ptr (SkRuntimeEffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_child_name`
foreign import ccall "sk_runtimeeffect_get_child_name" skRuntimeEffectGetChildName :: (Ptr (SkRuntimeEffect)) -> (CInt) -> (Ptr (SkString)) -> IO (())
-- | `sk_runtimeeffect_get_child_from_index`
foreign import ccall "sk_runtimeeffect_get_child_from_index" skRuntimeEffectGetChildFromIndex :: (Ptr (SkRuntimeEffect)) -> (CInt) -> (Ptr (SkRuntimeEffectChild)) -> IO (())
-- | `sk_runtimeeffect_get_child_from_name`
foreign import ccall "sk_runtimeeffect_get_child_from_name" skRuntimeEffectGetChildFromName :: (Ptr (SkRuntimeEffect)) -> (Ptr (CChar)) -> (CSize) -> (Ptr (SkRuntimeEffectChild)) -> IO (())
-- | `sk_refcnt_unique`
foreign import ccall "sk_refcnt_unique" skRefCntUnique :: (Ptr (SkRefCnt)) -> IO (CBool)
-- | `sk_refcnt_get_ref_count`
foreign import ccall "sk_refcnt_get_ref_count" skRefCntGetRefCount :: (Ptr (SkRefCnt)) -> IO (CInt)
-- | `sk_refcnt_safe_ref`
foreign import ccall "sk_refcnt_safe_ref" skRefCntSafeRef :: (Ptr (SkRefCnt)) -> IO (())
-- | `sk_refcnt_safe_unref`
foreign import ccall "sk_refcnt_safe_unref" skRefCntSafeUnRef :: (Ptr (SkRefCnt)) -> IO (())
-- | `sk_nvrefcnt_unique`
foreign import ccall "sk_nvrefcnt_unique" skNvRefCntUnique :: (Ptr (SkNvRefCnt)) -> IO (CBool)
-- | `sk_nvrefcnt_get_ref_count`
foreign import ccall "sk_nvrefcnt_get_ref_count" skNvRefCntGetRefCount :: (Ptr (SkNvRefCnt)) -> IO (CInt)
-- | `sk_nvrefcnt_safe_ref`
foreign import ccall "sk_nvrefcnt_safe_ref" skNvRefCntSafeRef :: (Ptr (SkNvRefCnt)) -> IO (())
-- | `sk_nvrefcnt_safe_unref`
foreign import ccall "sk_nvrefcnt_safe_unref" skNvRefCntSafeUnRef :: (Ptr (SkNvRefCnt)) -> IO (())
-- | `sk_colortype_get_default_8888`
foreign import ccall "sk_colortype_get_default_8888" skColorTypeGetDefault8888 :: IO (SkColorType)
-- | `sk_version_get_milestone`
foreign import ccall "sk_version_get_milestone" skVersionGetMilestone :: IO (CInt)
-- | `sk_version_get_increment`
foreign import ccall "sk_version_get_increment" skVersionGetIncrement :: IO (CInt)
-- | `sk_version_get_string`
foreign import ccall "sk_version_get_string" skVersionGetString :: IO (Ptr (CChar))
-- | `sk_document_unref`
foreign import ccall "sk_document_unref" skDocumentUnRef :: (Ptr (SkDocument)) -> IO (())
-- | `sk_document_create_pdf_from_stream`
foreign import ccall "sk_document_create_pdf_from_stream" skDocumentCreatePdfFromStream :: (Ptr (SkWStream)) -> IO (Ptr (SkDocument))
-- | `sk_document_create_pdf_from_stream_with_metadata`
foreign import ccall "sk_document_create_pdf_from_stream_with_metadata" skDocumentCreatePdfFromStreamWithMetadata :: (Ptr (SkWStream)) -> (Ptr (SkDocumentPdfMetadata)) -> IO (Ptr (SkDocument))
-- | `sk_document_create_xps_from_stream`
foreign import ccall "sk_document_create_xps_from_stream" skDocumentCreateXpsFromStream :: (Ptr (SkWStream)) -> (CFloat) -> IO (Ptr (SkDocument))
-- | `sk_document_begin_page`
foreign import ccall "sk_document_begin_page" skDocumentBeginPage :: (Ptr (SkDocument)) -> (CFloat) -> (CFloat) -> (Ptr (SkRect)) -> IO (Ptr (SkCanvas))
-- | `sk_document_end_page`
foreign import ccall "sk_document_end_page" skDocumentEndPage :: (Ptr (SkDocument)) -> IO (())
-- | `sk_document_close`
foreign import ccall "sk_document_close" skDocumentClose :: (Ptr (SkDocument)) -> IO (())
-- | `sk_document_abort`
foreign import ccall "sk_document_abort" skDocumentAbort :: (Ptr (SkDocument)) -> IO (())
-- | `sk_image_ref`
foreign import ccall "sk_image_ref" skImageRef :: (Ptr (SkImage)) -> IO (())
-- | `sk_image_unref`
foreign import ccall "sk_image_unref" skImageUnRef :: (Ptr (SkImage)) -> IO (())
-- | `sk_image_new_raster_copy`
foreign import ccall "sk_image_new_raster_copy" skImageNewRasterCopy :: (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> IO (Ptr (SkImage))
-- | `sk_image_new_raster_copy_with_pixmap`
foreign import ccall "sk_image_new_raster_copy_with_pixmap" skImageNewRasterCopyWithPixmap :: (Ptr (SkPixmap)) -> IO (Ptr (SkImage))
-- | `sk_image_new_raster_data`
foreign import ccall "sk_image_new_raster_data" skImageNewRasterData :: (Ptr (SkImageInfo)) -> (Ptr (SkData)) -> (CSize) -> IO (Ptr (SkImage))
-- | `sk_image_new_raster`
foreign import ccall "sk_image_new_raster" skImageNewRaster :: (Ptr (SkPixmap)) -> (FunPtr (SkImageRasterReleaseProc)) -> (Ptr (())) -> IO (Ptr (SkImage))
-- | `sk_image_new_from_bitmap`
foreign import ccall "sk_image_new_from_bitmap" skImageNewFromBitmap :: (Ptr (SkBitmap)) -> IO (Ptr (SkImage))
-- | `sk_image_new_from_encoded`
foreign import ccall "sk_image_new_from_encoded" skImageNewFromEncoded :: (Ptr (SkData)) -> IO (Ptr (SkImage))
-- | `sk_image_new_from_texture`
foreign import ccall "sk_image_new_from_texture" skImageNewFromTexture :: (Ptr (GrRecordingContext)) -> (Ptr (GrBackendTexture)) -> (GrSurfaceOrigin) -> (SkColorType) -> (SkAlphaType) -> (Ptr (SkColorSpace)) -> (FunPtr (SkImageTextureReleaseProc)) -> (Ptr (())) -> IO (Ptr (SkImage))
-- | `sk_image_new_from_adopted_texture`
foreign import ccall "sk_image_new_from_adopted_texture" skImageNewFromAdoptedTexture :: (Ptr (GrRecordingContext)) -> (Ptr (GrBackendTexture)) -> (GrSurfaceOrigin) -> (SkColorType) -> (SkAlphaType) -> (Ptr (SkColorSpace)) -> IO (Ptr (SkImage))
-- | `sk_image_new_from_picture`
foreign import ccall "sk_image_new_from_picture" skImageNewFromPicture :: (Ptr (SkPicture)) -> (Ptr (SkISize)) -> (Ptr (SkMatrix)) -> (Ptr (SkPaint)) -> (CBool) -> (Ptr (SkColorSpace)) -> (Ptr (SkSurfaceProps)) -> IO (Ptr (SkImage))
-- | `sk_image_get_width`
foreign import ccall "sk_image_get_width" skImageGetWidth :: (Ptr (SkImage)) -> IO (CInt)
-- | `sk_image_get_height`
foreign import ccall "sk_image_get_height" skImageGetHeight :: (Ptr (SkImage)) -> IO (CInt)
-- | `sk_image_get_unique_id`
foreign import ccall "sk_image_get_unique_id" skImageGetUniqueId :: (Ptr (SkImage)) -> IO (Word32)
-- | `sk_image_get_alpha_type`
foreign import ccall "sk_image_get_alpha_type" skImageGetAlphaType :: (Ptr (SkImage)) -> IO (SkAlphaType)
-- | `sk_image_get_color_type`
foreign import ccall "sk_image_get_color_type" skImageGetColorType :: (Ptr (SkImage)) -> IO (SkColorType)
-- | `sk_image_get_colorspace`
foreign import ccall "sk_image_get_colorspace" skImageGetColorSpace :: (Ptr (SkImage)) -> IO (Ptr (SkColorSpace))
-- | `sk_image_is_alpha_only`
foreign import ccall "sk_image_is_alpha_only" skImageIsAlphaOnly :: (Ptr (SkImage)) -> IO (CBool)
-- | `sk_image_make_shader`
foreign import ccall "sk_image_make_shader" skImageMakeShader :: (Ptr (SkImage)) -> (SkShaderTileMode) -> (SkShaderTileMode) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_image_make_raw_shader`
foreign import ccall "sk_image_make_raw_shader" skImageMakeRawShader :: (Ptr (SkImage)) -> (SkShaderTileMode) -> (SkShaderTileMode) -> (Ptr (SkSamplingOptions)) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_image_peek_pixels`
foreign import ccall "sk_image_peek_pixels" skImagePeekPixels :: (Ptr (SkImage)) -> (Ptr (SkPixmap)) -> IO (CBool)
-- | `sk_image_is_texture_backed`
foreign import ccall "sk_image_is_texture_backed" skImageIsTextureBacked :: (Ptr (SkImage)) -> IO (CBool)
-- | `sk_image_is_lazy_generated`
foreign import ccall "sk_image_is_lazy_generated" skImageIsLazyGenerated :: (Ptr (SkImage)) -> IO (CBool)
-- | `sk_image_is_valid`
foreign import ccall "sk_image_is_valid" skImageIsValid :: (Ptr (SkImage)) -> (Ptr (GrRecordingContext)) -> IO (CBool)
-- | `sk_image_read_pixels`
foreign import ccall "sk_image_read_pixels" skImageReadPixels :: (Ptr (SkImage)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> (SkImageCachingHint) -> IO (CBool)
-- | `sk_image_read_pixels_into_pixmap`
foreign import ccall "sk_image_read_pixels_into_pixmap" skImageReadPixelsIntoPixmap :: (Ptr (SkImage)) -> (Ptr (SkPixmap)) -> (CInt) -> (CInt) -> (SkImageCachingHint) -> IO (CBool)
-- | `sk_image_scale_pixels`
foreign import ccall "sk_image_scale_pixels" skImageScalePixels :: (Ptr (SkImage)) -> (Ptr (SkPixmap)) -> (Ptr (SkSamplingOptions)) -> (SkImageCachingHint) -> IO (CBool)
-- | `sk_image_ref_encoded`
foreign import ccall "sk_image_ref_encoded" skImageRefEncoded :: (Ptr (SkImage)) -> IO (Ptr (SkData))
-- | `sk_image_make_subset_raster`
foreign import ccall "sk_image_make_subset_raster" skImageMakeSubsetRaster :: (Ptr (SkImage)) -> (Ptr (SkIRect)) -> IO (Ptr (SkImage))
-- | `sk_image_make_subset`
foreign import ccall "sk_image_make_subset" skImageMakeSubset :: (Ptr (SkImage)) -> (Ptr (GrDirectContext)) -> (Ptr (SkIRect)) -> IO (Ptr (SkImage))
-- | `sk_image_make_texture_image`
foreign import ccall "sk_image_make_texture_image" skImageMakeTextureImage :: (Ptr (SkImage)) -> (Ptr (GrDirectContext)) -> (CBool) -> (CBool) -> IO (Ptr (SkImage))
-- | `sk_image_make_non_texture_image`
foreign import ccall "sk_image_make_non_texture_image" skImageMakeNonTextureImage :: (Ptr (SkImage)) -> IO (Ptr (SkImage))
-- | `sk_image_make_raster_image`
foreign import ccall "sk_image_make_raster_image" skImageMakeRasterImage :: (Ptr (SkImage)) -> IO (Ptr (SkImage))
-- | `sk_image_make_with_filter_raster`
foreign import ccall "sk_image_make_with_filter_raster" skImageMakeWithFilterRaster :: (Ptr (SkImage)) -> (Ptr (SkImageFilter)) -> (Ptr (SkIRect)) -> (Ptr (SkIRect)) -> (Ptr (SkIRect)) -> (Ptr (SkIPoint)) -> IO (Ptr (SkImage))
-- | `sk_image_make_with_filter`
foreign import ccall "sk_image_make_with_filter" skImageMakeWithFilter :: (Ptr (SkImage)) -> (Ptr (GrRecordingContext)) -> (Ptr (SkImageFilter)) -> (Ptr (SkIRect)) -> (Ptr (SkIRect)) -> (Ptr (SkIRect)) -> (Ptr (SkIPoint)) -> IO (Ptr (SkImage))
-- | `sk_codec_min_buffered_bytes_needed`
foreign import ccall "sk_codec_min_buffered_bytes_needed" skCodecMinBufferedBytesNeeded :: IO (CSize)
-- | `sk_codec_new_from_stream`
foreign import ccall "sk_codec_new_from_stream" skCodecNewFromStream :: (Ptr (SkStream)) -> (Ptr (SkCodecResult)) -> IO (Ptr (SkCodec))
-- | `sk_codec_new_from_data`
foreign import ccall "sk_codec_new_from_data" skCodecNewFromData :: (Ptr (SkData)) -> IO (Ptr (SkCodec))
-- | `sk_codec_destroy`
foreign import ccall "sk_codec_destroy" skCodecDestroy :: (Ptr (SkCodec)) -> IO (())
-- | `sk_codec_get_info`
foreign import ccall "sk_codec_get_info" skCodecGetInfo :: (Ptr (SkCodec)) -> (Ptr (SkImageInfo)) -> IO (())
-- | `sk_codec_get_origin`
foreign import ccall "sk_codec_get_origin" skCodecGetOrigin :: (Ptr (SkCodec)) -> IO (SkEncodedOrigin)
-- | `sk_codec_get_scaled_dimensions`
foreign import ccall "sk_codec_get_scaled_dimensions" skCodecGetScaledDimensions :: (Ptr (SkCodec)) -> (CFloat) -> (Ptr (SkISize)) -> IO (())
-- | `sk_codec_get_valid_subset`
foreign import ccall "sk_codec_get_valid_subset" skCodecGetValidSubset :: (Ptr (SkCodec)) -> (Ptr (SkIRect)) -> IO (CBool)
-- | `sk_codec_get_encoded_format`
foreign import ccall "sk_codec_get_encoded_format" skCodecGetEncodedFormat :: (Ptr (SkCodec)) -> IO (SkEncodedImageFormat)
-- | `sk_codec_get_pixels`
foreign import ccall "sk_codec_get_pixels" skCodecGetPixels :: (Ptr (SkCodec)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (Ptr (SkCodecOptions)) -> IO (SkCodecResult)
-- | `sk_codec_start_incremental_decode`
foreign import ccall "sk_codec_start_incremental_decode" skCodecStartIncrementalDecode :: (Ptr (SkCodec)) -> (Ptr (SkImageInfo)) -> (Ptr (())) -> (CSize) -> (Ptr (SkCodecOptions)) -> IO (SkCodecResult)
-- | `sk_codec_incremental_decode`
foreign import ccall "sk_codec_incremental_decode" skCodecIncrementalDecode :: (Ptr (SkCodec)) -> (Ptr (CInt)) -> IO (SkCodecResult)
-- | `sk_codec_start_scanline_decode`
foreign import ccall "sk_codec_start_scanline_decode" skCodecStartScanLineDecode :: (Ptr (SkCodec)) -> (Ptr (SkImageInfo)) -> (Ptr (SkCodecOptions)) -> IO (SkCodecResult)
-- | `sk_codec_get_scanlines`
foreign import ccall "sk_codec_get_scanlines" skCodecGetScanLines :: (Ptr (SkCodec)) -> (Ptr (())) -> (CInt) -> (CSize) -> IO (CInt)
-- | `sk_codec_skip_scanlines`
foreign import ccall "sk_codec_skip_scanlines" skCodecSkipScanLines :: (Ptr (SkCodec)) -> (CInt) -> IO (CBool)
-- | `sk_codec_get_scanline_order`
foreign import ccall "sk_codec_get_scanline_order" skCodecGetScanLineOrder :: (Ptr (SkCodec)) -> IO (SkCodecScanLineOrder)
-- | `sk_codec_next_scanline`
foreign import ccall "sk_codec_next_scanline" skCodecNextScanLine :: (Ptr (SkCodec)) -> IO (CInt)
-- | `sk_codec_output_scanline`
foreign import ccall "sk_codec_output_scanline" skCodecOutputScanLine :: (Ptr (SkCodec)) -> (CInt) -> IO (CInt)
-- | `sk_codec_get_frame_count`
foreign import ccall "sk_codec_get_frame_count" skCodecGetFrameCount :: (Ptr (SkCodec)) -> IO (CInt)
-- | `sk_codec_get_frame_info`
foreign import ccall "sk_codec_get_frame_info" skCodecGetFrameInfo :: (Ptr (SkCodec)) -> (Ptr (SkCodecFrameInfo)) -> IO (())
-- | `sk_codec_get_frame_info_for_index`
foreign import ccall "sk_codec_get_frame_info_for_index" skCodecGetFrameInfoForIndex :: (Ptr (SkCodec)) -> (CInt) -> (Ptr (SkCodecFrameInfo)) -> IO (CBool)
-- | `sk_codec_get_repetition_count`
foreign import ccall "sk_codec_get_repetition_count" skCodecGetRepetitionCount :: (Ptr (SkCodec)) -> IO (CInt)
-- | `sk_data_new_empty`
foreign import ccall "sk_data_new_empty" skDataNewEmpty :: IO (Ptr (SkData))
-- | `sk_data_new_with_copy`
foreign import ccall "sk_data_new_with_copy" skDataNewWithCopy :: (Ptr (())) -> (CSize) -> IO (Ptr (SkData))
-- | `sk_data_new_subset`
foreign import ccall "sk_data_new_subset" skDataNewSubset :: (Ptr (SkData)) -> (CSize) -> (CSize) -> IO (Ptr (SkData))
-- | `sk_data_ref`
foreign import ccall "sk_data_ref" skDataRef :: (Ptr (SkData)) -> IO (())
-- | `sk_data_unref`
foreign import ccall "sk_data_unref" skDataUnRef :: (Ptr (SkData)) -> IO (())
-- | `sk_data_get_size`
foreign import ccall "sk_data_get_size" skDataGetSize :: (Ptr (SkData)) -> IO (CSize)
-- | `sk_data_get_data`
foreign import ccall "sk_data_get_data" skDataGetData :: (Ptr (SkData)) -> IO (Ptr (()))
-- | `sk_data_new_from_file`
foreign import ccall "sk_data_new_from_file" skDataNewFromFile :: (Ptr (CChar)) -> IO (Ptr (SkData))
-- | `sk_data_new_from_stream`
foreign import ccall "sk_data_new_from_stream" skDataNewFromStream :: (Ptr (SkStream)) -> (CSize) -> IO (Ptr (SkData))
-- | `sk_data_get_bytes`
foreign import ccall "sk_data_get_bytes" skDataGetBytes :: (Ptr (SkData)) -> IO (Ptr (Word8))
-- | `sk_data_new_with_proc`
foreign import ccall "sk_data_new_with_proc" skDataNewWithProc :: (Ptr (())) -> (CSize) -> (FunPtr (SkDataReleaseProc)) -> (Ptr (())) -> IO (Ptr (SkData))
-- | `sk_data_new_uninitialized`
foreign import ccall "sk_data_new_uninitialized" skDataNewUninitialized :: (CSize) -> IO (Ptr (SkData))
-- | `sk_paint_new`
foreign import ccall "sk_paint_new" skPaintNew :: IO (Ptr (SkPaint))
-- | `sk_paint_clone`
foreign import ccall "sk_paint_clone" skPaintClone :: (Ptr (SkPaint)) -> IO (Ptr (SkPaint))
-- | `sk_paint_delete`
foreign import ccall "sk_paint_delete" skPaintDelete :: (Ptr (SkPaint)) -> IO (())
-- | `sk_paint_reset`
foreign import ccall "sk_paint_reset" skPaintReset :: (Ptr (SkPaint)) -> IO (())
-- | `sk_paint_is_antialias`
foreign import ccall "sk_paint_is_antialias" skPaintIsAntiAlias :: (Ptr (SkPaint)) -> IO (CBool)
-- | `sk_paint_set_antialias`
foreign import ccall "sk_paint_set_antialias" skPaintSetAntiAlias :: (Ptr (SkPaint)) -> (CBool) -> IO (())
-- | `sk_paint_get_color`
foreign import ccall "sk_paint_get_color" skPaintGetColor :: (Ptr (SkPaint)) -> IO (SkColor)
-- | `sk_paint_get_color4f`
foreign import ccall "sk_paint_get_color4f" skPaintGetColor4F :: (Ptr (SkPaint)) -> (Ptr (SkColor4F)) -> IO (())
-- | `sk_paint_set_color`
foreign import ccall "sk_paint_set_color" skPaintSetColor :: (Ptr (SkPaint)) -> (SkColor) -> IO (())
-- | `sk_paint_set_color4f`
foreign import ccall "sk_paint_set_color4f" skPaintSetColor4F :: (Ptr (SkPaint)) -> (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> IO (())
-- | `sk_paint_get_style`
foreign import ccall "sk_paint_get_style" skPaintGetStyle :: (Ptr (SkPaint)) -> IO (SkPaintStyle)
-- | `sk_paint_set_style`
foreign import ccall "sk_paint_set_style" skPaintSetStyle :: (Ptr (SkPaint)) -> (SkPaintStyle) -> IO (())
-- | `sk_paint_get_stroke_width`
foreign import ccall "sk_paint_get_stroke_width" skPaintGetStrokeWidth :: (Ptr (SkPaint)) -> IO (CFloat)
-- | `sk_paint_set_stroke_width`
foreign import ccall "sk_paint_set_stroke_width" skPaintSetStrokeWidth :: (Ptr (SkPaint)) -> (CFloat) -> IO (())
-- | `sk_paint_get_stroke_miter`
foreign import ccall "sk_paint_get_stroke_miter" skPaintGetStrokeMiter :: (Ptr (SkPaint)) -> IO (CFloat)
-- | `sk_paint_set_stroke_miter`
foreign import ccall "sk_paint_set_stroke_miter" skPaintSetStrokeMiter :: (Ptr (SkPaint)) -> (CFloat) -> IO (())
-- | `sk_paint_get_stroke_cap`
foreign import ccall "sk_paint_get_stroke_cap" skPaintGetStrokeCap :: (Ptr (SkPaint)) -> IO (SkStrokeCap)
-- | `sk_paint_set_stroke_cap`
foreign import ccall "sk_paint_set_stroke_cap" skPaintSetStrokeCap :: (Ptr (SkPaint)) -> (SkStrokeCap) -> IO (())
-- | `sk_paint_get_stroke_join`
foreign import ccall "sk_paint_get_stroke_join" skPaintGetStrokeJoin :: (Ptr (SkPaint)) -> IO (SkStrokeJoin)
-- | `sk_paint_set_stroke_join`
foreign import ccall "sk_paint_set_stroke_join" skPaintSetStrokeJoin :: (Ptr (SkPaint)) -> (SkStrokeJoin) -> IO (())
-- | `sk_paint_set_shader`
foreign import ccall "sk_paint_set_shader" skPaintSetShader :: (Ptr (SkPaint)) -> (Ptr (SkShader)) -> IO (())
-- | `sk_paint_set_maskfilter`
foreign import ccall "sk_paint_set_maskfilter" skPaintSetMaskFilter :: (Ptr (SkPaint)) -> (Ptr (SkMaskFilter)) -> IO (())
-- | `sk_paint_set_blendmode`
foreign import ccall "sk_paint_set_blendmode" skPaintSetBlendMode :: (Ptr (SkPaint)) -> (SkBlendMode) -> IO (())
-- | `sk_paint_set_blender`
foreign import ccall "sk_paint_set_blender" skPaintSetBlender :: (Ptr (SkPaint)) -> (Ptr (SkBlender)) -> IO (())
-- | `sk_paint_is_dither`
foreign import ccall "sk_paint_is_dither" skPaintIsDither :: (Ptr (SkPaint)) -> IO (CBool)
-- | `sk_paint_set_dither`
foreign import ccall "sk_paint_set_dither" skPaintSetDither :: (Ptr (SkPaint)) -> (CBool) -> IO (())
-- | `sk_paint_get_shader`
foreign import ccall "sk_paint_get_shader" skPaintGetShader :: (Ptr (SkPaint)) -> IO (Ptr (SkShader))
-- | `sk_paint_get_maskfilter`
foreign import ccall "sk_paint_get_maskfilter" skPaintGetMaskFilter :: (Ptr (SkPaint)) -> IO (Ptr (SkMaskFilter))
-- | `sk_paint_set_colorfilter`
foreign import ccall "sk_paint_set_colorfilter" skPaintSetColorFilter :: (Ptr (SkPaint)) -> (Ptr (SkColorFilter)) -> IO (())
-- | `sk_paint_get_colorfilter`
foreign import ccall "sk_paint_get_colorfilter" skPaintGetColorFilter :: (Ptr (SkPaint)) -> IO (Ptr (SkColorFilter))
-- | `sk_paint_set_imagefilter`
foreign import ccall "sk_paint_set_imagefilter" skPaintSetImageFilter :: (Ptr (SkPaint)) -> (Ptr (SkImageFilter)) -> IO (())
-- | `sk_paint_get_imagefilter`
foreign import ccall "sk_paint_get_imagefilter" skPaintGetImageFilter :: (Ptr (SkPaint)) -> IO (Ptr (SkImageFilter))
-- | `sk_paint_get_blendmode`
foreign import ccall "sk_paint_get_blendmode" skPaintGetBlendMode :: (Ptr (SkPaint)) -> IO (SkBlendMode)
-- | `sk_paint_get_blender`
foreign import ccall "sk_paint_get_blender" skPaintGetBlender :: (Ptr (SkPaint)) -> IO (Ptr (SkBlender))
-- | `sk_paint_get_path_effect`
foreign import ccall "sk_paint_get_path_effect" skPaintGetPathEffect :: (Ptr (SkPaint)) -> IO (Ptr (SkPathEffect))
-- | `sk_paint_set_path_effect`
foreign import ccall "sk_paint_set_path_effect" skPaintSetPathEffect :: (Ptr (SkPaint)) -> (Ptr (SkPathEffect)) -> IO (())
-- | `sk_paint_get_fill_path`
foreign import ccall "sk_paint_get_fill_path" skPaintGetFillPath :: (Ptr (SkPaint)) -> (Ptr (SkPath)) -> (Ptr (SkPath)) -> (Ptr (SkRect)) -> (Ptr (SkMatrix)) -> IO (CBool)
-- | `sk_stream_asset_destroy`
foreign import ccall "sk_stream_asset_destroy" skStreamAssetDestroy :: (Ptr (SkStreamAsset)) -> IO (())
-- | `sk_filestream_new`
foreign import ccall "sk_filestream_new" skFileStreamNew :: (Ptr (CChar)) -> IO (Ptr (SkStreamFileStream))
-- | `sk_filestream_destroy`
foreign import ccall "sk_filestream_destroy" skFileStreamDestroy :: (Ptr (SkStreamFileStream)) -> IO (())
-- | `sk_filestream_is_valid`
foreign import ccall "sk_filestream_is_valid" skFileStreamIsValid :: (Ptr (SkStreamFileStream)) -> IO (CBool)
-- | `sk_memorystream_new`
foreign import ccall "sk_memorystream_new" skMemoryStreamNew :: IO (Ptr (SkStreamMemoryStream))
-- | `sk_memorystream_new_with_length`
foreign import ccall "sk_memorystream_new_with_length" skMemoryStreamNewWithLength :: (CSize) -> IO (Ptr (SkStreamMemoryStream))
-- | `sk_memorystream_new_with_data`
foreign import ccall "sk_memorystream_new_with_data" skMemoryStreamNewWithData :: (Ptr (())) -> (CSize) -> (CBool) -> IO (Ptr (SkStreamMemoryStream))
-- | `sk_memorystream_new_with_skdata`
foreign import ccall "sk_memorystream_new_with_skdata" skMemoryStreamNewWithSkData :: (Ptr (SkData)) -> IO (Ptr (SkStreamMemoryStream))
-- | `sk_memorystream_set_memory`
foreign import ccall "sk_memorystream_set_memory" skMemoryStreamSetMemory :: (Ptr (SkStreamMemoryStream)) -> (Ptr (())) -> (CSize) -> (CBool) -> IO (())
-- | `sk_memorystream_destroy`
foreign import ccall "sk_memorystream_destroy" skMemoryStreamDestroy :: (Ptr (SkStreamMemoryStream)) -> IO (())
-- | `sk_stream_read`
foreign import ccall "sk_stream_read" skStreamRead :: (Ptr (SkStream)) -> (Ptr (())) -> (CSize) -> IO (CSize)
-- | `sk_stream_peek`
foreign import ccall "sk_stream_peek" skStreamPeek :: (Ptr (SkStream)) -> (Ptr (())) -> (CSize) -> IO (CSize)
-- | `sk_stream_skip`
foreign import ccall "sk_stream_skip" skStreamSkip :: (Ptr (SkStream)) -> (CSize) -> IO (CSize)
-- | `sk_stream_is_at_end`
foreign import ccall "sk_stream_is_at_end" skStreamIsAtEnd :: (Ptr (SkStream)) -> IO (CBool)
-- | `sk_stream_read_s8`
foreign import ccall "sk_stream_read_s8" skStreamReadS8 :: (Ptr (SkStream)) -> (Ptr (Int8)) -> IO (CBool)
-- | `sk_stream_read_s16`
foreign import ccall "sk_stream_read_s16" skStreamReadS16 :: (Ptr (SkStream)) -> (Ptr (Int16)) -> IO (CBool)
-- | `sk_stream_read_s32`
foreign import ccall "sk_stream_read_s32" skStreamReadS32 :: (Ptr (SkStream)) -> (Ptr (Int32)) -> IO (CBool)
-- | `sk_stream_read_u8`
foreign import ccall "sk_stream_read_u8" skStreamReadU8 :: (Ptr (SkStream)) -> (Ptr (Word8)) -> IO (CBool)
-- | `sk_stream_read_u16`
foreign import ccall "sk_stream_read_u16" skStreamReadU16 :: (Ptr (SkStream)) -> (Ptr (Word16)) -> IO (CBool)
-- | `sk_stream_read_u32`
foreign import ccall "sk_stream_read_u32" skStreamReadU32 :: (Ptr (SkStream)) -> (Ptr (Word32)) -> IO (CBool)
-- | `sk_stream_read_bool`
foreign import ccall "sk_stream_read_bool" skStreamReadBooL :: (Ptr (SkStream)) -> (Ptr (CBool)) -> IO (CBool)
-- | `sk_stream_rewind`
foreign import ccall "sk_stream_rewind" skStreamRewind :: (Ptr (SkStream)) -> IO (CBool)
-- | `sk_stream_has_position`
foreign import ccall "sk_stream_has_position" skStreamHasPosition :: (Ptr (SkStream)) -> IO (CBool)
-- | `sk_stream_get_position`
foreign import ccall "sk_stream_get_position" skStreamGetPosition :: (Ptr (SkStream)) -> IO (CSize)
-- | `sk_stream_seek`
foreign import ccall "sk_stream_seek" skStreamSeek :: (Ptr (SkStream)) -> (CSize) -> IO (CBool)
-- | `sk_stream_move`
foreign import ccall "sk_stream_move" skStreamMove :: (Ptr (SkStream)) -> (CLong) -> IO (CBool)
-- | `sk_stream_has_length`
foreign import ccall "sk_stream_has_length" skStreamHasLength :: (Ptr (SkStream)) -> IO (CBool)
-- | `sk_stream_get_length`
foreign import ccall "sk_stream_get_length" skStreamGetLength :: (Ptr (SkStream)) -> IO (CSize)
-- | `sk_stream_get_memory_base`
foreign import ccall "sk_stream_get_memory_base" skStreamGetMemoryBase :: (Ptr (SkStream)) -> IO (Ptr (()))
-- | `sk_stream_fork`
foreign import ccall "sk_stream_fork" skStreamFork :: (Ptr (SkStream)) -> IO (Ptr (SkStream))
-- | `sk_stream_duplicate`
foreign import ccall "sk_stream_duplicate" skStreamDuplicate :: (Ptr (SkStream)) -> IO (Ptr (SkStream))
-- | `sk_stream_destroy`
foreign import ccall "sk_stream_destroy" skStreamDestroy :: (Ptr (SkStream)) -> IO (())
-- | `sk_filewstream_new`
foreign import ccall "sk_filewstream_new" skFileWStreamNew :: (Ptr (CChar)) -> IO (Ptr (SkWStreamFileStream))
-- | `sk_filewstream_destroy`
foreign import ccall "sk_filewstream_destroy" skFileWStreamDestroy :: (Ptr (SkWStreamFileStream)) -> IO (())
-- | `sk_filewstream_is_valid`
foreign import ccall "sk_filewstream_is_valid" skFileWStreamIsValid :: (Ptr (SkWStreamFileStream)) -> IO (CBool)
-- | `sk_dynamicmemorywstream_new`
foreign import ccall "sk_dynamicmemorywstream_new" skDynamicMemoryWStreamNew :: IO (Ptr (SkWStreamDynamicMemoryStream))
-- | `sk_dynamicmemorywstream_detach_as_stream`
foreign import ccall "sk_dynamicmemorywstream_detach_as_stream" skDynamicMemoryWStreamDetachAsStream :: (Ptr (SkWStreamDynamicMemoryStream)) -> IO (Ptr (SkStreamAsset))
-- | `sk_dynamicmemorywstream_detach_as_data`
foreign import ccall "sk_dynamicmemorywstream_detach_as_data" skDynamicMemoryWStreamDetachAsData :: (Ptr (SkWStreamDynamicMemoryStream)) -> IO (Ptr (SkData))
-- | `sk_dynamicmemorywstream_copy_to`
foreign import ccall "sk_dynamicmemorywstream_copy_to" skDynamicMemoryWStreamCopyTo :: (Ptr (SkWStreamDynamicMemoryStream)) -> (Ptr (())) -> IO (())
-- | `sk_dynamicmemorywstream_write_to_stream`
foreign import ccall "sk_dynamicmemorywstream_write_to_stream" skDynamicMemoryWStreamWriteToStream :: (Ptr (SkWStreamDynamicMemoryStream)) -> (Ptr (SkWStream)) -> IO (CBool)
-- | `sk_dynamicmemorywstream_destroy`
foreign import ccall "sk_dynamicmemorywstream_destroy" skDynamicMemoryWStreamDestroy :: (Ptr (SkWStreamDynamicMemoryStream)) -> IO (())
-- | `sk_wstream_write`
foreign import ccall "sk_wstream_write" skWStreamWrite :: (Ptr (SkWStream)) -> (Ptr (())) -> (CSize) -> IO (CBool)
-- | `sk_wstream_newline`
foreign import ccall "sk_wstream_newline" skWStreamNewline :: (Ptr (SkWStream)) -> IO (CBool)
-- | `sk_wstream_flush`
foreign import ccall "sk_wstream_flush" skWStreamFlush :: (Ptr (SkWStream)) -> IO (())
-- | `sk_wstream_bytes_written`
foreign import ccall "sk_wstream_bytes_written" skWStreamBytesWritten :: (Ptr (SkWStream)) -> IO (CSize)
-- | `sk_wstream_write_8`
foreign import ccall "sk_wstream_write_8" skWStreamWrite8 :: (Ptr (SkWStream)) -> (Word8) -> IO (CBool)
-- | `sk_wstream_write_16`
foreign import ccall "sk_wstream_write_16" skWStreamWrite16 :: (Ptr (SkWStream)) -> (Word16) -> IO (CBool)
-- | `sk_wstream_write_32`
foreign import ccall "sk_wstream_write_32" skWStreamWrite32 :: (Ptr (SkWStream)) -> (Word32) -> IO (CBool)
-- | `sk_wstream_write_text`
foreign import ccall "sk_wstream_write_text" skWStreamWriteText :: (Ptr (SkWStream)) -> (Ptr (CChar)) -> IO (CBool)
-- | `sk_wstream_write_dec_as_text`
foreign import ccall "sk_wstream_write_dec_as_text" skWStreamWriteDecAsText :: (Ptr (SkWStream)) -> (Int32) -> IO (CBool)
-- | `sk_wstream_write_bigdec_as_text`
foreign import ccall "sk_wstream_write_bigdec_as_text" skWStreamWriteBigDecAsText :: (Ptr (SkWStream)) -> (Int64) -> (CInt) -> IO (CBool)
-- | `sk_wstream_write_hex_as_text`
foreign import ccall "sk_wstream_write_hex_as_text" skWStreamWriteHexAsText :: (Ptr (SkWStream)) -> (Word32) -> (CInt) -> IO (CBool)
-- | `sk_wstream_write_scalar_as_text`
foreign import ccall "sk_wstream_write_scalar_as_text" skWStreamWriteScalarAsText :: (Ptr (SkWStream)) -> (CFloat) -> IO (CBool)
-- | `sk_wstream_write_bool`
foreign import ccall "sk_wstream_write_bool" skWStreamWriteBooL :: (Ptr (SkWStream)) -> (CBool) -> IO (CBool)
-- | `sk_wstream_write_scalar`
foreign import ccall "sk_wstream_write_scalar" skWStreamWriteScalar :: (Ptr (SkWStream)) -> (CFloat) -> IO (CBool)
-- | `sk_wstream_write_packed_uint`
foreign import ccall "sk_wstream_write_packed_uint" skWStreamWritePackedUInt :: (Ptr (SkWStream)) -> (CSize) -> IO (CBool)
-- | `sk_wstream_write_stream`
foreign import ccall "sk_wstream_write_stream" skWStreamWriteStream :: (Ptr (SkWStream)) -> (Ptr (SkStream)) -> (CSize) -> IO (CBool)
-- | `sk_wstream_get_size_of_packed_uint`
foreign import ccall "sk_wstream_get_size_of_packed_uint" skWStreamGetSizeOfPackedUInt :: (CSize) -> IO (CInt)
-- | `sk_blender_ref`
foreign import ccall "sk_blender_ref" skBlenderRef :: (Ptr (SkBlender)) -> IO (())
-- | `sk_blender_unref`
foreign import ccall "sk_blender_unref" skBlenderUnRef :: (Ptr (SkBlender)) -> IO (())
-- | `sk_blender_new_mode`
foreign import ccall "sk_blender_new_mode" skBlenderNewMode :: (SkBlendMode) -> IO (Ptr (SkBlender))
-- | `sk_blender_new_arithmetic`
foreign import ccall "sk_blender_new_arithmetic" skBlenderNewArithmetic :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CBool) -> IO (Ptr (SkBlender))
-- | `sk_graphics_init`
foreign import ccall "sk_graphics_init" skGraphicsInit :: IO (())
-- | `sk_graphics_purge_font_cache`
foreign import ccall "sk_graphics_purge_font_cache" skGraphicsPurgeFontCache :: IO (())
-- | `sk_graphics_purge_resource_cache`
foreign import ccall "sk_graphics_purge_resource_cache" skGraphicsPurgeResourceCache :: IO (())
-- | `sk_graphics_purge_all_caches`
foreign import ccall "sk_graphics_purge_all_caches" skGraphicsPurgeAllCaches :: IO (())
-- | `sk_graphics_get_font_cache_used`
foreign import ccall "sk_graphics_get_font_cache_used" skGraphicsGetFontCacheUsed :: IO (CSize)
-- | `sk_graphics_get_font_cache_limit`
foreign import ccall "sk_graphics_get_font_cache_limit" skGraphicsGetFontCacheLimit :: IO (CSize)
-- | `sk_graphics_set_font_cache_limit`
foreign import ccall "sk_graphics_set_font_cache_limit" skGraphicsSetFontCacheLimit :: (CSize) -> IO (CSize)
-- | `sk_graphics_get_font_cache_count_used`
foreign import ccall "sk_graphics_get_font_cache_count_used" skGraphicsGetFontCacheCountUsed :: IO (CInt)
-- | `sk_graphics_get_font_cache_count_limit`
foreign import ccall "sk_graphics_get_font_cache_count_limit" skGraphicsGetFontCacheCountLimit :: IO (CInt)
-- | `sk_graphics_set_font_cache_count_limit`
foreign import ccall "sk_graphics_set_font_cache_count_limit" skGraphicsSetFontCacheCountLimit :: (CInt) -> IO (CInt)
-- | `sk_graphics_get_resource_cache_total_bytes_used`
foreign import ccall "sk_graphics_get_resource_cache_total_bytes_used" skGraphicsGetResourceCacheTotalBytesUsed :: IO (CSize)
-- | `sk_graphics_get_resource_cache_total_byte_limit`
foreign import ccall "sk_graphics_get_resource_cache_total_byte_limit" skGraphicsGetResourceCacheTotalByteLimit :: IO (CSize)
-- | `sk_graphics_set_resource_cache_total_byte_limit`
foreign import ccall "sk_graphics_set_resource_cache_total_byte_limit" skGraphicsSetResourceCacheTotalByteLimit :: (CSize) -> IO (CSize)
-- | `sk_graphics_get_resource_cache_single_allocation_byte_limit`
foreign import ccall "sk_graphics_get_resource_cache_single_allocation_byte_limit" skGraphicsGetResourceCacheSingleAllocationByteLimit :: IO (CSize)
-- | `sk_graphics_set_resource_cache_single_allocation_byte_limit`
foreign import ccall "sk_graphics_set_resource_cache_single_allocation_byte_limit" skGraphicsSetResourceCacheSingleAllocationByteLimit :: (CSize) -> IO (CSize)
-- | `sk_graphics_dump_memory_statistics`
foreign import ccall "sk_graphics_dump_memory_statistics" skGraphicsDumpMemoryStatistics :: (Ptr (SkTraceMemoryDump)) -> IO (())
-- | `skottie_animation_make_from_string`
foreign import ccall "skottie_animation_make_from_string" skottieAnimationMakeFromString :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_make_from_data`
foreign import ccall "skottie_animation_make_from_data" skottieAnimationMakeFromData :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_make_from_stream`
foreign import ccall "skottie_animation_make_from_stream" skottieAnimationMakeFromStream :: (Ptr (SkStream)) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_make_from_file`
foreign import ccall "skottie_animation_make_from_file" skottieAnimationMakeFromFile :: (Ptr (CChar)) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_ref`
foreign import ccall "skottie_animation_ref" skottieAnimationRef :: (Ptr (SkottieAnimation)) -> IO (())
-- | `skottie_animation_unref`
foreign import ccall "skottie_animation_unref" skottieAnimationUnRef :: (Ptr (SkottieAnimation)) -> IO (())
-- | `skottie_animation_delete`
foreign import ccall "skottie_animation_delete" skottieAnimationDelete :: (Ptr (SkottieAnimation)) -> IO (())
-- | `skottie_animation_render`
foreign import ccall "skottie_animation_render" skottieAnimationRender :: (Ptr (SkottieAnimation)) -> (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> IO (())
-- | `skottie_animation_render_with_flags`
foreign import ccall "skottie_animation_render_with_flags" skottieAnimationRenderWithFlags :: (Ptr (SkottieAnimation)) -> (Ptr (SkCanvas)) -> (Ptr (SkRect)) -> (SkottieAnimationRenderFlags) -> IO (())
-- | `skottie_animation_seek`
foreign import ccall "skottie_animation_seek" skottieAnimationSeek :: (Ptr (SkottieAnimation)) -> (CFloat) -> (Ptr (SksgInvalidationController)) -> IO (())
-- | `skottie_animation_seek_frame`
foreign import ccall "skottie_animation_seek_frame" skottieAnimationSeekFrame :: (Ptr (SkottieAnimation)) -> (CFloat) -> (Ptr (SksgInvalidationController)) -> IO (())
-- | `skottie_animation_seek_frame_time`
foreign import ccall "skottie_animation_seek_frame_time" skottieAnimationSeekFrameTime :: (Ptr (SkottieAnimation)) -> (CFloat) -> (Ptr (SksgInvalidationController)) -> IO (())
-- | `skottie_animation_get_duration`
foreign import ccall "skottie_animation_get_duration" skottieAnimationGetDuration :: (Ptr (SkottieAnimation)) -> IO (CDouble)
-- | `skottie_animation_get_fps`
foreign import ccall "skottie_animation_get_fps" skottieAnimationGetFps :: (Ptr (SkottieAnimation)) -> IO (CDouble)
-- | `skottie_animation_get_in_point`
foreign import ccall "skottie_animation_get_in_point" skottieAnimationGetInPoint :: (Ptr (SkottieAnimation)) -> IO (CDouble)
-- | `skottie_animation_get_out_point`
foreign import ccall "skottie_animation_get_out_point" skottieAnimationGetOutPoint :: (Ptr (SkottieAnimation)) -> IO (CDouble)
-- | `skottie_animation_get_version`
foreign import ccall "skottie_animation_get_version" skottieAnimationGetVersion :: (Ptr (SkottieAnimation)) -> (Ptr (SkString)) -> IO (())
-- | `skottie_animation_get_size`
foreign import ccall "skottie_animation_get_size" skottieAnimationGetSize :: (Ptr (SkottieAnimation)) -> (Ptr (SkSize)) -> IO (())
-- | `skottie_animation_builder_new`
foreign import ccall "skottie_animation_builder_new" skottieAnimationBuilderNew :: (SkottieAnimationBuilderFlags) -> IO (Ptr (SkottieAnimationBuilder))
-- | `skottie_animation_builder_delete`
foreign import ccall "skottie_animation_builder_delete" skottieAnimationBuilderDelete :: (Ptr (SkottieAnimationBuilder)) -> IO (())
-- | `skottie_animation_builder_get_stats`
foreign import ccall "skottie_animation_builder_get_stats" skottieAnimationBuilderGetStats :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (SkottieAnimationBuilderStats)) -> IO (())
-- | `skottie_animation_builder_set_resource_provider`
foreign import ccall "skottie_animation_builder_set_resource_provider" skottieAnimationBuilderSetResourceProvider :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (SkottieResourceProvider)) -> IO (())
-- | `skottie_animation_builder_set_font_manager`
foreign import ccall "skottie_animation_builder_set_font_manager" skottieAnimationBuilderSetFontManager :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (SkFontMGr)) -> IO (())
-- | `skottie_animation_builder_make_from_stream`
foreign import ccall "skottie_animation_builder_make_from_stream" skottieAnimationBuilderMakeFromStream :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (SkStream)) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_builder_make_from_file`
foreign import ccall "skottie_animation_builder_make_from_file" skottieAnimationBuilderMakeFromFile :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (CChar)) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_builder_make_from_string`
foreign import ccall "skottie_animation_builder_make_from_string" skottieAnimationBuilderMakeFromString :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (CChar)) -> (CSize) -> IO (Ptr (SkottieAnimation))
-- | `skottie_animation_builder_make_from_data`
foreign import ccall "skottie_animation_builder_make_from_data" skottieAnimationBuilderMakeFromData :: (Ptr (SkottieAnimationBuilder)) -> (Ptr (CChar)) -> (CSize) -> IO (Ptr (SkottieAnimation))
-- | `skresources_resource_provider_ref`
foreign import ccall "skresources_resource_provider_ref" skResourcesResourceProviderRef :: (Ptr (SkResourcesResourceProvider)) -> IO (())
-- | `skresources_resource_provider_unref`
foreign import ccall "skresources_resource_provider_unref" skResourcesResourceProviderUnRef :: (Ptr (SkResourcesResourceProvider)) -> IO (())
-- | `skresources_resource_provider_delete`
foreign import ccall "skresources_resource_provider_delete" skResourcesResourceProviderDelete :: (Ptr (SkResourcesResourceProvider)) -> IO (())
-- | `skresources_resource_provider_load`
foreign import ccall "skresources_resource_provider_load" skResourcesResourceProviderLoad :: (Ptr (SkResourcesResourceProvider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (SkData))
-- | `skresources_resource_provider_load_image_asset`
foreign import ccall "skresources_resource_provider_load_image_asset" skResourcesResourceProviderLoadImageAsset :: (Ptr (SkResourcesResourceProvider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (SkResourcesImageAsset))
-- | `skresources_resource_provider_load_audio_asset`
foreign import ccall "skresources_resource_provider_load_audio_asset" skResourcesResourceProviderLoadAudioAsset :: (Ptr (SkResourcesResourceProvider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (SkResourcesExternalTrackAsset))
-- | `skresources_resource_provider_load_typeface`
foreign import ccall "skresources_resource_provider_load_typeface" skResourcesResourceProviderLoadTypeface :: (Ptr (SkResourcesResourceProvider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (SkTypeface))
-- | `skresources_file_resource_provider_make`
foreign import ccall "skresources_file_resource_provider_make" skResourcesFileResourceProviderMake :: (Ptr (SkString)) -> (CBool) -> IO (Ptr (SkResourcesResourceProvider))
-- | `skresources_caching_resource_provider_proxy_make`
foreign import ccall "skresources_caching_resource_provider_proxy_make" skResourcesCachingResourceProviderProxyMake :: (Ptr (SkResourcesResourceProvider)) -> IO (Ptr (SkResourcesResourceProvider))
-- | `skresources_data_uri_resource_provider_proxy_make`
foreign import ccall "skresources_data_uri_resource_provider_proxy_make" skResourcesDataUriResourceProviderProxyMake :: (Ptr (SkResourcesResourceProvider)) -> (CBool) -> IO (Ptr (SkResourcesResourceProvider))
-- | `sk_svgcanvas_create_with_stream`
foreign import ccall "sk_svgcanvas_create_with_stream" skSvgCanvasCreateWithStream :: (Ptr (SkRect)) -> (Ptr (SkWStream)) -> IO (Ptr (SkCanvas))
-- | `sk_string_new_empty`
foreign import ccall "sk_string_new_empty" skStringNewEmpty :: IO (Ptr (SkString))
-- | `sk_string_new_with_copy`
foreign import ccall "sk_string_new_with_copy" skStringNewWithCopy :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (SkString))
-- | `sk_string_destructor`
foreign import ccall "sk_string_destructor" skStringDestructOr :: (Ptr (SkString)) -> IO (())
-- | `sk_string_get_size`
foreign import ccall "sk_string_get_size" skStringGetSize :: (Ptr (SkString)) -> IO (CSize)
-- | `sk_string_get_c_str`
foreign import ccall "sk_string_get_c_str" skStringGetCStr :: (Ptr (SkString)) -> IO (Ptr (CChar))
-- | `sk_linker_keep_alive`
foreign import ccall "sk_linker_keep_alive" skLinkerKeepAlive :: IO (())
-- | `sk_path_effect_unref`
foreign import ccall "sk_path_effect_unref" skPathEffectUnRef :: (Ptr (SkPathEffect)) -> IO (())
-- | `sk_path_effect_create_compose`
foreign import ccall "sk_path_effect_create_compose" skPathEffectCreateCompose :: (Ptr (SkPathEffect)) -> (Ptr (SkPathEffect)) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_sum`
foreign import ccall "sk_path_effect_create_sum" skPathEffectCreateSum :: (Ptr (SkPathEffect)) -> (Ptr (SkPathEffect)) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_discrete`
foreign import ccall "sk_path_effect_create_discrete" skPathEffectCreateDiscrete :: (CFloat) -> (CFloat) -> (Word32) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_corner`
foreign import ccall "sk_path_effect_create_corner" skPathEffectCreateCorner :: (CFloat) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_1d_path`
foreign import ccall "sk_path_effect_create_1d_path" skPathEffectCreate1dPath :: (Ptr (SkPath)) -> (CFloat) -> (CFloat) -> (SkPathEffect1dStyle) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_2d_line`
foreign import ccall "sk_path_effect_create_2d_line" skPathEffectCreate2dLine :: (CFloat) -> (Ptr (SkMatrix)) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_2d_path`
foreign import ccall "sk_path_effect_create_2d_path" skPathEffectCreate2dPath :: (Ptr (SkMatrix)) -> (Ptr (SkPath)) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_dash`
foreign import ccall "sk_path_effect_create_dash" skPathEffectCreateDash :: (Ptr (CFloat)) -> (CInt) -> (CFloat) -> IO (Ptr (SkPathEffect))
-- | `sk_path_effect_create_trim`
foreign import ccall "sk_path_effect_create_trim" skPathEffectCreateTrim :: (CFloat) -> (CFloat) -> (SkPathEffectTrimMode) -> IO (Ptr (SkPathEffect))
-- | `sk_vertices_unref`
foreign import ccall "sk_vertices_unref" skVerticesUnRef :: (Ptr (SkVertices)) -> IO (())
-- | `sk_vertices_ref`
foreign import ccall "sk_vertices_ref" skVerticesRef :: (Ptr (SkVertices)) -> IO (())
-- | `sk_vertices_make_copy`
foreign import ccall "sk_vertices_make_copy" skVerticesMakeCopy :: (SkVerticesVertexMode) -> (CInt) -> (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> (Ptr (SkColor)) -> (CInt) -> (Ptr (Word16)) -> IO (Ptr (SkVertices))
-- | `sk_font_new`
foreign import ccall "sk_font_new" skFontNew :: IO (Ptr (SkFont))
-- | `sk_font_new_with_values`
foreign import ccall "sk_font_new_with_values" skFontNewWithValues :: (Ptr (SkTypeface)) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (Ptr (SkFont))
-- | `sk_font_delete`
foreign import ccall "sk_font_delete" skFontDelete :: (Ptr (SkFont)) -> IO (())
-- | `sk_font_is_force_auto_hinting`
foreign import ccall "sk_font_is_force_auto_hinting" skFontIsForceAutoHinting :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_force_auto_hinting`
foreign import ccall "sk_font_set_force_auto_hinting" skFontSetForceAutoHinting :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_is_embedded_bitmaps`
foreign import ccall "sk_font_is_embedded_bitmaps" skFontIsEmbeddedBitmapS :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_embedded_bitmaps`
foreign import ccall "sk_font_set_embedded_bitmaps" skFontSetEmbeddedBitmapS :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_is_subpixel`
foreign import ccall "sk_font_is_subpixel" skFontIsSubPixel :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_subpixel`
foreign import ccall "sk_font_set_subpixel" skFontSetSubPixel :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_is_linear_metrics`
foreign import ccall "sk_font_is_linear_metrics" skFontIsLinearMetrics :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_linear_metrics`
foreign import ccall "sk_font_set_linear_metrics" skFontSetLinearMetrics :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_is_embolden`
foreign import ccall "sk_font_is_embolden" skFontIsEmbolden :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_embolden`
foreign import ccall "sk_font_set_embolden" skFontSetEmbolden :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_is_baseline_snap`
foreign import ccall "sk_font_is_baseline_snap" skFontIsBaselineSnap :: (Ptr (SkFont)) -> IO (CBool)
-- | `sk_font_set_baseline_snap`
foreign import ccall "sk_font_set_baseline_snap" skFontSetBaselineSnap :: (Ptr (SkFont)) -> (CBool) -> IO (())
-- | `sk_font_get_edging`
foreign import ccall "sk_font_get_edging" skFontGetEdging :: (Ptr (SkFont)) -> IO (SkFontEdging)
-- | `sk_font_set_edging`
foreign import ccall "sk_font_set_edging" skFontSetEdging :: (Ptr (SkFont)) -> (SkFontEdging) -> IO (())
-- | `sk_font_get_hinting`
foreign import ccall "sk_font_get_hinting" skFontGetHinting :: (Ptr (SkFont)) -> IO (SkFontHinting)
-- | `sk_font_set_hinting`
foreign import ccall "sk_font_set_hinting" skFontSetHinting :: (Ptr (SkFont)) -> (SkFontHinting) -> IO (())
-- | `sk_font_get_typeface`
foreign import ccall "sk_font_get_typeface" skFontGetTypeface :: (Ptr (SkFont)) -> IO (Ptr (SkTypeface))
-- | `sk_font_set_typeface`
foreign import ccall "sk_font_set_typeface" skFontSetTypeface :: (Ptr (SkFont)) -> (Ptr (SkTypeface)) -> IO (())
-- | `sk_font_get_size`
foreign import ccall "sk_font_get_size" skFontGetSize :: (Ptr (SkFont)) -> IO (CFloat)
-- | `sk_font_set_size`
foreign import ccall "sk_font_set_size" skFontSetSize :: (Ptr (SkFont)) -> (CFloat) -> IO (())
-- | `sk_font_get_scale_x`
foreign import ccall "sk_font_get_scale_x" skFontGetScaleX :: (Ptr (SkFont)) -> IO (CFloat)
-- | `sk_font_set_scale_x`
foreign import ccall "sk_font_set_scale_x" skFontSetScaleX :: (Ptr (SkFont)) -> (CFloat) -> IO (())
-- | `sk_font_get_skew_x`
foreign import ccall "sk_font_get_skew_x" skFontGetSkewX :: (Ptr (SkFont)) -> IO (CFloat)
-- | `sk_font_set_skew_x`
foreign import ccall "sk_font_set_skew_x" skFontSetSkewX :: (Ptr (SkFont)) -> (CFloat) -> IO (())
-- | `sk_font_text_to_glyphs`
foreign import ccall "sk_font_text_to_glyphs" skFontTextToGlyphs :: (Ptr (SkFont)) -> (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (Ptr (Word16)) -> (CInt) -> IO (CInt)
-- | `sk_font_unichar_to_glyph`
foreign import ccall "sk_font_unichar_to_glyph" skFontUniCharToGlyph :: (Ptr (SkFont)) -> (Int32) -> IO (Word16)
-- | `sk_font_unichars_to_glyphs`
foreign import ccall "sk_font_unichars_to_glyphs" skFontUniCharsToGlyphs :: (Ptr (SkFont)) -> (Ptr (Int32)) -> (CInt) -> (Ptr (Word16)) -> IO (())
-- | `sk_font_measure_text`
foreign import ccall "sk_font_measure_text" skFontMeasureText :: (Ptr (SkFont)) -> (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (CFloat)
-- | `sk_font_measure_text_no_return`
foreign import ccall "sk_font_measure_text_no_return" skFontMeasureTextNoReturn :: (Ptr (SkFont)) -> (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> (Ptr (CFloat)) -> IO (())
-- | `sk_font_break_text`
foreign import ccall "sk_font_break_text" skFontBreakText :: (Ptr (SkFont)) -> (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (CFloat) -> (Ptr (CFloat)) -> (Ptr (SkPaint)) -> IO (CSize)
-- | `sk_font_get_widths_bounds`
foreign import ccall "sk_font_get_widths_bounds" skFontGetWidthsBounds :: (Ptr (SkFont)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (CFloat)) -> (Ptr (SkRect)) -> (Ptr (SkPaint)) -> IO (())
-- | `sk_font_get_pos`
foreign import ccall "sk_font_get_pos" skFontGetPos :: (Ptr (SkFont)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> IO (())
-- | `sk_font_get_xpos`
foreign import ccall "sk_font_get_xpos" skFontGetXPos :: (Ptr (SkFont)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (CFloat)) -> (CFloat) -> IO (())
-- | `sk_font_get_path`
foreign import ccall "sk_font_get_path" skFontGetPath :: (Ptr (SkFont)) -> (Word16) -> (Ptr (SkPath)) -> IO (CBool)
-- | `sk_font_get_paths`
foreign import ccall "sk_font_get_paths" skFontGetPaths :: (Ptr (SkFont)) -> (Ptr (Word16)) -> (CInt) -> (FunPtr (SkGlyphPathProc)) -> (Ptr (())) -> IO (())
-- | `sk_font_get_metrics`
foreign import ccall "sk_font_get_metrics" skFontGetMetrics :: (Ptr (SkFont)) -> (Ptr (SkFontMetrics)) -> IO (CFloat)
-- | `sk_text_utils_get_path`
foreign import ccall "sk_text_utils_get_path" skTextUtilsGetPath :: (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (CFloat) -> (CFloat) -> (Ptr (SkFont)) -> (Ptr (SkPath)) -> IO (())
-- | `sk_text_utils_get_pos_path`
foreign import ccall "sk_text_utils_get_pos_path" skTextUtilsGetPosPath :: (Ptr (())) -> (CSize) -> (SkTextEncoding) -> (Ptr (SkPoint)) -> (Ptr (SkFont)) -> (Ptr (SkPath)) -> IO (())
-- | `sk_rrect_new`
foreign import ccall "sk_rrect_new" skRRectNew :: IO (Ptr (SkRRect))
-- | `sk_rrect_new_copy`
foreign import ccall "sk_rrect_new_copy" skRRectNewCopy :: (Ptr (SkRRect)) -> IO (Ptr (SkRRect))
-- | `sk_rrect_delete`
foreign import ccall "sk_rrect_delete" skRRectDelete :: (Ptr (SkRRect)) -> IO (())
-- | `sk_rrect_get_type`
foreign import ccall "sk_rrect_get_type" skRRectGetType :: (Ptr (SkRRect)) -> IO (SkRRectType)
-- | `sk_rrect_get_rect`
foreign import ccall "sk_rrect_get_rect" skRRectGetRect :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_rrect_get_radii`
foreign import ccall "sk_rrect_get_radii" skRRectGetRadii :: (Ptr (SkRRect)) -> (SkRRectCorner) -> (Ptr (SkVector)) -> IO (())
-- | `sk_rrect_get_width`
foreign import ccall "sk_rrect_get_width" skRRectGetWidth :: (Ptr (SkRRect)) -> IO (CFloat)
-- | `sk_rrect_get_height`
foreign import ccall "sk_rrect_get_height" skRRectGetHeight :: (Ptr (SkRRect)) -> IO (CFloat)
-- | `sk_rrect_set_empty`
foreign import ccall "sk_rrect_set_empty" skRRectSetEmpty :: (Ptr (SkRRect)) -> IO (())
-- | `sk_rrect_set_rect`
foreign import ccall "sk_rrect_set_rect" skRRectSetRect :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_rrect_set_oval`
foreign import ccall "sk_rrect_set_oval" skRRectSetOval :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_rrect_set_rect_xy`
foreign import ccall "sk_rrect_set_rect_xy" skRRectSetRectXy :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_set_nine_patch`
foreign import ccall "sk_rrect_set_nine_patch" skRRectSetNinePatch :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_set_rect_radii`
foreign import ccall "sk_rrect_set_rect_radii" skRRectSetRectRadii :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> (Ptr (SkVector)) -> IO (())
-- | `sk_rrect_inset`
foreign import ccall "sk_rrect_inset" skRRectInset :: (Ptr (SkRRect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_outset`
foreign import ccall "sk_rrect_outset" skRRectOutset :: (Ptr (SkRRect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_offset`
foreign import ccall "sk_rrect_offset" skRRectOffset :: (Ptr (SkRRect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_contains`
foreign import ccall "sk_rrect_contains" skRRectContains :: (Ptr (SkRRect)) -> (Ptr (SkRect)) -> IO (CBool)
-- | `sk_rrect_is_valid`
foreign import ccall "sk_rrect_is_valid" skRRectIsValid :: (Ptr (SkRRect)) -> IO (CBool)
-- | `sk_rrect_transform`
foreign import ccall "sk_rrect_transform" skRRectTransform :: (Ptr (SkRRect)) -> (Ptr (SkMatrix)) -> (Ptr (SkRRect)) -> IO (CBool)
-- | `sk_matrix_try_invert`
foreign import ccall "sk_matrix_try_invert" skMatrixTryInvert :: (Ptr (SkMatrix)) -> (Ptr (SkMatrix)) -> IO (CBool)
-- | `sk_matrix_concat`
foreign import ccall "sk_matrix_concat" skMatrixConCat :: (Ptr (SkMatrix)) -> (Ptr (SkMatrix)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_matrix_pre_concat`
foreign import ccall "sk_matrix_pre_concat" skMatrixPreConCat :: (Ptr (SkMatrix)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_matrix_post_concat`
foreign import ccall "sk_matrix_post_concat" skMatrixPostConCat :: (Ptr (SkMatrix)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_matrix_map_rect`
foreign import ccall "sk_matrix_map_rect" skMatrixMapRect :: (Ptr (SkMatrix)) -> (Ptr (SkRect)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_matrix_map_points`
foreign import ccall "sk_matrix_map_points" skMatrixMapPoints :: (Ptr (SkMatrix)) -> (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> (CInt) -> IO (())
-- | `sk_matrix_map_vectors`
foreign import ccall "sk_matrix_map_vectors" skMatrixMapVectors :: (Ptr (SkMatrix)) -> (Ptr (SkPoint)) -> (Ptr (SkPoint)) -> (CInt) -> IO (())
-- | `sk_matrix_map_xy`
foreign import ccall "sk_matrix_map_xy" skMatrixMapXy :: (Ptr (SkMatrix)) -> (CFloat) -> (CFloat) -> (Ptr (SkPoint)) -> IO (())
-- | `sk_matrix_map_vector`
foreign import ccall "sk_matrix_map_vector" skMatrixMapVector :: (Ptr (SkMatrix)) -> (CFloat) -> (CFloat) -> (Ptr (SkPoint)) -> IO (())
-- | `sk_matrix_map_radius`
foreign import ccall "sk_matrix_map_radius" skMatrixMapRadius :: (Ptr (SkMatrix)) -> (CFloat) -> IO (CFloat)
-- | `sk_shader_ref`
foreign import ccall "sk_shader_ref" skShaderRef :: (Ptr (SkShader)) -> IO (())
-- | `sk_shader_unref`
foreign import ccall "sk_shader_unref" skShaderUnRef :: (Ptr (SkShader)) -> IO (())
-- | `sk_shader_with_local_matrix`
foreign import ccall "sk_shader_with_local_matrix" skShaderWithLocalMatrix :: (Ptr (SkShader)) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_with_color_filter`
foreign import ccall "sk_shader_with_color_filter" skShaderWithColorFilter :: (Ptr (SkShader)) -> (Ptr (SkColorFilter)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_empty`
foreign import ccall "sk_shader_new_empty" skShaderNewEmpty :: IO (Ptr (SkShader))
-- | `sk_shader_new_color`
foreign import ccall "sk_shader_new_color" skShaderNewColor :: (SkColor) -> IO (Ptr (SkShader))
-- | `sk_shader_new_color4f`
foreign import ccall "sk_shader_new_color4f" skShaderNewColor4F :: (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_blend`
foreign import ccall "sk_shader_new_blend" skShaderNewBlend :: (SkBlendMode) -> (Ptr (SkShader)) -> (Ptr (SkShader)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_blender`
foreign import ccall "sk_shader_new_blender" skShaderNewBlender :: (Ptr (SkBlender)) -> (Ptr (SkShader)) -> (Ptr (SkShader)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_linear_gradient`
foreign import ccall "sk_shader_new_linear_gradient" skShaderNewLinearGradient :: (Ptr (SkPoint)) -> (Ptr (SkColor)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_linear_gradient_color4f`
foreign import ccall "sk_shader_new_linear_gradient_color4f" skShaderNewLinearGradientColor4F :: (Ptr (SkPoint)) -> (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_radial_gradient`
foreign import ccall "sk_shader_new_radial_gradient" skShaderNewRadialGradient :: (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkColor)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_radial_gradient_color4f`
foreign import ccall "sk_shader_new_radial_gradient_color4f" skShaderNewRadialGradientColor4F :: (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_sweep_gradient`
foreign import ccall "sk_shader_new_sweep_gradient" skShaderNewSweepGradient :: (Ptr (SkPoint)) -> (Ptr (SkColor)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (CFloat) -> (CFloat) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_sweep_gradient_color4f`
foreign import ccall "sk_shader_new_sweep_gradient_color4f" skShaderNewSweepGradientColor4F :: (Ptr (SkPoint)) -> (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (CFloat) -> (CFloat) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_two_point_conical_gradient`
foreign import ccall "sk_shader_new_two_point_conical_gradient" skShaderNewTwoPointConicalGradient :: (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkColor)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_two_point_conical_gradient_color4f`
foreign import ccall "sk_shader_new_two_point_conical_gradient_color4f" skShaderNewTwoPointConicalGradientColor4F :: (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkPoint)) -> (CFloat) -> (Ptr (SkColor4F)) -> (Ptr (SkColorSpace)) -> (Ptr (CFloat)) -> (CInt) -> (SkShaderTileMode) -> (Ptr (SkMatrix)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_perlin_noise_fractal_noise`
foreign import ccall "sk_shader_new_perlin_noise_fractal_noise" skShaderNewPerlInNoiseFractalNoise :: (CFloat) -> (CFloat) -> (CInt) -> (CFloat) -> (Ptr (SkISize)) -> IO (Ptr (SkShader))
-- | `sk_shader_new_perlin_noise_turbulence`
foreign import ccall "sk_shader_new_perlin_noise_turbulence" skShaderNewPerlInNoiseTurbulence :: (CFloat) -> (CFloat) -> (CInt) -> (CFloat) -> (Ptr (SkISize)) -> IO (Ptr (SkShader))
-- | `gr_recording_context_unref`
foreign import ccall "gr_recording_context_unref" grRecordingContextUnRef :: (Ptr (GrRecordingContext)) -> IO (())
-- | `gr_recording_context_get_max_surface_sample_count_for_color_type`
foreign import ccall "gr_recording_context_get_max_surface_sample_count_for_color_type" grRecordingContextGetMaxSurfaceSampleCountForColorType :: (Ptr (GrRecordingContext)) -> (SkColorType) -> IO (CInt)
-- | `gr_recording_context_get_backend`
foreign import ccall "gr_recording_context_get_backend" grRecordingContextGetBackend :: (Ptr (GrRecordingContext)) -> IO (GrBackend)
-- | `gr_recording_context_is_abandoned`
foreign import ccall "gr_recording_context_is_abandoned" grRecordingContextIsAbandoned :: (Ptr (GrRecordingContext)) -> IO (CBool)
-- | `gr_recording_context_max_texture_size`
foreign import ccall "gr_recording_context_max_texture_size" grRecordingContextMaxTextureSize :: (Ptr (GrRecordingContext)) -> IO (CInt)
-- | `gr_recording_context_max_render_target_size`
foreign import ccall "gr_recording_context_max_render_target_size" grRecordingContextMaxRenderTargetSize :: (Ptr (GrRecordingContext)) -> IO (CInt)
-- | `gr_recording_context_get_direct_context`
foreign import ccall "gr_recording_context_get_direct_context" grRecordingContextGetDirectContext :: (Ptr (GrRecordingContext)) -> IO (Ptr (GrDirectContext))
-- | `gr_direct_context_make_gl`
foreign import ccall "gr_direct_context_make_gl" grDirectContextMakeGl :: (Ptr (GrGlInterface)) -> IO (Ptr (GrDirectContext))
-- | `gr_direct_context_make_gl_with_options`
foreign import ccall "gr_direct_context_make_gl_with_options" grDirectContextMakeGlWithOptions :: (Ptr (GrGlInterface)) -> (Ptr (GrContextOptions)) -> IO (Ptr (GrDirectContext))
-- | `gr_direct_context_make_metal`
foreign import ccall "gr_direct_context_make_metal" grDirectContextMakeMetal :: (Ptr (())) -> (Ptr (())) -> IO (Ptr (GrDirectContext))
-- | `gr_direct_context_make_metal_with_options`
foreign import ccall "gr_direct_context_make_metal_with_options" grDirectContextMakeMetalWithOptions :: (Ptr (())) -> (Ptr (())) -> (Ptr (GrContextOptions)) -> IO (Ptr (GrDirectContext))
-- | `gr_direct_context_is_abandoned`
foreign import ccall "gr_direct_context_is_abandoned" grDirectContextIsAbandoned :: (Ptr (GrDirectContext)) -> IO (CBool)
-- | `gr_direct_context_abandon_context`
foreign import ccall "gr_direct_context_abandon_context" grDirectContextAbandonContext :: (Ptr (GrDirectContext)) -> IO (())
-- | `gr_direct_context_release_resources_and_abandon_context`
foreign import ccall "gr_direct_context_release_resources_and_abandon_context" grDirectContextReleaseResourcesAndAbandonContext :: (Ptr (GrDirectContext)) -> IO (())
-- | `gr_direct_context_get_resource_cache_limit`
foreign import ccall "gr_direct_context_get_resource_cache_limit" grDirectContextGetResourceCacheLimit :: (Ptr (GrDirectContext)) -> IO (CSize)
-- | `gr_direct_context_set_resource_cache_limit`
foreign import ccall "gr_direct_context_set_resource_cache_limit" grDirectContextSetResourceCacheLimit :: (Ptr (GrDirectContext)) -> (CSize) -> IO (())
-- | `gr_direct_context_get_resource_cache_usage`
foreign import ccall "gr_direct_context_get_resource_cache_usage" grDirectContextGetResourceCacheUsage :: (Ptr (GrDirectContext)) -> (Ptr (CInt)) -> (Ptr (CSize)) -> IO (())
-- | `gr_direct_context_flush`
foreign import ccall "gr_direct_context_flush" grDirectContextFlush :: (Ptr (GrDirectContext)) -> IO (())
-- | `gr_direct_context_submit`
foreign import ccall "gr_direct_context_submit" grDirectContextSubmit :: (Ptr (GrDirectContext)) -> (CBool) -> IO (CBool)
-- | `gr_direct_context_flush_and_submit`
foreign import ccall "gr_direct_context_flush_and_submit" grDirectContextFlushAndSubmit :: (Ptr (GrDirectContext)) -> (CBool) -> IO (())
-- | `gr_direct_context_flush_image`
foreign import ccall "gr_direct_context_flush_image" grDirectContextFlushImage :: (Ptr (GrDirectContext)) -> (Ptr (SkImage)) -> IO (())
-- | `gr_direct_context_flush_surface`
foreign import ccall "gr_direct_context_flush_surface" grDirectContextFlushSurface :: (Ptr (GrDirectContext)) -> (Ptr (SkSurface)) -> IO (())
-- | `gr_direct_context_reset_context`
foreign import ccall "gr_direct_context_reset_context" grDirectContextResetContext :: (Ptr (GrDirectContext)) -> (Word32) -> IO (())
-- | `gr_direct_context_dump_memory_statistics`
foreign import ccall "gr_direct_context_dump_memory_statistics" grDirectContextDumpMemoryStatistics :: (Ptr (GrDirectContext)) -> (Ptr (SkTraceMemoryDump)) -> IO (())
-- | `gr_direct_context_free_gpu_resources`
foreign import ccall "gr_direct_context_free_gpu_resources" grDirectContextFreeGpuResources :: (Ptr (GrDirectContext)) -> IO (())
-- | `gr_direct_context_perform_deferred_cleanup`
foreign import ccall "gr_direct_context_perform_deferred_cleanup" grDirectContextPerformDeferredCleanup :: (Ptr (GrDirectContext)) -> (CLLong) -> IO (())
-- | `gr_direct_context_purge_unlocked_resources_bytes`
foreign import ccall "gr_direct_context_purge_unlocked_resources_bytes" grDirectContextPurgeUnlockedResourcesBytes :: (Ptr (GrDirectContext)) -> (CSize) -> (CBool) -> IO (())
-- | `gr_direct_context_purge_unlocked_resources`
foreign import ccall "gr_direct_context_purge_unlocked_resources" grDirectContextPurgeUnlockedResources :: (Ptr (GrDirectContext)) -> (CBool) -> IO (())
-- | `gr_glinterface_create_native_interface`
foreign import ccall "gr_glinterface_create_native_interface" grGlInterfaceCreateNativeInterface :: IO (Ptr (GrGlInterface))
-- | `gr_glinterface_assemble_interface`
foreign import ccall "gr_glinterface_assemble_interface" grGlInterfaceAssembleInterface :: (Ptr (())) -> (FunPtr (GrGlGetProc)) -> IO (Ptr (GrGlInterface))
-- | `gr_glinterface_assemble_gl_interface`
foreign import ccall "gr_glinterface_assemble_gl_interface" grGlInterfaceAssembleGlInterface :: (Ptr (())) -> (FunPtr (GrGlGetProc)) -> IO (Ptr (GrGlInterface))
-- | `gr_glinterface_assemble_gles_interface`
foreign import ccall "gr_glinterface_assemble_gles_interface" grGlInterfaceAssembleGLesInterface :: (Ptr (())) -> (FunPtr (GrGlGetProc)) -> IO (Ptr (GrGlInterface))
-- | `gr_glinterface_assemble_webgl_interface`
foreign import ccall "gr_glinterface_assemble_webgl_interface" grGlInterfaceAssembleWebGlInterface :: (Ptr (())) -> (FunPtr (GrGlGetProc)) -> IO (Ptr (GrGlInterface))
-- | `gr_glinterface_unref`
foreign import ccall "gr_glinterface_unref" grGlInterfaceUnRef :: (Ptr (GrGlInterface)) -> IO (())
-- | `gr_glinterface_validate`
foreign import ccall "gr_glinterface_validate" grGlInterfaceValidate :: (Ptr (GrGlInterface)) -> IO (CBool)
-- | `gr_glinterface_has_extension`
foreign import ccall "gr_glinterface_has_extension" grGlInterfaceHasExtension :: (Ptr (GrGlInterface)) -> (Ptr (CChar)) -> IO (CBool)
-- | `gr_vk_extensions_new`
foreign import ccall "gr_vk_extensions_new" grVkExtensionsNew :: IO (Ptr (GrVkExtensions))
-- | `gr_vk_extensions_delete`
foreign import ccall "gr_vk_extensions_delete" grVkExtensionsDelete :: (Ptr (GrVkExtensions)) -> IO (())
-- | `gr_vk_extensions_init`
foreign import ccall "gr_vk_extensions_init" grVkExtensionsInit :: (Ptr (GrVkExtensions)) -> (FunPtr (GrVkGetProc)) -> (Ptr (())) -> (Ptr (VkInstance)) -> (Ptr (VkPhysicalDevice)) -> (Word32) -> (Ptr (Ptr (CChar))) -> (Word32) -> (Ptr (Ptr (CChar))) -> IO (())
-- | `gr_vk_extensions_has_extension`
foreign import ccall "gr_vk_extensions_has_extension" grVkExtensionsHasExtension :: (Ptr (GrVkExtensions)) -> (Ptr (CChar)) -> (Word32) -> IO (CBool)
-- | `gr_backendtexture_new_gl`
foreign import ccall "gr_backendtexture_new_gl" grBackendTextureNewGl :: (CInt) -> (CInt) -> (CBool) -> (Ptr (GrGlTextureInfo)) -> IO (Ptr (GrBackendTexture))
-- | `gr_backendtexture_new_vulkan`
foreign import ccall "gr_backendtexture_new_vulkan" grBackendTextureNewVuLkAn :: (CInt) -> (CInt) -> (Ptr (GrVkImageInfo)) -> IO (Ptr (GrBackendTexture))
-- | `gr_backendtexture_new_metal`
foreign import ccall "gr_backendtexture_new_metal" grBackendTextureNewMetal :: (CInt) -> (CInt) -> (CBool) -> (Ptr (GrMtLTextureInfo)) -> IO (Ptr (GrBackendTexture))
-- | `gr_backendtexture_new_direct3d`
foreign import ccall "gr_backendtexture_new_direct3d" grBackendTextureNewDirect3D :: (CInt) -> (CInt) -> (Ptr (GrD3dTextureResourceInfo)) -> IO (Ptr (GrBackendTexture))
-- | `gr_backendtexture_delete`
foreign import ccall "gr_backendtexture_delete" grBackendTextureDelete :: (Ptr (GrBackendTexture)) -> IO (())
-- | `gr_backendtexture_is_valid`
foreign import ccall "gr_backendtexture_is_valid" grBackendTextureIsValid :: (Ptr (GrBackendTexture)) -> IO (CBool)
-- | `gr_backendtexture_get_width`
foreign import ccall "gr_backendtexture_get_width" grBackendTextureGetWidth :: (Ptr (GrBackendTexture)) -> IO (CInt)
-- | `gr_backendtexture_get_height`
foreign import ccall "gr_backendtexture_get_height" grBackendTextureGetHeight :: (Ptr (GrBackendTexture)) -> IO (CInt)
-- | `gr_backendtexture_has_mipmaps`
foreign import ccall "gr_backendtexture_has_mipmaps" grBackendTextureHasMIpMaps :: (Ptr (GrBackendTexture)) -> IO (CBool)
-- | `gr_backendtexture_get_backend`
foreign import ccall "gr_backendtexture_get_backend" grBackendTextureGetBackend :: (Ptr (GrBackendTexture)) -> IO (GrBackend)
-- | `gr_backendtexture_get_gl_textureinfo`
foreign import ccall "gr_backendtexture_get_gl_textureinfo" grBackendTextureGetGlTextureInfo :: (Ptr (GrBackendTexture)) -> (Ptr (GrGlTextureInfo)) -> IO (CBool)
-- | `gr_backendrendertarget_new_gl`
foreign import ccall "gr_backendrendertarget_new_gl" grBackendRenderTargetNewGl :: (CInt) -> (CInt) -> (CInt) -> (CInt) -> (Ptr (GrGlFrameBufferInfo)) -> IO (Ptr (GrBackendRenderTarget))
-- | `gr_backendrendertarget_new_vulkan`
foreign import ccall "gr_backendrendertarget_new_vulkan" grBackendRenderTargetNewVuLkAn :: (CInt) -> (CInt) -> (Ptr (GrVkImageInfo)) -> IO (Ptr (GrBackendRenderTarget))
-- | `gr_backendrendertarget_new_metal`
foreign import ccall "gr_backendrendertarget_new_metal" grBackendRenderTargetNewMetal :: (CInt) -> (CInt) -> (Ptr (GrMtLTextureInfo)) -> IO (Ptr (GrBackendRenderTarget))
-- | `gr_backendrendertarget_new_direct3d`
foreign import ccall "gr_backendrendertarget_new_direct3d" grBackendRenderTargetNewDirect3D :: (CInt) -> (CInt) -> (Ptr (GrD3dTextureResourceInfo)) -> IO (Ptr (GrBackendRenderTarget))
-- | `gr_backendrendertarget_delete`
foreign import ccall "gr_backendrendertarget_delete" grBackendRenderTargetDelete :: (Ptr (GrBackendRenderTarget)) -> IO (())
-- | `gr_backendrendertarget_is_valid`
foreign import ccall "gr_backendrendertarget_is_valid" grBackendRenderTargetIsValid :: (Ptr (GrBackendRenderTarget)) -> IO (CBool)
-- | `gr_backendrendertarget_get_width`
foreign import ccall "gr_backendrendertarget_get_width" grBackendRenderTargetGetWidth :: (Ptr (GrBackendRenderTarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_height`
foreign import ccall "gr_backendrendertarget_get_height" grBackendRenderTargetGetHeight :: (Ptr (GrBackendRenderTarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_samples`
foreign import ccall "gr_backendrendertarget_get_samples" grBackendRenderTargetGetSamples :: (Ptr (GrBackendRenderTarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_stencils`
foreign import ccall "gr_backendrendertarget_get_stencils" grBackendRenderTargetGetStencils :: (Ptr (GrBackendRenderTarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_backend`
foreign import ccall "gr_backendrendertarget_get_backend" grBackendRenderTargetGetBackend :: (Ptr (GrBackendRenderTarget)) -> IO (GrBackend)
-- | `gr_backendrendertarget_get_gl_framebufferinfo`
foreign import ccall "gr_backendrendertarget_get_gl_framebufferinfo" grBackendRenderTargetGetGlFrameBufferInfo :: (Ptr (GrBackendRenderTarget)) -> (Ptr (GrGlFrameBufferInfo)) -> IO (CBool)
-- | `sk_drawable_unref`
foreign import ccall "sk_drawable_unref" skDrawAbleUnRef :: (Ptr (SkDrawAble)) -> IO (())
-- | `sk_drawable_get_generation_id`
foreign import ccall "sk_drawable_get_generation_id" skDrawAbleGetGenerationId :: (Ptr (SkDrawAble)) -> IO (Word32)
-- | `sk_drawable_get_bounds`
foreign import ccall "sk_drawable_get_bounds" skDrawAbleGetBounds :: (Ptr (SkDrawAble)) -> (Ptr (SkRect)) -> IO (())
-- | `sk_drawable_draw`
foreign import ccall "sk_drawable_draw" skDrawAbleDraw :: (Ptr (SkDrawAble)) -> (Ptr (SkCanvas)) -> (Ptr (SkMatrix)) -> IO (())
-- | `sk_drawable_new_picture_snapshot`
foreign import ccall "sk_drawable_new_picture_snapshot" skDrawAbleNewPictureSnapshot :: (Ptr (SkDrawAble)) -> IO (Ptr (SkPicture))
-- | `sk_drawable_notify_drawing_changed`
foreign import ccall "sk_drawable_notify_drawing_changed" skDrawAbleNotifyDrawingChanged :: (Ptr (SkDrawAble)) -> IO (())
-- | `sk_drawable_approximate_bytes_used`
foreign import ccall "sk_drawable_approximate_bytes_used" skDrawAbleApproximateBytesUsed :: (Ptr (SkDrawAble)) -> IO (CSize)

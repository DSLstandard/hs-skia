module SkiaSharp.Bindings.Internal.AutoGenerated where

import Foreign
import Foreign.C
import Foreign.C.Types
import Foreign.Storable
import Foreign.Storable.Offset

#include "c/sk_types.h"

-- | `sk_refcnt_t`
data Sk_refcnt = Sk_refcnt
  deriving (Show, Eq, Ord)
-- | `sk_nvrefcnt_t`
data Sk_nvrefcnt = Sk_nvrefcnt
  deriving (Show, Eq, Ord)
-- | `sk_flattenable_t`
data Sk_flattenable = Sk_flattenable
  deriving (Show, Eq, Ord)
-- | `sk_color_t`
type Sk_color = Word32
-- | `sk_pmcolor_t`
type Sk_pmcolor = Word32
-- | `sk_color4f_t`
data Sk_color4f = Sk_color4f
  { fR :: CFloat
  -- ^ `fR`
  , fG :: CFloat
  -- ^ `fG`
  , fB :: CFloat
  -- ^ `fB`
  , fA :: CFloat
  -- ^ `fA`
  } deriving (Show, Eq, Ord)
instance Offset "fR" Sk_color4f where rawOffset = (#offset sk_color4f_t, fR)
instance Offset "fG" Sk_color4f where rawOffset = (#offset sk_color4f_t, fG)
instance Offset "fB" Sk_color4f where rawOffset = (#offset sk_color4f_t, fB)
instance Offset "fA" Sk_color4f where rawOffset = (#offset sk_color4f_t, fA)
instance Storable Sk_color4f where
  sizeOf _ = (#size sk_color4f_t)
  alignment _ = (#alignment sk_color4f_t)
  peek in'ptr = do
    fR <- (#peek sk_color4f_t, fR) in'ptr
    fG <- (#peek sk_color4f_t, fG) in'ptr
    fB <- (#peek sk_color4f_t, fB) in'ptr
    fA <- (#peek sk_color4f_t, fA) in'ptr
    pure Sk_color4f{..}
  poke in'ptr in'value = do
    (#poke sk_color4f_t, fR) in'ptr in'value.fR
    (#poke sk_color4f_t, fG) in'ptr in'value.fG
    (#poke sk_color4f_t, fB) in'ptr in'value.fB
    (#poke sk_color4f_t, fA) in'ptr in'value.fA
-- | `sk_colortype_t`
newtype Sk_colortype = Sk_colortype (#type sk_colortype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_COLORTYPE`
sk_colortype'UNKNOWN_SK_COLORTYPE :: Sk_colortype
sk_colortype'UNKNOWN_SK_COLORTYPE = #const UNKNOWN_SK_COLORTYPE
-- | `ALPHA_8_SK_COLORTYPE`
sk_colortype'ALPHA_8_SK_COLORTYPE :: Sk_colortype
sk_colortype'ALPHA_8_SK_COLORTYPE = #const ALPHA_8_SK_COLORTYPE
-- | `RGB_565_SK_COLORTYPE`
sk_colortype'RGB_565_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGB_565_SK_COLORTYPE = #const RGB_565_SK_COLORTYPE
-- | `ARGB_4444_SK_COLORTYPE`
sk_colortype'ARGB_4444_SK_COLORTYPE :: Sk_colortype
sk_colortype'ARGB_4444_SK_COLORTYPE = #const ARGB_4444_SK_COLORTYPE
-- | `RGBA_8888_SK_COLORTYPE`
sk_colortype'RGBA_8888_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_8888_SK_COLORTYPE = #const RGBA_8888_SK_COLORTYPE
-- | `RGB_888X_SK_COLORTYPE`
sk_colortype'RGB_888X_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGB_888X_SK_COLORTYPE = #const RGB_888X_SK_COLORTYPE
-- | `BGRA_8888_SK_COLORTYPE`
sk_colortype'BGRA_8888_SK_COLORTYPE :: Sk_colortype
sk_colortype'BGRA_8888_SK_COLORTYPE = #const BGRA_8888_SK_COLORTYPE
-- | `RGBA_1010102_SK_COLORTYPE`
sk_colortype'RGBA_1010102_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_1010102_SK_COLORTYPE = #const RGBA_1010102_SK_COLORTYPE
-- | `BGRA_1010102_SK_COLORTYPE`
sk_colortype'BGRA_1010102_SK_COLORTYPE :: Sk_colortype
sk_colortype'BGRA_1010102_SK_COLORTYPE = #const BGRA_1010102_SK_COLORTYPE
-- | `RGB_101010X_SK_COLORTYPE`
sk_colortype'RGB_101010X_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGB_101010X_SK_COLORTYPE = #const RGB_101010X_SK_COLORTYPE
-- | `BGR_101010X_SK_COLORTYPE`
sk_colortype'BGR_101010X_SK_COLORTYPE :: Sk_colortype
sk_colortype'BGR_101010X_SK_COLORTYPE = #const BGR_101010X_SK_COLORTYPE
-- | `BGR_101010X_XR_SK_COLORTYPE`
sk_colortype'BGR_101010X_XR_SK_COLORTYPE :: Sk_colortype
sk_colortype'BGR_101010X_XR_SK_COLORTYPE = #const BGR_101010X_XR_SK_COLORTYPE
-- | `RGBA_10X6_SK_COLORTYPE`
sk_colortype'RGBA_10X6_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_10X6_SK_COLORTYPE = #const RGBA_10X6_SK_COLORTYPE
-- | `GRAY_8_SK_COLORTYPE`
sk_colortype'GRAY_8_SK_COLORTYPE :: Sk_colortype
sk_colortype'GRAY_8_SK_COLORTYPE = #const GRAY_8_SK_COLORTYPE
-- | `RGBA_F16_NORM_SK_COLORTYPE`
sk_colortype'RGBA_F16_NORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_F16_NORM_SK_COLORTYPE = #const RGBA_F16_NORM_SK_COLORTYPE
-- | `RGBA_F16_SK_COLORTYPE`
sk_colortype'RGBA_F16_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_F16_SK_COLORTYPE = #const RGBA_F16_SK_COLORTYPE
-- | `RGBA_F32_SK_COLORTYPE`
sk_colortype'RGBA_F32_SK_COLORTYPE :: Sk_colortype
sk_colortype'RGBA_F32_SK_COLORTYPE = #const RGBA_F32_SK_COLORTYPE
-- | `R8G8_UNORM_SK_COLORTYPE`
sk_colortype'R8G8_UNORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'R8G8_UNORM_SK_COLORTYPE = #const R8G8_UNORM_SK_COLORTYPE
-- | `A16_FLOAT_SK_COLORTYPE`
sk_colortype'A16_FLOAT_SK_COLORTYPE :: Sk_colortype
sk_colortype'A16_FLOAT_SK_COLORTYPE = #const A16_FLOAT_SK_COLORTYPE
-- | `R16G16_FLOAT_SK_COLORTYPE`
sk_colortype'R16G16_FLOAT_SK_COLORTYPE :: Sk_colortype
sk_colortype'R16G16_FLOAT_SK_COLORTYPE = #const R16G16_FLOAT_SK_COLORTYPE
-- | `A16_UNORM_SK_COLORTYPE`
sk_colortype'A16_UNORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'A16_UNORM_SK_COLORTYPE = #const A16_UNORM_SK_COLORTYPE
-- | `R16G16_UNORM_SK_COLORTYPE`
sk_colortype'R16G16_UNORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'R16G16_UNORM_SK_COLORTYPE = #const R16G16_UNORM_SK_COLORTYPE
-- | `R16G16B16A16_UNORM_SK_COLORTYPE`
sk_colortype'R16G16B16A16_UNORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'R16G16B16A16_UNORM_SK_COLORTYPE = #const R16G16B16A16_UNORM_SK_COLORTYPE
-- | `SRGBA_8888_SK_COLORTYPE`
sk_colortype'SRGBA_8888_SK_COLORTYPE :: Sk_colortype
sk_colortype'SRGBA_8888_SK_COLORTYPE = #const SRGBA_8888_SK_COLORTYPE
-- | `R8_UNORM_SK_COLORTYPE`
sk_colortype'R8_UNORM_SK_COLORTYPE :: Sk_colortype
sk_colortype'R8_UNORM_SK_COLORTYPE = #const R8_UNORM_SK_COLORTYPE
-- | `sk_alphatype_t`
newtype Sk_alphatype = Sk_alphatype (#type sk_alphatype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_ALPHATYPE`
sk_alphatype'UNKNOWN_SK_ALPHATYPE :: Sk_alphatype
sk_alphatype'UNKNOWN_SK_ALPHATYPE = #const UNKNOWN_SK_ALPHATYPE
-- | `OPAQUE_SK_ALPHATYPE`
sk_alphatype'OPAQUE_SK_ALPHATYPE :: Sk_alphatype
sk_alphatype'OPAQUE_SK_ALPHATYPE = #const OPAQUE_SK_ALPHATYPE
-- | `PREMUL_SK_ALPHATYPE`
sk_alphatype'PREMUL_SK_ALPHATYPE :: Sk_alphatype
sk_alphatype'PREMUL_SK_ALPHATYPE = #const PREMUL_SK_ALPHATYPE
-- | `UNPREMUL_SK_ALPHATYPE`
sk_alphatype'UNPREMUL_SK_ALPHATYPE :: Sk_alphatype
sk_alphatype'UNPREMUL_SK_ALPHATYPE = #const UNPREMUL_SK_ALPHATYPE
-- | `sk_pixelgeometry_t`
newtype Sk_pixelgeometry = Sk_pixelgeometry (#type sk_pixelgeometry_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UNKNOWN_SK_PIXELGEOMETRY`
sk_pixelgeometry'UNKNOWN_SK_PIXELGEOMETRY :: Sk_pixelgeometry
sk_pixelgeometry'UNKNOWN_SK_PIXELGEOMETRY = #const UNKNOWN_SK_PIXELGEOMETRY
-- | `RGB_H_SK_PIXELGEOMETRY`
sk_pixelgeometry'RGB_H_SK_PIXELGEOMETRY :: Sk_pixelgeometry
sk_pixelgeometry'RGB_H_SK_PIXELGEOMETRY = #const RGB_H_SK_PIXELGEOMETRY
-- | `BGR_H_SK_PIXELGEOMETRY`
sk_pixelgeometry'BGR_H_SK_PIXELGEOMETRY :: Sk_pixelgeometry
sk_pixelgeometry'BGR_H_SK_PIXELGEOMETRY = #const BGR_H_SK_PIXELGEOMETRY
-- | `RGB_V_SK_PIXELGEOMETRY`
sk_pixelgeometry'RGB_V_SK_PIXELGEOMETRY :: Sk_pixelgeometry
sk_pixelgeometry'RGB_V_SK_PIXELGEOMETRY = #const RGB_V_SK_PIXELGEOMETRY
-- | `BGR_V_SK_PIXELGEOMETRY`
sk_pixelgeometry'BGR_V_SK_PIXELGEOMETRY :: Sk_pixelgeometry
sk_pixelgeometry'BGR_V_SK_PIXELGEOMETRY = #const BGR_V_SK_PIXELGEOMETRY
-- | `sk_surfaceprops_flags_t`
newtype Sk_surfaceprops_flags = Sk_surfaceprops_flags (#type sk_surfaceprops_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_SURFACE_PROPS_FLAGS`
sk_surfaceprops_flags'NONE_SK_SURFACE_PROPS_FLAGS :: Sk_surfaceprops_flags
sk_surfaceprops_flags'NONE_SK_SURFACE_PROPS_FLAGS = #const NONE_SK_SURFACE_PROPS_FLAGS
-- | `USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS`
sk_surfaceprops_flags'USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS :: Sk_surfaceprops_flags
sk_surfaceprops_flags'USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS = #const USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS
-- | `sk_surfaceprops_t`
data Sk_surfaceprops = Sk_surfaceprops
  deriving (Show, Eq, Ord)
-- | `sk_point_t`
data Sk_point = Sk_point
  { x :: CFloat
  -- ^ `x`
  , y :: CFloat
  -- ^ `y`
  } deriving (Show, Eq, Ord)
instance Offset "x" Sk_point where rawOffset = (#offset sk_point_t, x)
instance Offset "y" Sk_point where rawOffset = (#offset sk_point_t, y)
instance Storable Sk_point where
  sizeOf _ = (#size sk_point_t)
  alignment _ = (#alignment sk_point_t)
  peek in'ptr = do
    x <- (#peek sk_point_t, x) in'ptr
    y <- (#peek sk_point_t, y) in'ptr
    pure Sk_point{..}
  poke in'ptr in'value = do
    (#poke sk_point_t, x) in'ptr in'value.x
    (#poke sk_point_t, y) in'ptr in'value.y
-- | `sk_vector_t`
type Sk_vector = Sk_point
-- | `sk_irect_t`
data Sk_irect = Sk_irect
  { left :: Int32
  -- ^ `left`
  , top :: Int32
  -- ^ `top`
  , right :: Int32
  -- ^ `right`
  , bottom :: Int32
  -- ^ `bottom`
  } deriving (Show, Eq, Ord)
instance Offset "left" Sk_irect where rawOffset = (#offset sk_irect_t, left)
instance Offset "top" Sk_irect where rawOffset = (#offset sk_irect_t, top)
instance Offset "right" Sk_irect where rawOffset = (#offset sk_irect_t, right)
instance Offset "bottom" Sk_irect where rawOffset = (#offset sk_irect_t, bottom)
instance Storable Sk_irect where
  sizeOf _ = (#size sk_irect_t)
  alignment _ = (#alignment sk_irect_t)
  peek in'ptr = do
    left <- (#peek sk_irect_t, left) in'ptr
    top <- (#peek sk_irect_t, top) in'ptr
    right <- (#peek sk_irect_t, right) in'ptr
    bottom <- (#peek sk_irect_t, bottom) in'ptr
    pure Sk_irect{..}
  poke in'ptr in'value = do
    (#poke sk_irect_t, left) in'ptr in'value.left
    (#poke sk_irect_t, top) in'ptr in'value.top
    (#poke sk_irect_t, right) in'ptr in'value.right
    (#poke sk_irect_t, bottom) in'ptr in'value.bottom
-- | `sk_rect_t`
data Sk_rect = Sk_rect
  { left :: CFloat
  -- ^ `left`
  , top :: CFloat
  -- ^ `top`
  , right :: CFloat
  -- ^ `right`
  , bottom :: CFloat
  -- ^ `bottom`
  } deriving (Show, Eq, Ord)
instance Offset "left" Sk_rect where rawOffset = (#offset sk_rect_t, left)
instance Offset "top" Sk_rect where rawOffset = (#offset sk_rect_t, top)
instance Offset "right" Sk_rect where rawOffset = (#offset sk_rect_t, right)
instance Offset "bottom" Sk_rect where rawOffset = (#offset sk_rect_t, bottom)
instance Storable Sk_rect where
  sizeOf _ = (#size sk_rect_t)
  alignment _ = (#alignment sk_rect_t)
  peek in'ptr = do
    left <- (#peek sk_rect_t, left) in'ptr
    top <- (#peek sk_rect_t, top) in'ptr
    right <- (#peek sk_rect_t, right) in'ptr
    bottom <- (#peek sk_rect_t, bottom) in'ptr
    pure Sk_rect{..}
  poke in'ptr in'value = do
    (#poke sk_rect_t, left) in'ptr in'value.left
    (#poke sk_rect_t, top) in'ptr in'value.top
    (#poke sk_rect_t, right) in'ptr in'value.right
    (#poke sk_rect_t, bottom) in'ptr in'value.bottom
-- | `sk_matrix_t`
data Sk_matrix = Sk_matrix
  { scaleX :: CFloat
  -- ^ `scaleX`
  , skewX :: CFloat
  -- ^ `skewX`
  , transX :: CFloat
  -- ^ `transX`
  , skewY :: CFloat
  -- ^ `skewY`
  , scaleY :: CFloat
  -- ^ `scaleY`
  , transY :: CFloat
  -- ^ `transY`
  , persp0 :: CFloat
  -- ^ `persp0`
  , persp1 :: CFloat
  -- ^ `persp1`
  , persp2 :: CFloat
  -- ^ `persp2`
  } deriving (Show, Eq, Ord)
instance Offset "scaleX" Sk_matrix where rawOffset = (#offset sk_matrix_t, scaleX)
instance Offset "skewX" Sk_matrix where rawOffset = (#offset sk_matrix_t, skewX)
instance Offset "transX" Sk_matrix where rawOffset = (#offset sk_matrix_t, transX)
instance Offset "skewY" Sk_matrix where rawOffset = (#offset sk_matrix_t, skewY)
instance Offset "scaleY" Sk_matrix where rawOffset = (#offset sk_matrix_t, scaleY)
instance Offset "transY" Sk_matrix where rawOffset = (#offset sk_matrix_t, transY)
instance Offset "persp0" Sk_matrix where rawOffset = (#offset sk_matrix_t, persp0)
instance Offset "persp1" Sk_matrix where rawOffset = (#offset sk_matrix_t, persp1)
instance Offset "persp2" Sk_matrix where rawOffset = (#offset sk_matrix_t, persp2)
instance Storable Sk_matrix where
  sizeOf _ = (#size sk_matrix_t)
  alignment _ = (#alignment sk_matrix_t)
  peek in'ptr = do
    scaleX <- (#peek sk_matrix_t, scaleX) in'ptr
    skewX <- (#peek sk_matrix_t, skewX) in'ptr
    transX <- (#peek sk_matrix_t, transX) in'ptr
    skewY <- (#peek sk_matrix_t, skewY) in'ptr
    scaleY <- (#peek sk_matrix_t, scaleY) in'ptr
    transY <- (#peek sk_matrix_t, transY) in'ptr
    persp0 <- (#peek sk_matrix_t, persp0) in'ptr
    persp1 <- (#peek sk_matrix_t, persp1) in'ptr
    persp2 <- (#peek sk_matrix_t, persp2) in'ptr
    pure Sk_matrix{..}
  poke in'ptr in'value = do
    (#poke sk_matrix_t, scaleX) in'ptr in'value.scaleX
    (#poke sk_matrix_t, skewX) in'ptr in'value.skewX
    (#poke sk_matrix_t, transX) in'ptr in'value.transX
    (#poke sk_matrix_t, skewY) in'ptr in'value.skewY
    (#poke sk_matrix_t, scaleY) in'ptr in'value.scaleY
    (#poke sk_matrix_t, transY) in'ptr in'value.transY
    (#poke sk_matrix_t, persp0) in'ptr in'value.persp0
    (#poke sk_matrix_t, persp1) in'ptr in'value.persp1
    (#poke sk_matrix_t, persp2) in'ptr in'value.persp2
-- | `sk_matrix44_t`
data Sk_matrix44 = Sk_matrix44
  { m00 :: CFloat
  -- ^ `m00`
  , m01 :: CFloat
  -- ^ `m01`
  , m02 :: CFloat
  -- ^ `m02`
  , m03 :: CFloat
  -- ^ `m03`
  , m10 :: CFloat
  -- ^ `m10`
  , m11 :: CFloat
  -- ^ `m11`
  , m12 :: CFloat
  -- ^ `m12`
  , m13 :: CFloat
  -- ^ `m13`
  , m20 :: CFloat
  -- ^ `m20`
  , m21 :: CFloat
  -- ^ `m21`
  , m22 :: CFloat
  -- ^ `m22`
  , m23 :: CFloat
  -- ^ `m23`
  , m30 :: CFloat
  -- ^ `m30`
  , m31 :: CFloat
  -- ^ `m31`
  , m32 :: CFloat
  -- ^ `m32`
  , m33 :: CFloat
  -- ^ `m33`
  } deriving (Show, Eq, Ord)
instance Offset "m00" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m00)
instance Offset "m01" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m01)
instance Offset "m02" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m02)
instance Offset "m03" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m03)
instance Offset "m10" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m10)
instance Offset "m11" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m11)
instance Offset "m12" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m12)
instance Offset "m13" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m13)
instance Offset "m20" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m20)
instance Offset "m21" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m21)
instance Offset "m22" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m22)
instance Offset "m23" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m23)
instance Offset "m30" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m30)
instance Offset "m31" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m31)
instance Offset "m32" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m32)
instance Offset "m33" Sk_matrix44 where rawOffset = (#offset sk_matrix44_t, m33)
instance Storable Sk_matrix44 where
  sizeOf _ = (#size sk_matrix44_t)
  alignment _ = (#alignment sk_matrix44_t)
  peek in'ptr = do
    m00 <- (#peek sk_matrix44_t, m00) in'ptr
    m01 <- (#peek sk_matrix44_t, m01) in'ptr
    m02 <- (#peek sk_matrix44_t, m02) in'ptr
    m03 <- (#peek sk_matrix44_t, m03) in'ptr
    m10 <- (#peek sk_matrix44_t, m10) in'ptr
    m11 <- (#peek sk_matrix44_t, m11) in'ptr
    m12 <- (#peek sk_matrix44_t, m12) in'ptr
    m13 <- (#peek sk_matrix44_t, m13) in'ptr
    m20 <- (#peek sk_matrix44_t, m20) in'ptr
    m21 <- (#peek sk_matrix44_t, m21) in'ptr
    m22 <- (#peek sk_matrix44_t, m22) in'ptr
    m23 <- (#peek sk_matrix44_t, m23) in'ptr
    m30 <- (#peek sk_matrix44_t, m30) in'ptr
    m31 <- (#peek sk_matrix44_t, m31) in'ptr
    m32 <- (#peek sk_matrix44_t, m32) in'ptr
    m33 <- (#peek sk_matrix44_t, m33) in'ptr
    pure Sk_matrix44{..}
  poke in'ptr in'value = do
    (#poke sk_matrix44_t, m00) in'ptr in'value.m00
    (#poke sk_matrix44_t, m01) in'ptr in'value.m01
    (#poke sk_matrix44_t, m02) in'ptr in'value.m02
    (#poke sk_matrix44_t, m03) in'ptr in'value.m03
    (#poke sk_matrix44_t, m10) in'ptr in'value.m10
    (#poke sk_matrix44_t, m11) in'ptr in'value.m11
    (#poke sk_matrix44_t, m12) in'ptr in'value.m12
    (#poke sk_matrix44_t, m13) in'ptr in'value.m13
    (#poke sk_matrix44_t, m20) in'ptr in'value.m20
    (#poke sk_matrix44_t, m21) in'ptr in'value.m21
    (#poke sk_matrix44_t, m22) in'ptr in'value.m22
    (#poke sk_matrix44_t, m23) in'ptr in'value.m23
    (#poke sk_matrix44_t, m30) in'ptr in'value.m30
    (#poke sk_matrix44_t, m31) in'ptr in'value.m31
    (#poke sk_matrix44_t, m32) in'ptr in'value.m32
    (#poke sk_matrix44_t, m33) in'ptr in'value.m33
-- | `sk_canvas_t`
data Sk_canvas = Sk_canvas
  deriving (Show, Eq, Ord)
-- | `sk_nodraw_canvas_t`
data Sk_nodraw_canvas = Sk_nodraw_canvas
  deriving (Show, Eq, Ord)
-- | `sk_nway_canvas_t`
data Sk_nway_canvas = Sk_nway_canvas
  deriving (Show, Eq, Ord)
-- | `sk_overdraw_canvas_t`
data Sk_overdraw_canvas = Sk_overdraw_canvas
  deriving (Show, Eq, Ord)
-- | `sk_data_t`
data Sk_data = Sk_data
  deriving (Show, Eq, Ord)
-- | `sk_drawable_t`
data Sk_drawable = Sk_drawable
  deriving (Show, Eq, Ord)
-- | `sk_image_t`
data Sk_image = Sk_image
  deriving (Show, Eq, Ord)
-- | `sk_maskfilter_t`
data Sk_maskfilter = Sk_maskfilter
  deriving (Show, Eq, Ord)
-- | `sk_paint_t`
data Sk_paint = Sk_paint
  deriving (Show, Eq, Ord)
-- | `sk_font_t`
data Sk_font = Sk_font
  deriving (Show, Eq, Ord)
-- | `sk_path_t`
data Sk_path = Sk_path
  deriving (Show, Eq, Ord)
-- | `sk_picture_t`
data Sk_picture = Sk_picture
  deriving (Show, Eq, Ord)
-- | `sk_picture_recorder_t`
data Sk_picture_recorder = Sk_picture_recorder
  deriving (Show, Eq, Ord)
-- | `sk_bbh_factory_t`
data Sk_bbh_factory = Sk_bbh_factory
  deriving (Show, Eq, Ord)
-- | `sk_rtree_factory_t`
data Sk_rtree_factory = Sk_rtree_factory
  deriving (Show, Eq, Ord)
-- | `sk_shader_t`
data Sk_shader = Sk_shader
  deriving (Show, Eq, Ord)
-- | `sk_surface_t`
data Sk_surface = Sk_surface
  deriving (Show, Eq, Ord)
-- | `sk_region_t`
data Sk_region = Sk_region
  deriving (Show, Eq, Ord)
-- | `sk_region_iterator_t`
data Sk_region_iterator = Sk_region_iterator
  deriving (Show, Eq, Ord)
-- | `sk_region_cliperator_t`
data Sk_region_cliperator = Sk_region_cliperator
  deriving (Show, Eq, Ord)
-- | `sk_region_spanerator_t`
data Sk_region_spanerator = Sk_region_spanerator
  deriving (Show, Eq, Ord)
-- | `sk_blendmode_t`
newtype Sk_blendmode = Sk_blendmode (#type sk_blendmode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CLEAR_SK_BLENDMODE`
sk_blendmode'CLEAR_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'CLEAR_SK_BLENDMODE = #const CLEAR_SK_BLENDMODE
-- | `SRC_SK_BLENDMODE`
sk_blendmode'SRC_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SRC_SK_BLENDMODE = #const SRC_SK_BLENDMODE
-- | `DST_SK_BLENDMODE`
sk_blendmode'DST_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DST_SK_BLENDMODE = #const DST_SK_BLENDMODE
-- | `SRCOVER_SK_BLENDMODE`
sk_blendmode'SRCOVER_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SRCOVER_SK_BLENDMODE = #const SRCOVER_SK_BLENDMODE
-- | `DSTOVER_SK_BLENDMODE`
sk_blendmode'DSTOVER_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DSTOVER_SK_BLENDMODE = #const DSTOVER_SK_BLENDMODE
-- | `SRCIN_SK_BLENDMODE`
sk_blendmode'SRCIN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SRCIN_SK_BLENDMODE = #const SRCIN_SK_BLENDMODE
-- | `DSTIN_SK_BLENDMODE`
sk_blendmode'DSTIN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DSTIN_SK_BLENDMODE = #const DSTIN_SK_BLENDMODE
-- | `SRCOUT_SK_BLENDMODE`
sk_blendmode'SRCOUT_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SRCOUT_SK_BLENDMODE = #const SRCOUT_SK_BLENDMODE
-- | `DSTOUT_SK_BLENDMODE`
sk_blendmode'DSTOUT_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DSTOUT_SK_BLENDMODE = #const DSTOUT_SK_BLENDMODE
-- | `SRCATOP_SK_BLENDMODE`
sk_blendmode'SRCATOP_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SRCATOP_SK_BLENDMODE = #const SRCATOP_SK_BLENDMODE
-- | `DSTATOP_SK_BLENDMODE`
sk_blendmode'DSTATOP_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DSTATOP_SK_BLENDMODE = #const DSTATOP_SK_BLENDMODE
-- | `XOR_SK_BLENDMODE`
sk_blendmode'XOR_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'XOR_SK_BLENDMODE = #const XOR_SK_BLENDMODE
-- | `PLUS_SK_BLENDMODE`
sk_blendmode'PLUS_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'PLUS_SK_BLENDMODE = #const PLUS_SK_BLENDMODE
-- | `MODULATE_SK_BLENDMODE`
sk_blendmode'MODULATE_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'MODULATE_SK_BLENDMODE = #const MODULATE_SK_BLENDMODE
-- | `SCREEN_SK_BLENDMODE`
sk_blendmode'SCREEN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SCREEN_SK_BLENDMODE = #const SCREEN_SK_BLENDMODE
-- | `OVERLAY_SK_BLENDMODE`
sk_blendmode'OVERLAY_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'OVERLAY_SK_BLENDMODE = #const OVERLAY_SK_BLENDMODE
-- | `DARKEN_SK_BLENDMODE`
sk_blendmode'DARKEN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DARKEN_SK_BLENDMODE = #const DARKEN_SK_BLENDMODE
-- | `LIGHTEN_SK_BLENDMODE`
sk_blendmode'LIGHTEN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'LIGHTEN_SK_BLENDMODE = #const LIGHTEN_SK_BLENDMODE
-- | `COLORDODGE_SK_BLENDMODE`
sk_blendmode'COLORDODGE_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'COLORDODGE_SK_BLENDMODE = #const COLORDODGE_SK_BLENDMODE
-- | `COLORBURN_SK_BLENDMODE`
sk_blendmode'COLORBURN_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'COLORBURN_SK_BLENDMODE = #const COLORBURN_SK_BLENDMODE
-- | `HARDLIGHT_SK_BLENDMODE`
sk_blendmode'HARDLIGHT_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'HARDLIGHT_SK_BLENDMODE = #const HARDLIGHT_SK_BLENDMODE
-- | `SOFTLIGHT_SK_BLENDMODE`
sk_blendmode'SOFTLIGHT_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SOFTLIGHT_SK_BLENDMODE = #const SOFTLIGHT_SK_BLENDMODE
-- | `DIFFERENCE_SK_BLENDMODE`
sk_blendmode'DIFFERENCE_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'DIFFERENCE_SK_BLENDMODE = #const DIFFERENCE_SK_BLENDMODE
-- | `EXCLUSION_SK_BLENDMODE`
sk_blendmode'EXCLUSION_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'EXCLUSION_SK_BLENDMODE = #const EXCLUSION_SK_BLENDMODE
-- | `MULTIPLY_SK_BLENDMODE`
sk_blendmode'MULTIPLY_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'MULTIPLY_SK_BLENDMODE = #const MULTIPLY_SK_BLENDMODE
-- | `HUE_SK_BLENDMODE`
sk_blendmode'HUE_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'HUE_SK_BLENDMODE = #const HUE_SK_BLENDMODE
-- | `SATURATION_SK_BLENDMODE`
sk_blendmode'SATURATION_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'SATURATION_SK_BLENDMODE = #const SATURATION_SK_BLENDMODE
-- | `COLOR_SK_BLENDMODE`
sk_blendmode'COLOR_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'COLOR_SK_BLENDMODE = #const COLOR_SK_BLENDMODE
-- | `LUMINOSITY_SK_BLENDMODE`
sk_blendmode'LUMINOSITY_SK_BLENDMODE :: Sk_blendmode
sk_blendmode'LUMINOSITY_SK_BLENDMODE = #const LUMINOSITY_SK_BLENDMODE
-- | `sk_point3_t`
data Sk_point3 = Sk_point3
  { x :: CFloat
  -- ^ `x`
  , y :: CFloat
  -- ^ `y`
  , z :: CFloat
  -- ^ `z`
  } deriving (Show, Eq, Ord)
instance Offset "x" Sk_point3 where rawOffset = (#offset sk_point3_t, x)
instance Offset "y" Sk_point3 where rawOffset = (#offset sk_point3_t, y)
instance Offset "z" Sk_point3 where rawOffset = (#offset sk_point3_t, z)
instance Storable Sk_point3 where
  sizeOf _ = (#size sk_point3_t)
  alignment _ = (#alignment sk_point3_t)
  peek in'ptr = do
    x <- (#peek sk_point3_t, x) in'ptr
    y <- (#peek sk_point3_t, y) in'ptr
    z <- (#peek sk_point3_t, z) in'ptr
    pure Sk_point3{..}
  poke in'ptr in'value = do
    (#poke sk_point3_t, x) in'ptr in'value.x
    (#poke sk_point3_t, y) in'ptr in'value.y
    (#poke sk_point3_t, z) in'ptr in'value.z
-- | `sk_ipoint_t`
data Sk_ipoint = Sk_ipoint
  { x :: Int32
  -- ^ `x`
  , y :: Int32
  -- ^ `y`
  } deriving (Show, Eq, Ord)
instance Offset "x" Sk_ipoint where rawOffset = (#offset sk_ipoint_t, x)
instance Offset "y" Sk_ipoint where rawOffset = (#offset sk_ipoint_t, y)
instance Storable Sk_ipoint where
  sizeOf _ = (#size sk_ipoint_t)
  alignment _ = (#alignment sk_ipoint_t)
  peek in'ptr = do
    x <- (#peek sk_ipoint_t, x) in'ptr
    y <- (#peek sk_ipoint_t, y) in'ptr
    pure Sk_ipoint{..}
  poke in'ptr in'value = do
    (#poke sk_ipoint_t, x) in'ptr in'value.x
    (#poke sk_ipoint_t, y) in'ptr in'value.y
-- | `sk_size_t`
data Sk_size = Sk_size
  { w :: CFloat
  -- ^ `w`
  , h :: CFloat
  -- ^ `h`
  } deriving (Show, Eq, Ord)
instance Offset "w" Sk_size where rawOffset = (#offset sk_size_t, w)
instance Offset "h" Sk_size where rawOffset = (#offset sk_size_t, h)
instance Storable Sk_size where
  sizeOf _ = (#size sk_size_t)
  alignment _ = (#alignment sk_size_t)
  peek in'ptr = do
    w <- (#peek sk_size_t, w) in'ptr
    h <- (#peek sk_size_t, h) in'ptr
    pure Sk_size{..}
  poke in'ptr in'value = do
    (#poke sk_size_t, w) in'ptr in'value.w
    (#poke sk_size_t, h) in'ptr in'value.h
-- | `sk_isize_t`
data Sk_isize = Sk_isize
  { w :: Int32
  -- ^ `w`
  , h :: Int32
  -- ^ `h`
  } deriving (Show, Eq, Ord)
instance Offset "w" Sk_isize where rawOffset = (#offset sk_isize_t, w)
instance Offset "h" Sk_isize where rawOffset = (#offset sk_isize_t, h)
instance Storable Sk_isize where
  sizeOf _ = (#size sk_isize_t)
  alignment _ = (#alignment sk_isize_t)
  peek in'ptr = do
    w <- (#peek sk_isize_t, w) in'ptr
    h <- (#peek sk_isize_t, h) in'ptr
    pure Sk_isize{..}
  poke in'ptr in'value = do
    (#poke sk_isize_t, w) in'ptr in'value.w
    (#poke sk_isize_t, h) in'ptr in'value.h
-- | `sk_fontmetrics_t`
data Sk_fontmetrics = Sk_fontmetrics
  { fFlags :: Word32
  -- ^ `fFlags`
  , fTop :: CFloat
  -- ^ `fTop`
  , fAscent :: CFloat
  -- ^ `fAscent`
  , fDescent :: CFloat
  -- ^ `fDescent`
  , fBottom :: CFloat
  -- ^ `fBottom`
  , fLeading :: CFloat
  -- ^ `fLeading`
  , fAvgCharWidth :: CFloat
  -- ^ `fAvgCharWidth`
  , fMaxCharWidth :: CFloat
  -- ^ `fMaxCharWidth`
  , fXMin :: CFloat
  -- ^ `fXMin`
  , fXMax :: CFloat
  -- ^ `fXMax`
  , fXHeight :: CFloat
  -- ^ `fXHeight`
  , fCapHeight :: CFloat
  -- ^ `fCapHeight`
  , fUnderlineThickness :: CFloat
  -- ^ `fUnderlineThickness`
  , fUnderlinePosition :: CFloat
  -- ^ `fUnderlinePosition`
  , fStrikeoutThickness :: CFloat
  -- ^ `fStrikeoutThickness`
  , fStrikeoutPosition :: CFloat
  -- ^ `fStrikeoutPosition`
  } deriving (Show, Eq, Ord)
instance Offset "fFlags" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fFlags)
instance Offset "fTop" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fTop)
instance Offset "fAscent" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fAscent)
instance Offset "fDescent" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fDescent)
instance Offset "fBottom" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fBottom)
instance Offset "fLeading" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fLeading)
instance Offset "fAvgCharWidth" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fAvgCharWidth)
instance Offset "fMaxCharWidth" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fMaxCharWidth)
instance Offset "fXMin" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fXMin)
instance Offset "fXMax" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fXMax)
instance Offset "fXHeight" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fXHeight)
instance Offset "fCapHeight" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fCapHeight)
instance Offset "fUnderlineThickness" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fUnderlineThickness)
instance Offset "fUnderlinePosition" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fUnderlinePosition)
instance Offset "fStrikeoutThickness" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fStrikeoutThickness)
instance Offset "fStrikeoutPosition" Sk_fontmetrics where rawOffset = (#offset sk_fontmetrics_t, fStrikeoutPosition)
instance Storable Sk_fontmetrics where
  sizeOf _ = (#size sk_fontmetrics_t)
  alignment _ = (#alignment sk_fontmetrics_t)
  peek in'ptr = do
    fFlags <- (#peek sk_fontmetrics_t, fFlags) in'ptr
    fTop <- (#peek sk_fontmetrics_t, fTop) in'ptr
    fAscent <- (#peek sk_fontmetrics_t, fAscent) in'ptr
    fDescent <- (#peek sk_fontmetrics_t, fDescent) in'ptr
    fBottom <- (#peek sk_fontmetrics_t, fBottom) in'ptr
    fLeading <- (#peek sk_fontmetrics_t, fLeading) in'ptr
    fAvgCharWidth <- (#peek sk_fontmetrics_t, fAvgCharWidth) in'ptr
    fMaxCharWidth <- (#peek sk_fontmetrics_t, fMaxCharWidth) in'ptr
    fXMin <- (#peek sk_fontmetrics_t, fXMin) in'ptr
    fXMax <- (#peek sk_fontmetrics_t, fXMax) in'ptr
    fXHeight <- (#peek sk_fontmetrics_t, fXHeight) in'ptr
    fCapHeight <- (#peek sk_fontmetrics_t, fCapHeight) in'ptr
    fUnderlineThickness <- (#peek sk_fontmetrics_t, fUnderlineThickness) in'ptr
    fUnderlinePosition <- (#peek sk_fontmetrics_t, fUnderlinePosition) in'ptr
    fStrikeoutThickness <- (#peek sk_fontmetrics_t, fStrikeoutThickness) in'ptr
    fStrikeoutPosition <- (#peek sk_fontmetrics_t, fStrikeoutPosition) in'ptr
    pure Sk_fontmetrics{..}
  poke in'ptr in'value = do
    (#poke sk_fontmetrics_t, fFlags) in'ptr in'value.fFlags
    (#poke sk_fontmetrics_t, fTop) in'ptr in'value.fTop
    (#poke sk_fontmetrics_t, fAscent) in'ptr in'value.fAscent
    (#poke sk_fontmetrics_t, fDescent) in'ptr in'value.fDescent
    (#poke sk_fontmetrics_t, fBottom) in'ptr in'value.fBottom
    (#poke sk_fontmetrics_t, fLeading) in'ptr in'value.fLeading
    (#poke sk_fontmetrics_t, fAvgCharWidth) in'ptr in'value.fAvgCharWidth
    (#poke sk_fontmetrics_t, fMaxCharWidth) in'ptr in'value.fMaxCharWidth
    (#poke sk_fontmetrics_t, fXMin) in'ptr in'value.fXMin
    (#poke sk_fontmetrics_t, fXMax) in'ptr in'value.fXMax
    (#poke sk_fontmetrics_t, fXHeight) in'ptr in'value.fXHeight
    (#poke sk_fontmetrics_t, fCapHeight) in'ptr in'value.fCapHeight
    (#poke sk_fontmetrics_t, fUnderlineThickness) in'ptr in'value.fUnderlineThickness
    (#poke sk_fontmetrics_t, fUnderlinePosition) in'ptr in'value.fUnderlinePosition
    (#poke sk_fontmetrics_t, fStrikeoutThickness) in'ptr in'value.fStrikeoutThickness
    (#poke sk_fontmetrics_t, fStrikeoutPosition) in'ptr in'value.fStrikeoutPosition
-- | `sk_string_t`
data Sk_string = Sk_string
  deriving (Show, Eq, Ord)
-- | `sk_bitmap_t`
data Sk_bitmap = Sk_bitmap
  deriving (Show, Eq, Ord)
-- | `sk_pixmap_t`
data Sk_pixmap = Sk_pixmap
  deriving (Show, Eq, Ord)
-- | `sk_colorfilter_t`
data Sk_colorfilter = Sk_colorfilter
  deriving (Show, Eq, Ord)
-- | `sk_imagefilter_t`
data Sk_imagefilter = Sk_imagefilter
  deriving (Show, Eq, Ord)
-- | `sk_blender_t`
data Sk_blender = Sk_blender
  deriving (Show, Eq, Ord)
-- | `sk_typeface_t`
data Sk_typeface = Sk_typeface
  deriving (Show, Eq, Ord)
-- | `sk_font_table_tag_t`
type Sk_font_table_tag = Word32
-- | `sk_fontmgr_t`
data Sk_fontmgr = Sk_fontmgr
  deriving (Show, Eq, Ord)
-- | `sk_fontstyle_t`
data Sk_fontstyle = Sk_fontstyle
  deriving (Show, Eq, Ord)
-- | `sk_fontstyleset_t`
data Sk_fontstyleset = Sk_fontstyleset
  deriving (Show, Eq, Ord)
-- | `sk_codec_t`
data Sk_codec = Sk_codec
  deriving (Show, Eq, Ord)
-- | `sk_colorspace_t`
data Sk_colorspace = Sk_colorspace
  deriving (Show, Eq, Ord)
-- | `sk_stream_t`
data Sk_stream = Sk_stream
  deriving (Show, Eq, Ord)
-- | `sk_stream_filestream_t`
data Sk_stream_filestream = Sk_stream_filestream
  deriving (Show, Eq, Ord)
-- | `sk_stream_asset_t`
data Sk_stream_asset = Sk_stream_asset
  deriving (Show, Eq, Ord)
-- | `sk_stream_memorystream_t`
data Sk_stream_memorystream = Sk_stream_memorystream
  deriving (Show, Eq, Ord)
-- | `sk_stream_streamrewindable_t`
data Sk_stream_streamrewindable = Sk_stream_streamrewindable
  deriving (Show, Eq, Ord)
-- | `sk_wstream_t`
data Sk_wstream = Sk_wstream
  deriving (Show, Eq, Ord)
-- | `sk_wstream_filestream_t`
data Sk_wstream_filestream = Sk_wstream_filestream
  deriving (Show, Eq, Ord)
-- | `sk_wstream_dynamicmemorystream_t`
data Sk_wstream_dynamicmemorystream = Sk_wstream_dynamicmemorystream
  deriving (Show, Eq, Ord)
-- | `sk_document_t`
data Sk_document = Sk_document
  deriving (Show, Eq, Ord)
-- | `sk_point_mode_t`
newtype Sk_point_mode = Sk_point_mode (#type sk_point_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `POINTS_SK_POINT_MODE`
sk_point_mode'POINTS_SK_POINT_MODE :: Sk_point_mode
sk_point_mode'POINTS_SK_POINT_MODE = #const POINTS_SK_POINT_MODE
-- | `LINES_SK_POINT_MODE`
sk_point_mode'LINES_SK_POINT_MODE :: Sk_point_mode
sk_point_mode'LINES_SK_POINT_MODE = #const LINES_SK_POINT_MODE
-- | `POLYGON_SK_POINT_MODE`
sk_point_mode'POLYGON_SK_POINT_MODE :: Sk_point_mode
sk_point_mode'POLYGON_SK_POINT_MODE = #const POLYGON_SK_POINT_MODE
-- | `sk_text_align_t`
newtype Sk_text_align = Sk_text_align (#type sk_text_align_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LEFT_SK_TEXT_ALIGN`
sk_text_align'LEFT_SK_TEXT_ALIGN :: Sk_text_align
sk_text_align'LEFT_SK_TEXT_ALIGN = #const LEFT_SK_TEXT_ALIGN
-- | `CENTER_SK_TEXT_ALIGN`
sk_text_align'CENTER_SK_TEXT_ALIGN :: Sk_text_align
sk_text_align'CENTER_SK_TEXT_ALIGN = #const CENTER_SK_TEXT_ALIGN
-- | `RIGHT_SK_TEXT_ALIGN`
sk_text_align'RIGHT_SK_TEXT_ALIGN :: Sk_text_align
sk_text_align'RIGHT_SK_TEXT_ALIGN = #const RIGHT_SK_TEXT_ALIGN
-- | `sk_text_encoding_t`
newtype Sk_text_encoding = Sk_text_encoding (#type sk_text_encoding_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UTF8_SK_TEXT_ENCODING`
sk_text_encoding'UTF8_SK_TEXT_ENCODING :: Sk_text_encoding
sk_text_encoding'UTF8_SK_TEXT_ENCODING = #const UTF8_SK_TEXT_ENCODING
-- | `UTF16_SK_TEXT_ENCODING`
sk_text_encoding'UTF16_SK_TEXT_ENCODING :: Sk_text_encoding
sk_text_encoding'UTF16_SK_TEXT_ENCODING = #const UTF16_SK_TEXT_ENCODING
-- | `UTF32_SK_TEXT_ENCODING`
sk_text_encoding'UTF32_SK_TEXT_ENCODING :: Sk_text_encoding
sk_text_encoding'UTF32_SK_TEXT_ENCODING = #const UTF32_SK_TEXT_ENCODING
-- | `GLYPH_ID_SK_TEXT_ENCODING`
sk_text_encoding'GLYPH_ID_SK_TEXT_ENCODING :: Sk_text_encoding
sk_text_encoding'GLYPH_ID_SK_TEXT_ENCODING = #const GLYPH_ID_SK_TEXT_ENCODING
-- | `sk_path_filltype_t`
newtype Sk_path_filltype = Sk_path_filltype (#type sk_path_filltype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `WINDING_SK_PATH_FILLTYPE`
sk_path_filltype'WINDING_SK_PATH_FILLTYPE :: Sk_path_filltype
sk_path_filltype'WINDING_SK_PATH_FILLTYPE = #const WINDING_SK_PATH_FILLTYPE
-- | `EVENODD_SK_PATH_FILLTYPE`
sk_path_filltype'EVENODD_SK_PATH_FILLTYPE :: Sk_path_filltype
sk_path_filltype'EVENODD_SK_PATH_FILLTYPE = #const EVENODD_SK_PATH_FILLTYPE
-- | `INVERSE_WINDING_SK_PATH_FILLTYPE`
sk_path_filltype'INVERSE_WINDING_SK_PATH_FILLTYPE :: Sk_path_filltype
sk_path_filltype'INVERSE_WINDING_SK_PATH_FILLTYPE = #const INVERSE_WINDING_SK_PATH_FILLTYPE
-- | `INVERSE_EVENODD_SK_PATH_FILLTYPE`
sk_path_filltype'INVERSE_EVENODD_SK_PATH_FILLTYPE :: Sk_path_filltype
sk_path_filltype'INVERSE_EVENODD_SK_PATH_FILLTYPE = #const INVERSE_EVENODD_SK_PATH_FILLTYPE
-- | `sk_font_style_slant_t`
newtype Sk_font_style_slant = Sk_font_style_slant (#type sk_font_style_slant_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UPRIGHT_SK_FONT_STYLE_SLANT`
sk_font_style_slant'UPRIGHT_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
sk_font_style_slant'UPRIGHT_SK_FONT_STYLE_SLANT = #const UPRIGHT_SK_FONT_STYLE_SLANT
-- | `ITALIC_SK_FONT_STYLE_SLANT`
sk_font_style_slant'ITALIC_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
sk_font_style_slant'ITALIC_SK_FONT_STYLE_SLANT = #const ITALIC_SK_FONT_STYLE_SLANT
-- | `OBLIQUE_SK_FONT_STYLE_SLANT`
sk_font_style_slant'OBLIQUE_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
sk_font_style_slant'OBLIQUE_SK_FONT_STYLE_SLANT = #const OBLIQUE_SK_FONT_STYLE_SLANT
-- | `sk_color_channel_t`
newtype Sk_color_channel = Sk_color_channel (#type sk_color_channel_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `R_SK_COLOR_CHANNEL`
sk_color_channel'R_SK_COLOR_CHANNEL :: Sk_color_channel
sk_color_channel'R_SK_COLOR_CHANNEL = #const R_SK_COLOR_CHANNEL
-- | `G_SK_COLOR_CHANNEL`
sk_color_channel'G_SK_COLOR_CHANNEL :: Sk_color_channel
sk_color_channel'G_SK_COLOR_CHANNEL = #const G_SK_COLOR_CHANNEL
-- | `B_SK_COLOR_CHANNEL`
sk_color_channel'B_SK_COLOR_CHANNEL :: Sk_color_channel
sk_color_channel'B_SK_COLOR_CHANNEL = #const B_SK_COLOR_CHANNEL
-- | `A_SK_COLOR_CHANNEL`
sk_color_channel'A_SK_COLOR_CHANNEL :: Sk_color_channel
sk_color_channel'A_SK_COLOR_CHANNEL = #const A_SK_COLOR_CHANNEL
-- | `sk_region_op_t`
newtype Sk_region_op = Sk_region_op (#type sk_region_op_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_REGION_OP`
sk_region_op'DIFFERENCE_SK_REGION_OP :: Sk_region_op
sk_region_op'DIFFERENCE_SK_REGION_OP = #const DIFFERENCE_SK_REGION_OP
-- | `INTERSECT_SK_REGION_OP`
sk_region_op'INTERSECT_SK_REGION_OP :: Sk_region_op
sk_region_op'INTERSECT_SK_REGION_OP = #const INTERSECT_SK_REGION_OP
-- | `UNION_SK_REGION_OP`
sk_region_op'UNION_SK_REGION_OP :: Sk_region_op
sk_region_op'UNION_SK_REGION_OP = #const UNION_SK_REGION_OP
-- | `XOR_SK_REGION_OP`
sk_region_op'XOR_SK_REGION_OP :: Sk_region_op
sk_region_op'XOR_SK_REGION_OP = #const XOR_SK_REGION_OP
-- | `REVERSE_DIFFERENCE_SK_REGION_OP`
sk_region_op'REVERSE_DIFFERENCE_SK_REGION_OP :: Sk_region_op
sk_region_op'REVERSE_DIFFERENCE_SK_REGION_OP = #const REVERSE_DIFFERENCE_SK_REGION_OP
-- | `REPLACE_SK_REGION_OP`
sk_region_op'REPLACE_SK_REGION_OP :: Sk_region_op
sk_region_op'REPLACE_SK_REGION_OP = #const REPLACE_SK_REGION_OP
-- | `sk_clipop_t`
newtype Sk_clipop = Sk_clipop (#type sk_clipop_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_CLIPOP`
sk_clipop'DIFFERENCE_SK_CLIPOP :: Sk_clipop
sk_clipop'DIFFERENCE_SK_CLIPOP = #const DIFFERENCE_SK_CLIPOP
-- | `INTERSECT_SK_CLIPOP`
sk_clipop'INTERSECT_SK_CLIPOP :: Sk_clipop
sk_clipop'INTERSECT_SK_CLIPOP = #const INTERSECT_SK_CLIPOP
-- | `sk_encoded_image_format_t`
newtype Sk_encoded_image_format = Sk_encoded_image_format (#type sk_encoded_image_format_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `BMP_SK_ENCODED_FORMAT`
sk_encoded_image_format'BMP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'BMP_SK_ENCODED_FORMAT = #const BMP_SK_ENCODED_FORMAT
-- | `GIF_SK_ENCODED_FORMAT`
sk_encoded_image_format'GIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'GIF_SK_ENCODED_FORMAT = #const GIF_SK_ENCODED_FORMAT
-- | `ICO_SK_ENCODED_FORMAT`
sk_encoded_image_format'ICO_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'ICO_SK_ENCODED_FORMAT = #const ICO_SK_ENCODED_FORMAT
-- | `JPEG_SK_ENCODED_FORMAT`
sk_encoded_image_format'JPEG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'JPEG_SK_ENCODED_FORMAT = #const JPEG_SK_ENCODED_FORMAT
-- | `PNG_SK_ENCODED_FORMAT`
sk_encoded_image_format'PNG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'PNG_SK_ENCODED_FORMAT = #const PNG_SK_ENCODED_FORMAT
-- | `WBMP_SK_ENCODED_FORMAT`
sk_encoded_image_format'WBMP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'WBMP_SK_ENCODED_FORMAT = #const WBMP_SK_ENCODED_FORMAT
-- | `WEBP_SK_ENCODED_FORMAT`
sk_encoded_image_format'WEBP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'WEBP_SK_ENCODED_FORMAT = #const WEBP_SK_ENCODED_FORMAT
-- | `PKM_SK_ENCODED_FORMAT`
sk_encoded_image_format'PKM_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'PKM_SK_ENCODED_FORMAT = #const PKM_SK_ENCODED_FORMAT
-- | `KTX_SK_ENCODED_FORMAT`
sk_encoded_image_format'KTX_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'KTX_SK_ENCODED_FORMAT = #const KTX_SK_ENCODED_FORMAT
-- | `ASTC_SK_ENCODED_FORMAT`
sk_encoded_image_format'ASTC_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'ASTC_SK_ENCODED_FORMAT = #const ASTC_SK_ENCODED_FORMAT
-- | `DNG_SK_ENCODED_FORMAT`
sk_encoded_image_format'DNG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'DNG_SK_ENCODED_FORMAT = #const DNG_SK_ENCODED_FORMAT
-- | `HEIF_SK_ENCODED_FORMAT`
sk_encoded_image_format'HEIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'HEIF_SK_ENCODED_FORMAT = #const HEIF_SK_ENCODED_FORMAT
-- | `AVIF_SK_ENCODED_FORMAT`
sk_encoded_image_format'AVIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'AVIF_SK_ENCODED_FORMAT = #const AVIF_SK_ENCODED_FORMAT
-- | `JPEGXL_SK_ENCODED_FORMAT`
sk_encoded_image_format'JPEGXL_SK_ENCODED_FORMAT :: Sk_encoded_image_format
sk_encoded_image_format'JPEGXL_SK_ENCODED_FORMAT = #const JPEGXL_SK_ENCODED_FORMAT
-- | `sk_encodedorigin_t`
newtype Sk_encodedorigin = Sk_encodedorigin (#type sk_encodedorigin_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_LEFT_SK_ENCODED_ORIGIN`
sk_encodedorigin'TOP_LEFT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'TOP_LEFT_SK_ENCODED_ORIGIN = #const TOP_LEFT_SK_ENCODED_ORIGIN
-- | `TOP_RIGHT_SK_ENCODED_ORIGIN`
sk_encodedorigin'TOP_RIGHT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'TOP_RIGHT_SK_ENCODED_ORIGIN = #const TOP_RIGHT_SK_ENCODED_ORIGIN
-- | `BOTTOM_RIGHT_SK_ENCODED_ORIGIN`
sk_encodedorigin'BOTTOM_RIGHT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'BOTTOM_RIGHT_SK_ENCODED_ORIGIN = #const BOTTOM_RIGHT_SK_ENCODED_ORIGIN
-- | `BOTTOM_LEFT_SK_ENCODED_ORIGIN`
sk_encodedorigin'BOTTOM_LEFT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'BOTTOM_LEFT_SK_ENCODED_ORIGIN = #const BOTTOM_LEFT_SK_ENCODED_ORIGIN
-- | `LEFT_TOP_SK_ENCODED_ORIGIN`
sk_encodedorigin'LEFT_TOP_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'LEFT_TOP_SK_ENCODED_ORIGIN = #const LEFT_TOP_SK_ENCODED_ORIGIN
-- | `RIGHT_TOP_SK_ENCODED_ORIGIN`
sk_encodedorigin'RIGHT_TOP_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'RIGHT_TOP_SK_ENCODED_ORIGIN = #const RIGHT_TOP_SK_ENCODED_ORIGIN
-- | `RIGHT_BOTTOM_SK_ENCODED_ORIGIN`
sk_encodedorigin'RIGHT_BOTTOM_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'RIGHT_BOTTOM_SK_ENCODED_ORIGIN = #const RIGHT_BOTTOM_SK_ENCODED_ORIGIN
-- | `LEFT_BOTTOM_SK_ENCODED_ORIGIN`
sk_encodedorigin'LEFT_BOTTOM_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'LEFT_BOTTOM_SK_ENCODED_ORIGIN = #const LEFT_BOTTOM_SK_ENCODED_ORIGIN
-- | `DEFAULT_SK_ENCODED_ORIGIN`
sk_encodedorigin'DEFAULT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
sk_encodedorigin'DEFAULT_SK_ENCODED_ORIGIN = #const DEFAULT_SK_ENCODED_ORIGIN
-- | `sk_codec_result_t`
newtype Sk_codec_result = Sk_codec_result (#type sk_codec_result_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SUCCESS_SK_CODEC_RESULT`
sk_codec_result'SUCCESS_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'SUCCESS_SK_CODEC_RESULT = #const SUCCESS_SK_CODEC_RESULT
-- | `INCOMPLETE_INPUT_SK_CODEC_RESULT`
sk_codec_result'INCOMPLETE_INPUT_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INCOMPLETE_INPUT_SK_CODEC_RESULT = #const INCOMPLETE_INPUT_SK_CODEC_RESULT
-- | `ERROR_IN_INPUT_SK_CODEC_RESULT`
sk_codec_result'ERROR_IN_INPUT_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'ERROR_IN_INPUT_SK_CODEC_RESULT = #const ERROR_IN_INPUT_SK_CODEC_RESULT
-- | `INVALID_CONVERSION_SK_CODEC_RESULT`
sk_codec_result'INVALID_CONVERSION_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INVALID_CONVERSION_SK_CODEC_RESULT = #const INVALID_CONVERSION_SK_CODEC_RESULT
-- | `INVALID_SCALE_SK_CODEC_RESULT`
sk_codec_result'INVALID_SCALE_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INVALID_SCALE_SK_CODEC_RESULT = #const INVALID_SCALE_SK_CODEC_RESULT
-- | `INVALID_PARAMETERS_SK_CODEC_RESULT`
sk_codec_result'INVALID_PARAMETERS_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INVALID_PARAMETERS_SK_CODEC_RESULT = #const INVALID_PARAMETERS_SK_CODEC_RESULT
-- | `INVALID_INPUT_SK_CODEC_RESULT`
sk_codec_result'INVALID_INPUT_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INVALID_INPUT_SK_CODEC_RESULT = #const INVALID_INPUT_SK_CODEC_RESULT
-- | `COULD_NOT_REWIND_SK_CODEC_RESULT`
sk_codec_result'COULD_NOT_REWIND_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'COULD_NOT_REWIND_SK_CODEC_RESULT = #const COULD_NOT_REWIND_SK_CODEC_RESULT
-- | `INTERNAL_ERROR_SK_CODEC_RESULT`
sk_codec_result'INTERNAL_ERROR_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'INTERNAL_ERROR_SK_CODEC_RESULT = #const INTERNAL_ERROR_SK_CODEC_RESULT
-- | `UNIMPLEMENTED_SK_CODEC_RESULT`
sk_codec_result'UNIMPLEMENTED_SK_CODEC_RESULT :: Sk_codec_result
sk_codec_result'UNIMPLEMENTED_SK_CODEC_RESULT = #const UNIMPLEMENTED_SK_CODEC_RESULT
-- | `sk_codec_zero_initialized_t`
newtype Sk_codec_zero_initialized = Sk_codec_zero_initialized (#type sk_codec_zero_initialized_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `YES_SK_CODEC_ZERO_INITIALIZED`
sk_codec_zero_initialized'YES_SK_CODEC_ZERO_INITIALIZED :: Sk_codec_zero_initialized
sk_codec_zero_initialized'YES_SK_CODEC_ZERO_INITIALIZED = #const YES_SK_CODEC_ZERO_INITIALIZED
-- | `NO_SK_CODEC_ZERO_INITIALIZED`
sk_codec_zero_initialized'NO_SK_CODEC_ZERO_INITIALIZED :: Sk_codec_zero_initialized
sk_codec_zero_initialized'NO_SK_CODEC_ZERO_INITIALIZED = #const NO_SK_CODEC_ZERO_INITIALIZED
-- | `sk_codec_options_t`
data Sk_codec_options = Sk_codec_options
  { fZeroInitialized :: Sk_codec_zero_initialized
  -- ^ `fZeroInitialized`
  , fSubset :: Ptr (Sk_irect)
  -- ^ `fSubset`
  , fFrameIndex :: CInt
  -- ^ `fFrameIndex`
  , fPriorFrame :: CInt
  -- ^ `fPriorFrame`
  } deriving (Show, Eq, Ord)
instance Offset "fZeroInitialized" Sk_codec_options where rawOffset = (#offset sk_codec_options_t, fZeroInitialized)
instance Offset "fSubset" Sk_codec_options where rawOffset = (#offset sk_codec_options_t, fSubset)
instance Offset "fFrameIndex" Sk_codec_options where rawOffset = (#offset sk_codec_options_t, fFrameIndex)
instance Offset "fPriorFrame" Sk_codec_options where rawOffset = (#offset sk_codec_options_t, fPriorFrame)
instance Storable Sk_codec_options where
  sizeOf _ = (#size sk_codec_options_t)
  alignment _ = (#alignment sk_codec_options_t)
  peek in'ptr = do
    fZeroInitialized <- (#peek sk_codec_options_t, fZeroInitialized) in'ptr
    fSubset <- (#peek sk_codec_options_t, fSubset) in'ptr
    fFrameIndex <- (#peek sk_codec_options_t, fFrameIndex) in'ptr
    fPriorFrame <- (#peek sk_codec_options_t, fPriorFrame) in'ptr
    pure Sk_codec_options{..}
  poke in'ptr in'value = do
    (#poke sk_codec_options_t, fZeroInitialized) in'ptr in'value.fZeroInitialized
    (#poke sk_codec_options_t, fSubset) in'ptr in'value.fSubset
    (#poke sk_codec_options_t, fFrameIndex) in'ptr in'value.fFrameIndex
    (#poke sk_codec_options_t, fPriorFrame) in'ptr in'value.fPriorFrame
-- | `sk_codec_scanline_order_t`
newtype Sk_codec_scanline_order = Sk_codec_scanline_order (#type sk_codec_scanline_order_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_DOWN_SK_CODEC_SCANLINE_ORDER`
sk_codec_scanline_order'TOP_DOWN_SK_CODEC_SCANLINE_ORDER :: Sk_codec_scanline_order
sk_codec_scanline_order'TOP_DOWN_SK_CODEC_SCANLINE_ORDER = #const TOP_DOWN_SK_CODEC_SCANLINE_ORDER
-- | `BOTTOM_UP_SK_CODEC_SCANLINE_ORDER`
sk_codec_scanline_order'BOTTOM_UP_SK_CODEC_SCANLINE_ORDER :: Sk_codec_scanline_order
sk_codec_scanline_order'BOTTOM_UP_SK_CODEC_SCANLINE_ORDER = #const BOTTOM_UP_SK_CODEC_SCANLINE_ORDER
-- | `sk_path_verb_t`
newtype Sk_path_verb = Sk_path_verb (#type sk_path_verb_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `MOVE_SK_PATH_VERB`
sk_path_verb'MOVE_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'MOVE_SK_PATH_VERB = #const MOVE_SK_PATH_VERB
-- | `LINE_SK_PATH_VERB`
sk_path_verb'LINE_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'LINE_SK_PATH_VERB = #const LINE_SK_PATH_VERB
-- | `QUAD_SK_PATH_VERB`
sk_path_verb'QUAD_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'QUAD_SK_PATH_VERB = #const QUAD_SK_PATH_VERB
-- | `CONIC_SK_PATH_VERB`
sk_path_verb'CONIC_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'CONIC_SK_PATH_VERB = #const CONIC_SK_PATH_VERB
-- | `CUBIC_SK_PATH_VERB`
sk_path_verb'CUBIC_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'CUBIC_SK_PATH_VERB = #const CUBIC_SK_PATH_VERB
-- | `CLOSE_SK_PATH_VERB`
sk_path_verb'CLOSE_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'CLOSE_SK_PATH_VERB = #const CLOSE_SK_PATH_VERB
-- | `DONE_SK_PATH_VERB`
sk_path_verb'DONE_SK_PATH_VERB :: Sk_path_verb
sk_path_verb'DONE_SK_PATH_VERB = #const DONE_SK_PATH_VERB
-- | `sk_path_iterator_t`
data Sk_path_iterator = Sk_path_iterator
  deriving (Show, Eq, Ord)
-- | `sk_path_rawiterator_t`
data Sk_path_rawiterator = Sk_path_rawiterator
  deriving (Show, Eq, Ord)
-- | `sk_path_add_mode_t`
newtype Sk_path_add_mode = Sk_path_add_mode (#type sk_path_add_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `APPEND_SK_PATH_ADD_MODE`
sk_path_add_mode'APPEND_SK_PATH_ADD_MODE :: Sk_path_add_mode
sk_path_add_mode'APPEND_SK_PATH_ADD_MODE = #const APPEND_SK_PATH_ADD_MODE
-- | `EXTEND_SK_PATH_ADD_MODE`
sk_path_add_mode'EXTEND_SK_PATH_ADD_MODE :: Sk_path_add_mode
sk_path_add_mode'EXTEND_SK_PATH_ADD_MODE = #const EXTEND_SK_PATH_ADD_MODE
-- | `sk_path_segment_mask_t`
newtype Sk_path_segment_mask = Sk_path_segment_mask (#type sk_path_segment_mask_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LINE_SK_PATH_SEGMENT_MASK`
sk_path_segment_mask'LINE_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
sk_path_segment_mask'LINE_SK_PATH_SEGMENT_MASK = #const LINE_SK_PATH_SEGMENT_MASK
-- | `QUAD_SK_PATH_SEGMENT_MASK`
sk_path_segment_mask'QUAD_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
sk_path_segment_mask'QUAD_SK_PATH_SEGMENT_MASK = #const QUAD_SK_PATH_SEGMENT_MASK
-- | `CONIC_SK_PATH_SEGMENT_MASK`
sk_path_segment_mask'CONIC_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
sk_path_segment_mask'CONIC_SK_PATH_SEGMENT_MASK = #const CONIC_SK_PATH_SEGMENT_MASK
-- | `CUBIC_SK_PATH_SEGMENT_MASK`
sk_path_segment_mask'CUBIC_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
sk_path_segment_mask'CUBIC_SK_PATH_SEGMENT_MASK = #const CUBIC_SK_PATH_SEGMENT_MASK
-- | `sk_path_effect_1d_style_t`
newtype Sk_path_effect_1d_style = Sk_path_effect_1d_style (#type sk_path_effect_1d_style_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TRANSLATE_SK_PATH_EFFECT_1D_STYLE`
sk_path_effect_1d_style'TRANSLATE_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
sk_path_effect_1d_style'TRANSLATE_SK_PATH_EFFECT_1D_STYLE = #const TRANSLATE_SK_PATH_EFFECT_1D_STYLE
-- | `ROTATE_SK_PATH_EFFECT_1D_STYLE`
sk_path_effect_1d_style'ROTATE_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
sk_path_effect_1d_style'ROTATE_SK_PATH_EFFECT_1D_STYLE = #const ROTATE_SK_PATH_EFFECT_1D_STYLE
-- | `MORPH_SK_PATH_EFFECT_1D_STYLE`
sk_path_effect_1d_style'MORPH_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
sk_path_effect_1d_style'MORPH_SK_PATH_EFFECT_1D_STYLE = #const MORPH_SK_PATH_EFFECT_1D_STYLE
-- | `sk_path_effect_trim_mode_t`
newtype Sk_path_effect_trim_mode = Sk_path_effect_trim_mode (#type sk_path_effect_trim_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NORMAL_SK_PATH_EFFECT_TRIM_MODE`
sk_path_effect_trim_mode'NORMAL_SK_PATH_EFFECT_TRIM_MODE :: Sk_path_effect_trim_mode
sk_path_effect_trim_mode'NORMAL_SK_PATH_EFFECT_TRIM_MODE = #const NORMAL_SK_PATH_EFFECT_TRIM_MODE
-- | `INVERTED_SK_PATH_EFFECT_TRIM_MODE`
sk_path_effect_trim_mode'INVERTED_SK_PATH_EFFECT_TRIM_MODE :: Sk_path_effect_trim_mode
sk_path_effect_trim_mode'INVERTED_SK_PATH_EFFECT_TRIM_MODE = #const INVERTED_SK_PATH_EFFECT_TRIM_MODE
-- | `sk_path_effect_t`
data Sk_path_effect = Sk_path_effect
  deriving (Show, Eq, Ord)
-- | `sk_stroke_cap_t`
newtype Sk_stroke_cap = Sk_stroke_cap (#type sk_stroke_cap_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `BUTT_SK_STROKE_CAP`
sk_stroke_cap'BUTT_SK_STROKE_CAP :: Sk_stroke_cap
sk_stroke_cap'BUTT_SK_STROKE_CAP = #const BUTT_SK_STROKE_CAP
-- | `ROUND_SK_STROKE_CAP`
sk_stroke_cap'ROUND_SK_STROKE_CAP :: Sk_stroke_cap
sk_stroke_cap'ROUND_SK_STROKE_CAP = #const ROUND_SK_STROKE_CAP
-- | `SQUARE_SK_STROKE_CAP`
sk_stroke_cap'SQUARE_SK_STROKE_CAP :: Sk_stroke_cap
sk_stroke_cap'SQUARE_SK_STROKE_CAP = #const SQUARE_SK_STROKE_CAP
-- | `sk_stroke_join_t`
newtype Sk_stroke_join = Sk_stroke_join (#type sk_stroke_join_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `MITER_SK_STROKE_JOIN`
sk_stroke_join'MITER_SK_STROKE_JOIN :: Sk_stroke_join
sk_stroke_join'MITER_SK_STROKE_JOIN = #const MITER_SK_STROKE_JOIN
-- | `ROUND_SK_STROKE_JOIN`
sk_stroke_join'ROUND_SK_STROKE_JOIN :: Sk_stroke_join
sk_stroke_join'ROUND_SK_STROKE_JOIN = #const ROUND_SK_STROKE_JOIN
-- | `BEVEL_SK_STROKE_JOIN`
sk_stroke_join'BEVEL_SK_STROKE_JOIN :: Sk_stroke_join
sk_stroke_join'BEVEL_SK_STROKE_JOIN = #const BEVEL_SK_STROKE_JOIN
-- | `sk_shader_tilemode_t`
newtype Sk_shader_tilemode = Sk_shader_tilemode (#type sk_shader_tilemode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CLAMP_SK_SHADER_TILEMODE`
sk_shader_tilemode'CLAMP_SK_SHADER_TILEMODE :: Sk_shader_tilemode
sk_shader_tilemode'CLAMP_SK_SHADER_TILEMODE = #const CLAMP_SK_SHADER_TILEMODE
-- | `REPEAT_SK_SHADER_TILEMODE`
sk_shader_tilemode'REPEAT_SK_SHADER_TILEMODE :: Sk_shader_tilemode
sk_shader_tilemode'REPEAT_SK_SHADER_TILEMODE = #const REPEAT_SK_SHADER_TILEMODE
-- | `MIRROR_SK_SHADER_TILEMODE`
sk_shader_tilemode'MIRROR_SK_SHADER_TILEMODE :: Sk_shader_tilemode
sk_shader_tilemode'MIRROR_SK_SHADER_TILEMODE = #const MIRROR_SK_SHADER_TILEMODE
-- | `DECAL_SK_SHADER_TILEMODE`
sk_shader_tilemode'DECAL_SK_SHADER_TILEMODE :: Sk_shader_tilemode
sk_shader_tilemode'DECAL_SK_SHADER_TILEMODE = #const DECAL_SK_SHADER_TILEMODE
-- | `sk_blurstyle_t`
newtype Sk_blurstyle = Sk_blurstyle (#type sk_blurstyle_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NORMAL_SK_BLUR_STYLE`
sk_blurstyle'NORMAL_SK_BLUR_STYLE :: Sk_blurstyle
sk_blurstyle'NORMAL_SK_BLUR_STYLE = #const NORMAL_SK_BLUR_STYLE
-- | `SOLID_SK_BLUR_STYLE`
sk_blurstyle'SOLID_SK_BLUR_STYLE :: Sk_blurstyle
sk_blurstyle'SOLID_SK_BLUR_STYLE = #const SOLID_SK_BLUR_STYLE
-- | `OUTER_SK_BLUR_STYLE`
sk_blurstyle'OUTER_SK_BLUR_STYLE :: Sk_blurstyle
sk_blurstyle'OUTER_SK_BLUR_STYLE = #const OUTER_SK_BLUR_STYLE
-- | `INNER_SK_BLUR_STYLE`
sk_blurstyle'INNER_SK_BLUR_STYLE :: Sk_blurstyle
sk_blurstyle'INNER_SK_BLUR_STYLE = #const INNER_SK_BLUR_STYLE
-- | `sk_path_direction_t`
newtype Sk_path_direction = Sk_path_direction (#type sk_path_direction_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `CW_SK_PATH_DIRECTION`
sk_path_direction'CW_SK_PATH_DIRECTION :: Sk_path_direction
sk_path_direction'CW_SK_PATH_DIRECTION = #const CW_SK_PATH_DIRECTION
-- | `CCW_SK_PATH_DIRECTION`
sk_path_direction'CCW_SK_PATH_DIRECTION :: Sk_path_direction
sk_path_direction'CCW_SK_PATH_DIRECTION = #const CCW_SK_PATH_DIRECTION
-- | `sk_path_arc_size_t`
newtype Sk_path_arc_size = Sk_path_arc_size (#type sk_path_arc_size_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SMALL_SK_PATH_ARC_SIZE`
sk_path_arc_size'SMALL_SK_PATH_ARC_SIZE :: Sk_path_arc_size
sk_path_arc_size'SMALL_SK_PATH_ARC_SIZE = #const SMALL_SK_PATH_ARC_SIZE
-- | `LARGE_SK_PATH_ARC_SIZE`
sk_path_arc_size'LARGE_SK_PATH_ARC_SIZE :: Sk_path_arc_size
sk_path_arc_size'LARGE_SK_PATH_ARC_SIZE = #const LARGE_SK_PATH_ARC_SIZE
-- | `sk_paint_style_t`
newtype Sk_paint_style = Sk_paint_style (#type sk_paint_style_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `FILL_SK_PAINT_STYLE`
sk_paint_style'FILL_SK_PAINT_STYLE :: Sk_paint_style
sk_paint_style'FILL_SK_PAINT_STYLE = #const FILL_SK_PAINT_STYLE
-- | `STROKE_SK_PAINT_STYLE`
sk_paint_style'STROKE_SK_PAINT_STYLE :: Sk_paint_style
sk_paint_style'STROKE_SK_PAINT_STYLE = #const STROKE_SK_PAINT_STYLE
-- | `STROKE_AND_FILL_SK_PAINT_STYLE`
sk_paint_style'STROKE_AND_FILL_SK_PAINT_STYLE :: Sk_paint_style
sk_paint_style'STROKE_AND_FILL_SK_PAINT_STYLE = #const STROKE_AND_FILL_SK_PAINT_STYLE
-- | `sk_font_hinting_t`
newtype Sk_font_hinting = Sk_font_hinting (#type sk_font_hinting_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_FONT_HINTING`
sk_font_hinting'NONE_SK_FONT_HINTING :: Sk_font_hinting
sk_font_hinting'NONE_SK_FONT_HINTING = #const NONE_SK_FONT_HINTING
-- | `SLIGHT_SK_FONT_HINTING`
sk_font_hinting'SLIGHT_SK_FONT_HINTING :: Sk_font_hinting
sk_font_hinting'SLIGHT_SK_FONT_HINTING = #const SLIGHT_SK_FONT_HINTING
-- | `NORMAL_SK_FONT_HINTING`
sk_font_hinting'NORMAL_SK_FONT_HINTING :: Sk_font_hinting
sk_font_hinting'NORMAL_SK_FONT_HINTING = #const NORMAL_SK_FONT_HINTING
-- | `FULL_SK_FONT_HINTING`
sk_font_hinting'FULL_SK_FONT_HINTING :: Sk_font_hinting
sk_font_hinting'FULL_SK_FONT_HINTING = #const FULL_SK_FONT_HINTING
-- | `sk_font_edging_t`
newtype Sk_font_edging = Sk_font_edging (#type sk_font_edging_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ALIAS_SK_FONT_EDGING`
sk_font_edging'ALIAS_SK_FONT_EDGING :: Sk_font_edging
sk_font_edging'ALIAS_SK_FONT_EDGING = #const ALIAS_SK_FONT_EDGING
-- | `ANTIALIAS_SK_FONT_EDGING`
sk_font_edging'ANTIALIAS_SK_FONT_EDGING :: Sk_font_edging
sk_font_edging'ANTIALIAS_SK_FONT_EDGING = #const ANTIALIAS_SK_FONT_EDGING
-- | `SUBPIXEL_ANTIALIAS_SK_FONT_EDGING`
sk_font_edging'SUBPIXEL_ANTIALIAS_SK_FONT_EDGING :: Sk_font_edging
sk_font_edging'SUBPIXEL_ANTIALIAS_SK_FONT_EDGING = #const SUBPIXEL_ANTIALIAS_SK_FONT_EDGING
-- | `sk_pixelref_factory_t`
data Sk_pixelref_factory = Sk_pixelref_factory
  deriving (Show, Eq, Ord)
-- | `gr_surfaceorigin_t`
newtype Gr_surfaceorigin = Gr_surfaceorigin (#type gr_surfaceorigin_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TOP_LEFT_GR_SURFACE_ORIGIN`
gr_surfaceorigin'TOP_LEFT_GR_SURFACE_ORIGIN :: Gr_surfaceorigin
gr_surfaceorigin'TOP_LEFT_GR_SURFACE_ORIGIN = #const TOP_LEFT_GR_SURFACE_ORIGIN
-- | `BOTTOM_LEFT_GR_SURFACE_ORIGIN`
gr_surfaceorigin'BOTTOM_LEFT_GR_SURFACE_ORIGIN :: Gr_surfaceorigin
gr_surfaceorigin'BOTTOM_LEFT_GR_SURFACE_ORIGIN = #const BOTTOM_LEFT_GR_SURFACE_ORIGIN
-- | `gr_context_options_t`
data Gr_context_options = Gr_context_options
  { fAvoidStencilBuffers :: CBool
  -- ^ `fAvoidStencilBuffers`
  , fRuntimeProgramCacheSize :: CInt
  -- ^ `fRuntimeProgramCacheSize`
  , fGlyphCacheTextureMaximumBytes :: CSize
  -- ^ `fGlyphCacheTextureMaximumBytes`
  , fAllowPathMaskCaching :: CBool
  -- ^ `fAllowPathMaskCaching`
  , fDoManualMipmapping :: CBool
  -- ^ `fDoManualMipmapping`
  , fBufferMapThreshold :: CInt
  -- ^ `fBufferMapThreshold`
  } deriving (Show, Eq, Ord)
instance Offset "fAvoidStencilBuffers" Gr_context_options where rawOffset = (#offset gr_context_options_t, fAvoidStencilBuffers)
instance Offset "fRuntimeProgramCacheSize" Gr_context_options where rawOffset = (#offset gr_context_options_t, fRuntimeProgramCacheSize)
instance Offset "fGlyphCacheTextureMaximumBytes" Gr_context_options where rawOffset = (#offset gr_context_options_t, fGlyphCacheTextureMaximumBytes)
instance Offset "fAllowPathMaskCaching" Gr_context_options where rawOffset = (#offset gr_context_options_t, fAllowPathMaskCaching)
instance Offset "fDoManualMipmapping" Gr_context_options where rawOffset = (#offset gr_context_options_t, fDoManualMipmapping)
instance Offset "fBufferMapThreshold" Gr_context_options where rawOffset = (#offset gr_context_options_t, fBufferMapThreshold)
instance Storable Gr_context_options where
  sizeOf _ = (#size gr_context_options_t)
  alignment _ = (#alignment gr_context_options_t)
  peek in'ptr = do
    fAvoidStencilBuffers <- (#peek gr_context_options_t, fAvoidStencilBuffers) in'ptr
    fRuntimeProgramCacheSize <- (#peek gr_context_options_t, fRuntimeProgramCacheSize) in'ptr
    fGlyphCacheTextureMaximumBytes <- (#peek gr_context_options_t, fGlyphCacheTextureMaximumBytes) in'ptr
    fAllowPathMaskCaching <- (#peek gr_context_options_t, fAllowPathMaskCaching) in'ptr
    fDoManualMipmapping <- (#peek gr_context_options_t, fDoManualMipmapping) in'ptr
    fBufferMapThreshold <- (#peek gr_context_options_t, fBufferMapThreshold) in'ptr
    pure Gr_context_options{..}
  poke in'ptr in'value = do
    (#poke gr_context_options_t, fAvoidStencilBuffers) in'ptr in'value.fAvoidStencilBuffers
    (#poke gr_context_options_t, fRuntimeProgramCacheSize) in'ptr in'value.fRuntimeProgramCacheSize
    (#poke gr_context_options_t, fGlyphCacheTextureMaximumBytes) in'ptr in'value.fGlyphCacheTextureMaximumBytes
    (#poke gr_context_options_t, fAllowPathMaskCaching) in'ptr in'value.fAllowPathMaskCaching
    (#poke gr_context_options_t, fDoManualMipmapping) in'ptr in'value.fDoManualMipmapping
    (#poke gr_context_options_t, fBufferMapThreshold) in'ptr in'value.fBufferMapThreshold
-- | `gr_backendobject_t`
type Gr_backendobject = CIntPtr
-- | `gr_backendrendertarget_t`
data Gr_backendrendertarget = Gr_backendrendertarget
  deriving (Show, Eq, Ord)
-- | `gr_backendtexture_t`
data Gr_backendtexture = Gr_backendtexture
  deriving (Show, Eq, Ord)
-- | `gr_direct_context_t`
data Gr_direct_context = Gr_direct_context
  deriving (Show, Eq, Ord)
-- | `gr_recording_context_t`
data Gr_recording_context = Gr_recording_context
  deriving (Show, Eq, Ord)
-- | `gr_backend_t`
newtype Gr_backend = Gr_backend (#type gr_backend_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `OPENGL_GR_BACKEND`
gr_backend'OPENGL_GR_BACKEND :: Gr_backend
gr_backend'OPENGL_GR_BACKEND = #const OPENGL_GR_BACKEND
-- | `VULKAN_GR_BACKEND`
gr_backend'VULKAN_GR_BACKEND :: Gr_backend
gr_backend'VULKAN_GR_BACKEND = #const VULKAN_GR_BACKEND
-- | `METAL_GR_BACKEND`
gr_backend'METAL_GR_BACKEND :: Gr_backend
gr_backend'METAL_GR_BACKEND = #const METAL_GR_BACKEND
-- | `DIRECT3D_GR_BACKEND`
gr_backend'DIRECT3D_GR_BACKEND :: Gr_backend
gr_backend'DIRECT3D_GR_BACKEND = #const DIRECT3D_GR_BACKEND
-- | `UNSUPPORTED_GR_BACKEND`
gr_backend'UNSUPPORTED_GR_BACKEND :: Gr_backend
gr_backend'UNSUPPORTED_GR_BACKEND = #const UNSUPPORTED_GR_BACKEND
-- | `gr_backendcontext_t`
type Gr_backendcontext = CIntPtr
-- | `gr_glinterface_t`
data Gr_glinterface = Gr_glinterface
  deriving (Show, Eq, Ord)
-- | `gr_gl_func_ptr`
type Gr_gl_func_ptr = IO (())
-- | `gr_gl_get_proc`
type Gr_gl_get_proc = (Ptr (())) -> (Ptr (CChar)) -> IO (FunPtr (Gr_gl_func_ptr))
-- | `gr_gl_textureinfo_t`
data Gr_gl_textureinfo = Gr_gl_textureinfo
  { fTarget :: CUInt
  -- ^ `fTarget`
  , fID :: CUInt
  -- ^ `fID`
  , fFormat :: CUInt
  -- ^ `fFormat`
  , fProtected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "fTarget" Gr_gl_textureinfo where rawOffset = (#offset gr_gl_textureinfo_t, fTarget)
instance Offset "fID" Gr_gl_textureinfo where rawOffset = (#offset gr_gl_textureinfo_t, fID)
instance Offset "fFormat" Gr_gl_textureinfo where rawOffset = (#offset gr_gl_textureinfo_t, fFormat)
instance Offset "fProtected" Gr_gl_textureinfo where rawOffset = (#offset gr_gl_textureinfo_t, fProtected)
instance Storable Gr_gl_textureinfo where
  sizeOf _ = (#size gr_gl_textureinfo_t)
  alignment _ = (#alignment gr_gl_textureinfo_t)
  peek in'ptr = do
    fTarget <- (#peek gr_gl_textureinfo_t, fTarget) in'ptr
    fID <- (#peek gr_gl_textureinfo_t, fID) in'ptr
    fFormat <- (#peek gr_gl_textureinfo_t, fFormat) in'ptr
    fProtected <- (#peek gr_gl_textureinfo_t, fProtected) in'ptr
    pure Gr_gl_textureinfo{..}
  poke in'ptr in'value = do
    (#poke gr_gl_textureinfo_t, fTarget) in'ptr in'value.fTarget
    (#poke gr_gl_textureinfo_t, fID) in'ptr in'value.fID
    (#poke gr_gl_textureinfo_t, fFormat) in'ptr in'value.fFormat
    (#poke gr_gl_textureinfo_t, fProtected) in'ptr in'value.fProtected
-- | `gr_gl_framebufferinfo_t`
data Gr_gl_framebufferinfo = Gr_gl_framebufferinfo
  { fFBOID :: CUInt
  -- ^ `fFBOID`
  , fFormat :: CUInt
  -- ^ `fFormat`
  , fProtected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "fFBOID" Gr_gl_framebufferinfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fFBOID)
instance Offset "fFormat" Gr_gl_framebufferinfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fFormat)
instance Offset "fProtected" Gr_gl_framebufferinfo where rawOffset = (#offset gr_gl_framebufferinfo_t, fProtected)
instance Storable Gr_gl_framebufferinfo where
  sizeOf _ = (#size gr_gl_framebufferinfo_t)
  alignment _ = (#alignment gr_gl_framebufferinfo_t)
  peek in'ptr = do
    fFBOID <- (#peek gr_gl_framebufferinfo_t, fFBOID) in'ptr
    fFormat <- (#peek gr_gl_framebufferinfo_t, fFormat) in'ptr
    fProtected <- (#peek gr_gl_framebufferinfo_t, fProtected) in'ptr
    pure Gr_gl_framebufferinfo{..}
  poke in'ptr in'value = do
    (#poke gr_gl_framebufferinfo_t, fFBOID) in'ptr in'value.fFBOID
    (#poke gr_gl_framebufferinfo_t, fFormat) in'ptr in'value.fFormat
    (#poke gr_gl_framebufferinfo_t, fProtected) in'ptr in'value.fProtected
-- | `vk_instance_t`
data Vk_instance = Vk_instance
  deriving (Show, Eq, Ord)
-- | `gr_vkinterface_t`
data Gr_vkinterface = Gr_vkinterface
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_t`
data Vk_physical_device = Vk_physical_device
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_features_t`
data Vk_physical_device_features = Vk_physical_device_features
  deriving (Show, Eq, Ord)
-- | `vk_physical_device_features_2_t`
data Vk_physical_device_features_2 = Vk_physical_device_features_2
  deriving (Show, Eq, Ord)
-- | `vk_device_t`
data Vk_device = Vk_device
  deriving (Show, Eq, Ord)
-- | `vk_queue_t`
data Vk_queue = Vk_queue
  deriving (Show, Eq, Ord)
-- | `gr_vk_extensions_t`
data Gr_vk_extensions = Gr_vk_extensions
  deriving (Show, Eq, Ord)
-- | `gr_vk_memory_allocator_t`
data Gr_vk_memory_allocator = Gr_vk_memory_allocator
  deriving (Show, Eq, Ord)
-- | `gr_vk_func_ptr`
type Gr_vk_func_ptr = IO (())
-- | `gr_vk_get_proc`
type Gr_vk_get_proc = (Ptr (())) -> (Ptr (CChar)) -> (Ptr (Vk_instance)) -> (Ptr (Vk_device)) -> IO (FunPtr (Gr_vk_func_ptr))
-- | `gr_vk_backendcontext_t`
data Gr_vk_backendcontext = Gr_vk_backendcontext
  { fInstance :: Ptr (Vk_instance)
  -- ^ `fInstance`
  , fPhysicalDevice :: Ptr (Vk_physical_device)
  -- ^ `fPhysicalDevice`
  , fDevice :: Ptr (Vk_device)
  -- ^ `fDevice`
  , fQueue :: Ptr (Vk_queue)
  -- ^ `fQueue`
  , fGraphicsQueueIndex :: Word32
  -- ^ `fGraphicsQueueIndex`
  , fMinAPIVersion :: Word32
  -- ^ `fMinAPIVersion`
  , fInstanceVersion :: Word32
  -- ^ `fInstanceVersion`
  , fMaxAPIVersion :: Word32
  -- ^ `fMaxAPIVersion`
  , fExtensions :: Word32
  -- ^ `fExtensions`
  , fVkExtensions :: Ptr (Gr_vk_extensions)
  -- ^ `fVkExtensions`
  , fFeatures :: Word32
  -- ^ `fFeatures`
  , fDeviceFeatures :: Ptr (Vk_physical_device_features)
  -- ^ `fDeviceFeatures`
  , fDeviceFeatures2 :: Ptr (Vk_physical_device_features_2)
  -- ^ `fDeviceFeatures2`
  , fMemoryAllocator :: Ptr (Gr_vk_memory_allocator)
  -- ^ `fMemoryAllocator`
  , fGetProc :: FunPtr (Gr_vk_get_proc)
  -- ^ `fGetProc`
  , fGetProcUserData :: Ptr (())
  -- ^ `fGetProcUserData`
  , fOwnsInstanceAndDevice :: CBool
  -- ^ `fOwnsInstanceAndDevice`
  , fProtectedContext :: CBool
  -- ^ `fProtectedContext`
  } deriving (Show, Eq, Ord)
instance Offset "fInstance" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fInstance)
instance Offset "fPhysicalDevice" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fPhysicalDevice)
instance Offset "fDevice" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fDevice)
instance Offset "fQueue" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fQueue)
instance Offset "fGraphicsQueueIndex" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fGraphicsQueueIndex)
instance Offset "fMinAPIVersion" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fMinAPIVersion)
instance Offset "fInstanceVersion" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fInstanceVersion)
instance Offset "fMaxAPIVersion" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fMaxAPIVersion)
instance Offset "fExtensions" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fExtensions)
instance Offset "fVkExtensions" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fVkExtensions)
instance Offset "fFeatures" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fFeatures)
instance Offset "fDeviceFeatures" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures)
instance Offset "fDeviceFeatures2" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures2)
instance Offset "fMemoryAllocator" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fMemoryAllocator)
instance Offset "fGetProc" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fGetProc)
instance Offset "fGetProcUserData" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fGetProcUserData)
instance Offset "fOwnsInstanceAndDevice" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fOwnsInstanceAndDevice)
instance Offset "fProtectedContext" Gr_vk_backendcontext where rawOffset = (#offset gr_vk_backendcontext_t, fProtectedContext)
instance Storable Gr_vk_backendcontext where
  sizeOf _ = (#size gr_vk_backendcontext_t)
  alignment _ = (#alignment gr_vk_backendcontext_t)
  peek in'ptr = do
    fInstance <- (#peek gr_vk_backendcontext_t, fInstance) in'ptr
    fPhysicalDevice <- (#peek gr_vk_backendcontext_t, fPhysicalDevice) in'ptr
    fDevice <- (#peek gr_vk_backendcontext_t, fDevice) in'ptr
    fQueue <- (#peek gr_vk_backendcontext_t, fQueue) in'ptr
    fGraphicsQueueIndex <- (#peek gr_vk_backendcontext_t, fGraphicsQueueIndex) in'ptr
    fMinAPIVersion <- (#peek gr_vk_backendcontext_t, fMinAPIVersion) in'ptr
    fInstanceVersion <- (#peek gr_vk_backendcontext_t, fInstanceVersion) in'ptr
    fMaxAPIVersion <- (#peek gr_vk_backendcontext_t, fMaxAPIVersion) in'ptr
    fExtensions <- (#peek gr_vk_backendcontext_t, fExtensions) in'ptr
    fVkExtensions <- (#peek gr_vk_backendcontext_t, fVkExtensions) in'ptr
    fFeatures <- (#peek gr_vk_backendcontext_t, fFeatures) in'ptr
    fDeviceFeatures <- (#peek gr_vk_backendcontext_t, fDeviceFeatures) in'ptr
    fDeviceFeatures2 <- (#peek gr_vk_backendcontext_t, fDeviceFeatures2) in'ptr
    fMemoryAllocator <- (#peek gr_vk_backendcontext_t, fMemoryAllocator) in'ptr
    fGetProc <- (#peek gr_vk_backendcontext_t, fGetProc) in'ptr
    fGetProcUserData <- (#peek gr_vk_backendcontext_t, fGetProcUserData) in'ptr
    fOwnsInstanceAndDevice <- (#peek gr_vk_backendcontext_t, fOwnsInstanceAndDevice) in'ptr
    fProtectedContext <- (#peek gr_vk_backendcontext_t, fProtectedContext) in'ptr
    pure Gr_vk_backendcontext{..}
  poke in'ptr in'value = do
    (#poke gr_vk_backendcontext_t, fInstance) in'ptr in'value.fInstance
    (#poke gr_vk_backendcontext_t, fPhysicalDevice) in'ptr in'value.fPhysicalDevice
    (#poke gr_vk_backendcontext_t, fDevice) in'ptr in'value.fDevice
    (#poke gr_vk_backendcontext_t, fQueue) in'ptr in'value.fQueue
    (#poke gr_vk_backendcontext_t, fGraphicsQueueIndex) in'ptr in'value.fGraphicsQueueIndex
    (#poke gr_vk_backendcontext_t, fMinAPIVersion) in'ptr in'value.fMinAPIVersion
    (#poke gr_vk_backendcontext_t, fInstanceVersion) in'ptr in'value.fInstanceVersion
    (#poke gr_vk_backendcontext_t, fMaxAPIVersion) in'ptr in'value.fMaxAPIVersion
    (#poke gr_vk_backendcontext_t, fExtensions) in'ptr in'value.fExtensions
    (#poke gr_vk_backendcontext_t, fVkExtensions) in'ptr in'value.fVkExtensions
    (#poke gr_vk_backendcontext_t, fFeatures) in'ptr in'value.fFeatures
    (#poke gr_vk_backendcontext_t, fDeviceFeatures) in'ptr in'value.fDeviceFeatures
    (#poke gr_vk_backendcontext_t, fDeviceFeatures2) in'ptr in'value.fDeviceFeatures2
    (#poke gr_vk_backendcontext_t, fMemoryAllocator) in'ptr in'value.fMemoryAllocator
    (#poke gr_vk_backendcontext_t, fGetProc) in'ptr in'value.fGetProc
    (#poke gr_vk_backendcontext_t, fGetProcUserData) in'ptr in'value.fGetProcUserData
    (#poke gr_vk_backendcontext_t, fOwnsInstanceAndDevice) in'ptr in'value.fOwnsInstanceAndDevice
    (#poke gr_vk_backendcontext_t, fProtectedContext) in'ptr in'value.fProtectedContext
-- | `gr_vk_backendmemory_t`
type Gr_vk_backendmemory = CIntPtr
-- | `gr_vk_alloc_t`
data Gr_vk_alloc = Gr_vk_alloc
  { fMemory :: Word64
  -- ^ `fMemory`
  , fOffset :: Word64
  -- ^ `fOffset`
  , fSize :: Word64
  -- ^ `fSize`
  , fFlags :: Word32
  -- ^ `fFlags`
  , fBackendMemory :: Gr_vk_backendmemory
  -- ^ `fBackendMemory`
  , _private_fUsesSystemHeap :: CBool
  -- ^ `_private_fUsesSystemHeap`
  } deriving (Show, Eq, Ord)
instance Offset "fMemory" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, fMemory)
instance Offset "fOffset" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, fOffset)
instance Offset "fSize" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, fSize)
instance Offset "fFlags" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, fFlags)
instance Offset "fBackendMemory" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, fBackendMemory)
instance Offset "_private_fUsesSystemHeap" Gr_vk_alloc where rawOffset = (#offset gr_vk_alloc_t, _private_fUsesSystemHeap)
instance Storable Gr_vk_alloc where
  sizeOf _ = (#size gr_vk_alloc_t)
  alignment _ = (#alignment gr_vk_alloc_t)
  peek in'ptr = do
    fMemory <- (#peek gr_vk_alloc_t, fMemory) in'ptr
    fOffset <- (#peek gr_vk_alloc_t, fOffset) in'ptr
    fSize <- (#peek gr_vk_alloc_t, fSize) in'ptr
    fFlags <- (#peek gr_vk_alloc_t, fFlags) in'ptr
    fBackendMemory <- (#peek gr_vk_alloc_t, fBackendMemory) in'ptr
    _private_fUsesSystemHeap <- (#peek gr_vk_alloc_t, _private_fUsesSystemHeap) in'ptr
    pure Gr_vk_alloc{..}
  poke in'ptr in'value = do
    (#poke gr_vk_alloc_t, fMemory) in'ptr in'value.fMemory
    (#poke gr_vk_alloc_t, fOffset) in'ptr in'value.fOffset
    (#poke gr_vk_alloc_t, fSize) in'ptr in'value.fSize
    (#poke gr_vk_alloc_t, fFlags) in'ptr in'value.fFlags
    (#poke gr_vk_alloc_t, fBackendMemory) in'ptr in'value.fBackendMemory
    (#poke gr_vk_alloc_t, _private_fUsesSystemHeap) in'ptr in'value._private_fUsesSystemHeap
-- | `gr_vk_ycbcrconversioninfo_t`
data Gr_vk_ycbcrconversioninfo = Gr_vk_ycbcrconversioninfo
  { fFormat :: Word32
  -- ^ `fFormat`
  , fExternalFormat :: Word64
  -- ^ `fExternalFormat`
  , fYcbcrModel :: Word32
  -- ^ `fYcbcrModel`
  , fYcbcrRange :: Word32
  -- ^ `fYcbcrRange`
  , fXChromaOffset :: Word32
  -- ^ `fXChromaOffset`
  , fYChromaOffset :: Word32
  -- ^ `fYChromaOffset`
  , fChromaFilter :: Word32
  -- ^ `fChromaFilter`
  , fForceExplicitReconstruction :: Word32
  -- ^ `fForceExplicitReconstruction`
  , fFormatFeatures :: Word32
  -- ^ `fFormatFeatures`
  } deriving (Show, Eq, Ord)
instance Offset "fFormat" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormat)
instance Offset "fExternalFormat" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fExternalFormat)
instance Offset "fYcbcrModel" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrModel)
instance Offset "fYcbcrRange" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrRange)
instance Offset "fXChromaOffset" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fXChromaOffset)
instance Offset "fYChromaOffset" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYChromaOffset)
instance Offset "fChromaFilter" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fChromaFilter)
instance Offset "fForceExplicitReconstruction" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction)
instance Offset "fFormatFeatures" Gr_vk_ycbcrconversioninfo where rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormatFeatures)
instance Storable Gr_vk_ycbcrconversioninfo where
  sizeOf _ = (#size gr_vk_ycbcrconversioninfo_t)
  alignment _ = (#alignment gr_vk_ycbcrconversioninfo_t)
  peek in'ptr = do
    fFormat <- (#peek gr_vk_ycbcrconversioninfo_t, fFormat) in'ptr
    fExternalFormat <- (#peek gr_vk_ycbcrconversioninfo_t, fExternalFormat) in'ptr
    fYcbcrModel <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrModel) in'ptr
    fYcbcrRange <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrRange) in'ptr
    fXChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fXChromaOffset) in'ptr
    fYChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fYChromaOffset) in'ptr
    fChromaFilter <- (#peek gr_vk_ycbcrconversioninfo_t, fChromaFilter) in'ptr
    fForceExplicitReconstruction <- (#peek gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) in'ptr
    fFormatFeatures <- (#peek gr_vk_ycbcrconversioninfo_t, fFormatFeatures) in'ptr
    pure Gr_vk_ycbcrconversioninfo{..}
  poke in'ptr in'value = do
    (#poke gr_vk_ycbcrconversioninfo_t, fFormat) in'ptr in'value.fFormat
    (#poke gr_vk_ycbcrconversioninfo_t, fExternalFormat) in'ptr in'value.fExternalFormat
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrModel) in'ptr in'value.fYcbcrModel
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrRange) in'ptr in'value.fYcbcrRange
    (#poke gr_vk_ycbcrconversioninfo_t, fXChromaOffset) in'ptr in'value.fXChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fYChromaOffset) in'ptr in'value.fYChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fChromaFilter) in'ptr in'value.fChromaFilter
    (#poke gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) in'ptr in'value.fForceExplicitReconstruction
    (#poke gr_vk_ycbcrconversioninfo_t, fFormatFeatures) in'ptr in'value.fFormatFeatures
-- | `gr_vk_imageinfo_t`
data Gr_vk_imageinfo = Gr_vk_imageinfo
  { fImage :: Word64
  -- ^ `fImage`
  , fAlloc :: Gr_vk_alloc
  -- ^ `fAlloc`
  , fImageTiling :: Word32
  -- ^ `fImageTiling`
  , fImageLayout :: Word32
  -- ^ `fImageLayout`
  , fFormat :: Word32
  -- ^ `fFormat`
  , fImageUsageFlags :: Word32
  -- ^ `fImageUsageFlags`
  , fSampleCount :: Word32
  -- ^ `fSampleCount`
  , fLevelCount :: Word32
  -- ^ `fLevelCount`
  , fCurrentQueueFamily :: Word32
  -- ^ `fCurrentQueueFamily`
  , fProtected :: CBool
  -- ^ `fProtected`
  , fYcbcrConversionInfo :: Gr_vk_ycbcrconversioninfo
  -- ^ `fYcbcrConversionInfo`
  , fSharingMode :: Word32
  -- ^ `fSharingMode`
  } deriving (Show, Eq, Ord)
instance Offset "fImage" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fImage)
instance Offset "fAlloc" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fAlloc)
instance Offset "fImageTiling" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageTiling)
instance Offset "fImageLayout" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageLayout)
instance Offset "fFormat" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fFormat)
instance Offset "fImageUsageFlags" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fImageUsageFlags)
instance Offset "fSampleCount" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fSampleCount)
instance Offset "fLevelCount" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fLevelCount)
instance Offset "fCurrentQueueFamily" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fCurrentQueueFamily)
instance Offset "fProtected" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fProtected)
instance Offset "fYcbcrConversionInfo" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fYcbcrConversionInfo)
instance Offset "fSharingMode" Gr_vk_imageinfo where rawOffset = (#offset gr_vk_imageinfo_t, fSharingMode)
instance Storable Gr_vk_imageinfo where
  sizeOf _ = (#size gr_vk_imageinfo_t)
  alignment _ = (#alignment gr_vk_imageinfo_t)
  peek in'ptr = do
    fImage <- (#peek gr_vk_imageinfo_t, fImage) in'ptr
    fAlloc <- (#peek gr_vk_imageinfo_t, fAlloc) in'ptr
    fImageTiling <- (#peek gr_vk_imageinfo_t, fImageTiling) in'ptr
    fImageLayout <- (#peek gr_vk_imageinfo_t, fImageLayout) in'ptr
    fFormat <- (#peek gr_vk_imageinfo_t, fFormat) in'ptr
    fImageUsageFlags <- (#peek gr_vk_imageinfo_t, fImageUsageFlags) in'ptr
    fSampleCount <- (#peek gr_vk_imageinfo_t, fSampleCount) in'ptr
    fLevelCount <- (#peek gr_vk_imageinfo_t, fLevelCount) in'ptr
    fCurrentQueueFamily <- (#peek gr_vk_imageinfo_t, fCurrentQueueFamily) in'ptr
    fProtected <- (#peek gr_vk_imageinfo_t, fProtected) in'ptr
    fYcbcrConversionInfo <- (#peek gr_vk_imageinfo_t, fYcbcrConversionInfo) in'ptr
    fSharingMode <- (#peek gr_vk_imageinfo_t, fSharingMode) in'ptr
    pure Gr_vk_imageinfo{..}
  poke in'ptr in'value = do
    (#poke gr_vk_imageinfo_t, fImage) in'ptr in'value.fImage
    (#poke gr_vk_imageinfo_t, fAlloc) in'ptr in'value.fAlloc
    (#poke gr_vk_imageinfo_t, fImageTiling) in'ptr in'value.fImageTiling
    (#poke gr_vk_imageinfo_t, fImageLayout) in'ptr in'value.fImageLayout
    (#poke gr_vk_imageinfo_t, fFormat) in'ptr in'value.fFormat
    (#poke gr_vk_imageinfo_t, fImageUsageFlags) in'ptr in'value.fImageUsageFlags
    (#poke gr_vk_imageinfo_t, fSampleCount) in'ptr in'value.fSampleCount
    (#poke gr_vk_imageinfo_t, fLevelCount) in'ptr in'value.fLevelCount
    (#poke gr_vk_imageinfo_t, fCurrentQueueFamily) in'ptr in'value.fCurrentQueueFamily
    (#poke gr_vk_imageinfo_t, fProtected) in'ptr in'value.fProtected
    (#poke gr_vk_imageinfo_t, fYcbcrConversionInfo) in'ptr in'value.fYcbcrConversionInfo
    (#poke gr_vk_imageinfo_t, fSharingMode) in'ptr in'value.fSharingMode
-- | `gr_mtl_textureinfo_t`
data Gr_mtl_textureinfo = Gr_mtl_textureinfo
  { fTexture :: Ptr (())
  -- ^ `fTexture`
  } deriving (Show, Eq, Ord)
instance Offset "fTexture" Gr_mtl_textureinfo where rawOffset = (#offset gr_mtl_textureinfo_t, fTexture)
instance Storable Gr_mtl_textureinfo where
  sizeOf _ = (#size gr_mtl_textureinfo_t)
  alignment _ = (#alignment gr_mtl_textureinfo_t)
  peek in'ptr = do
    fTexture <- (#peek gr_mtl_textureinfo_t, fTexture) in'ptr
    pure Gr_mtl_textureinfo{..}
  poke in'ptr in'value = do
    (#poke gr_mtl_textureinfo_t, fTexture) in'ptr in'value.fTexture
-- | `sk_pathop_t`
newtype Sk_pathop = Sk_pathop (#type sk_pathop_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DIFFERENCE_SK_PATHOP`
sk_pathop'DIFFERENCE_SK_PATHOP :: Sk_pathop
sk_pathop'DIFFERENCE_SK_PATHOP = #const DIFFERENCE_SK_PATHOP
-- | `INTERSECT_SK_PATHOP`
sk_pathop'INTERSECT_SK_PATHOP :: Sk_pathop
sk_pathop'INTERSECT_SK_PATHOP = #const INTERSECT_SK_PATHOP
-- | `UNION_SK_PATHOP`
sk_pathop'UNION_SK_PATHOP :: Sk_pathop
sk_pathop'UNION_SK_PATHOP = #const UNION_SK_PATHOP
-- | `XOR_SK_PATHOP`
sk_pathop'XOR_SK_PATHOP :: Sk_pathop
sk_pathop'XOR_SK_PATHOP = #const XOR_SK_PATHOP
-- | `REVERSE_DIFFERENCE_SK_PATHOP`
sk_pathop'REVERSE_DIFFERENCE_SK_PATHOP :: Sk_pathop
sk_pathop'REVERSE_DIFFERENCE_SK_PATHOP = #const REVERSE_DIFFERENCE_SK_PATHOP
-- | `sk_opbuilder_t`
data Sk_opbuilder = Sk_opbuilder
  deriving (Show, Eq, Ord)
-- | `sk_lattice_recttype_t`
newtype Sk_lattice_recttype = Sk_lattice_recttype (#type sk_lattice_recttype_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DEFAULT_SK_LATTICE_RECT_TYPE`
sk_lattice_recttype'DEFAULT_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
sk_lattice_recttype'DEFAULT_SK_LATTICE_RECT_TYPE = #const DEFAULT_SK_LATTICE_RECT_TYPE
-- | `TRANSPARENT_SK_LATTICE_RECT_TYPE`
sk_lattice_recttype'TRANSPARENT_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
sk_lattice_recttype'TRANSPARENT_SK_LATTICE_RECT_TYPE = #const TRANSPARENT_SK_LATTICE_RECT_TYPE
-- | `FIXED_COLOR_SK_LATTICE_RECT_TYPE`
sk_lattice_recttype'FIXED_COLOR_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
sk_lattice_recttype'FIXED_COLOR_SK_LATTICE_RECT_TYPE = #const FIXED_COLOR_SK_LATTICE_RECT_TYPE
-- | `sk_lattice_t`
data Sk_lattice = Sk_lattice
  { fXDivs :: Ptr (CInt)
  -- ^ `fXDivs`
  , fYDivs :: Ptr (CInt)
  -- ^ `fYDivs`
  , fRectTypes :: Ptr (Sk_lattice_recttype)
  -- ^ `fRectTypes`
  , fXCount :: CInt
  -- ^ `fXCount`
  , fYCount :: CInt
  -- ^ `fYCount`
  , fBounds :: Ptr (Sk_irect)
  -- ^ `fBounds`
  , fColors :: Ptr (Sk_color)
  -- ^ `fColors`
  } deriving (Show, Eq, Ord)
instance Offset "fXDivs" Sk_lattice where rawOffset = (#offset sk_lattice_t, fXDivs)
instance Offset "fYDivs" Sk_lattice where rawOffset = (#offset sk_lattice_t, fYDivs)
instance Offset "fRectTypes" Sk_lattice where rawOffset = (#offset sk_lattice_t, fRectTypes)
instance Offset "fXCount" Sk_lattice where rawOffset = (#offset sk_lattice_t, fXCount)
instance Offset "fYCount" Sk_lattice where rawOffset = (#offset sk_lattice_t, fYCount)
instance Offset "fBounds" Sk_lattice where rawOffset = (#offset sk_lattice_t, fBounds)
instance Offset "fColors" Sk_lattice where rawOffset = (#offset sk_lattice_t, fColors)
instance Storable Sk_lattice where
  sizeOf _ = (#size sk_lattice_t)
  alignment _ = (#alignment sk_lattice_t)
  peek in'ptr = do
    fXDivs <- (#peek sk_lattice_t, fXDivs) in'ptr
    fYDivs <- (#peek sk_lattice_t, fYDivs) in'ptr
    fRectTypes <- (#peek sk_lattice_t, fRectTypes) in'ptr
    fXCount <- (#peek sk_lattice_t, fXCount) in'ptr
    fYCount <- (#peek sk_lattice_t, fYCount) in'ptr
    fBounds <- (#peek sk_lattice_t, fBounds) in'ptr
    fColors <- (#peek sk_lattice_t, fColors) in'ptr
    pure Sk_lattice{..}
  poke in'ptr in'value = do
    (#poke sk_lattice_t, fXDivs) in'ptr in'value.fXDivs
    (#poke sk_lattice_t, fYDivs) in'ptr in'value.fYDivs
    (#poke sk_lattice_t, fRectTypes) in'ptr in'value.fRectTypes
    (#poke sk_lattice_t, fXCount) in'ptr in'value.fXCount
    (#poke sk_lattice_t, fYCount) in'ptr in'value.fYCount
    (#poke sk_lattice_t, fBounds) in'ptr in'value.fBounds
    (#poke sk_lattice_t, fColors) in'ptr in'value.fColors
-- | `sk_pathmeasure_t`
data Sk_pathmeasure = Sk_pathmeasure
  deriving (Show, Eq, Ord)
-- | `sk_pathmeasure_matrixflags_t`
newtype Sk_pathmeasure_matrixflags = Sk_pathmeasure_matrixflags (#type sk_pathmeasure_matrixflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS`
sk_pathmeasure_matrixflags'GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
sk_pathmeasure_matrixflags'GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS = #const GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS
-- | `GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS`
sk_pathmeasure_matrixflags'GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
sk_pathmeasure_matrixflags'GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS = #const GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS
-- | `GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS`
sk_pathmeasure_matrixflags'GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
sk_pathmeasure_matrixflags'GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS = #const GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS
-- | `sk_bitmap_release_proc`
type Sk_bitmap_release_proc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_data_release_proc`
type Sk_data_release_proc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_image_raster_release_proc`
type Sk_image_raster_release_proc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_image_texture_release_proc`
type Sk_image_texture_release_proc = (Ptr (())) -> IO (())
-- | `sk_surface_raster_release_proc`
type Sk_surface_raster_release_proc = (Ptr (())) -> (Ptr (())) -> IO (())
-- | `sk_glyph_path_proc`
type Sk_glyph_path_proc = (Ptr (Sk_path)) -> (Ptr (Sk_matrix)) -> (Ptr (())) -> IO (())
-- | `sk_image_caching_hint_t`
newtype Sk_image_caching_hint = Sk_image_caching_hint (#type sk_image_caching_hint_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ALLOW_SK_IMAGE_CACHING_HINT`
sk_image_caching_hint'ALLOW_SK_IMAGE_CACHING_HINT :: Sk_image_caching_hint
sk_image_caching_hint'ALLOW_SK_IMAGE_CACHING_HINT = #const ALLOW_SK_IMAGE_CACHING_HINT
-- | `DISALLOW_SK_IMAGE_CACHING_HINT`
sk_image_caching_hint'DISALLOW_SK_IMAGE_CACHING_HINT :: Sk_image_caching_hint
sk_image_caching_hint'DISALLOW_SK_IMAGE_CACHING_HINT = #const DISALLOW_SK_IMAGE_CACHING_HINT
-- | `sk_bitmap_allocflags_t`
newtype Sk_bitmap_allocflags = Sk_bitmap_allocflags (#type sk_bitmap_allocflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_BITMAP_ALLOC_FLAGS`
sk_bitmap_allocflags'NONE_SK_BITMAP_ALLOC_FLAGS :: Sk_bitmap_allocflags
sk_bitmap_allocflags'NONE_SK_BITMAP_ALLOC_FLAGS = #const NONE_SK_BITMAP_ALLOC_FLAGS
-- | `ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS`
sk_bitmap_allocflags'ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS :: Sk_bitmap_allocflags
sk_bitmap_allocflags'ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS = #const ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS
-- | `sk_document_pdf_datetime_t`
data Sk_document_pdf_datetime = Sk_document_pdf_datetime
  { fTimeZoneMinutes :: Int16
  -- ^ `fTimeZoneMinutes`
  , fYear :: Word16
  -- ^ `fYear`
  , fMonth :: Word8
  -- ^ `fMonth`
  , fDayOfWeek :: Word8
  -- ^ `fDayOfWeek`
  , fDay :: Word8
  -- ^ `fDay`
  , fHour :: Word8
  -- ^ `fHour`
  , fMinute :: Word8
  -- ^ `fMinute`
  , fSecond :: Word8
  -- ^ `fSecond`
  } deriving (Show, Eq, Ord)
instance Offset "fTimeZoneMinutes" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fTimeZoneMinutes)
instance Offset "fYear" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fYear)
instance Offset "fMonth" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fMonth)
instance Offset "fDayOfWeek" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fDayOfWeek)
instance Offset "fDay" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fDay)
instance Offset "fHour" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fHour)
instance Offset "fMinute" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fMinute)
instance Offset "fSecond" Sk_document_pdf_datetime where rawOffset = (#offset sk_document_pdf_datetime_t, fSecond)
instance Storable Sk_document_pdf_datetime where
  sizeOf _ = (#size sk_document_pdf_datetime_t)
  alignment _ = (#alignment sk_document_pdf_datetime_t)
  peek in'ptr = do
    fTimeZoneMinutes <- (#peek sk_document_pdf_datetime_t, fTimeZoneMinutes) in'ptr
    fYear <- (#peek sk_document_pdf_datetime_t, fYear) in'ptr
    fMonth <- (#peek sk_document_pdf_datetime_t, fMonth) in'ptr
    fDayOfWeek <- (#peek sk_document_pdf_datetime_t, fDayOfWeek) in'ptr
    fDay <- (#peek sk_document_pdf_datetime_t, fDay) in'ptr
    fHour <- (#peek sk_document_pdf_datetime_t, fHour) in'ptr
    fMinute <- (#peek sk_document_pdf_datetime_t, fMinute) in'ptr
    fSecond <- (#peek sk_document_pdf_datetime_t, fSecond) in'ptr
    pure Sk_document_pdf_datetime{..}
  poke in'ptr in'value = do
    (#poke sk_document_pdf_datetime_t, fTimeZoneMinutes) in'ptr in'value.fTimeZoneMinutes
    (#poke sk_document_pdf_datetime_t, fYear) in'ptr in'value.fYear
    (#poke sk_document_pdf_datetime_t, fMonth) in'ptr in'value.fMonth
    (#poke sk_document_pdf_datetime_t, fDayOfWeek) in'ptr in'value.fDayOfWeek
    (#poke sk_document_pdf_datetime_t, fDay) in'ptr in'value.fDay
    (#poke sk_document_pdf_datetime_t, fHour) in'ptr in'value.fHour
    (#poke sk_document_pdf_datetime_t, fMinute) in'ptr in'value.fMinute
    (#poke sk_document_pdf_datetime_t, fSecond) in'ptr in'value.fSecond
-- | `sk_document_pdf_metadata_t`
data Sk_document_pdf_metadata = Sk_document_pdf_metadata
  { fTitle :: Ptr (Sk_string)
  -- ^ `fTitle`
  , fAuthor :: Ptr (Sk_string)
  -- ^ `fAuthor`
  , fSubject :: Ptr (Sk_string)
  -- ^ `fSubject`
  , fKeywords :: Ptr (Sk_string)
  -- ^ `fKeywords`
  , fCreator :: Ptr (Sk_string)
  -- ^ `fCreator`
  , fProducer :: Ptr (Sk_string)
  -- ^ `fProducer`
  , fCreation :: Ptr (Sk_document_pdf_datetime)
  -- ^ `fCreation`
  , fModified :: Ptr (Sk_document_pdf_datetime)
  -- ^ `fModified`
  , fRasterDPI :: CFloat
  -- ^ `fRasterDPI`
  , fPDFA :: CBool
  -- ^ `fPDFA`
  , fEncodingQuality :: CInt
  -- ^ `fEncodingQuality`
  } deriving (Show, Eq, Ord)
instance Offset "fTitle" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fTitle)
instance Offset "fAuthor" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fAuthor)
instance Offset "fSubject" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fSubject)
instance Offset "fKeywords" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fKeywords)
instance Offset "fCreator" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fCreator)
instance Offset "fProducer" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fProducer)
instance Offset "fCreation" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fCreation)
instance Offset "fModified" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fModified)
instance Offset "fRasterDPI" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fRasterDPI)
instance Offset "fPDFA" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fPDFA)
instance Offset "fEncodingQuality" Sk_document_pdf_metadata where rawOffset = (#offset sk_document_pdf_metadata_t, fEncodingQuality)
instance Storable Sk_document_pdf_metadata where
  sizeOf _ = (#size sk_document_pdf_metadata_t)
  alignment _ = (#alignment sk_document_pdf_metadata_t)
  peek in'ptr = do
    fTitle <- (#peek sk_document_pdf_metadata_t, fTitle) in'ptr
    fAuthor <- (#peek sk_document_pdf_metadata_t, fAuthor) in'ptr
    fSubject <- (#peek sk_document_pdf_metadata_t, fSubject) in'ptr
    fKeywords <- (#peek sk_document_pdf_metadata_t, fKeywords) in'ptr
    fCreator <- (#peek sk_document_pdf_metadata_t, fCreator) in'ptr
    fProducer <- (#peek sk_document_pdf_metadata_t, fProducer) in'ptr
    fCreation <- (#peek sk_document_pdf_metadata_t, fCreation) in'ptr
    fModified <- (#peek sk_document_pdf_metadata_t, fModified) in'ptr
    fRasterDPI <- (#peek sk_document_pdf_metadata_t, fRasterDPI) in'ptr
    fPDFA <- (#peek sk_document_pdf_metadata_t, fPDFA) in'ptr
    fEncodingQuality <- (#peek sk_document_pdf_metadata_t, fEncodingQuality) in'ptr
    pure Sk_document_pdf_metadata{..}
  poke in'ptr in'value = do
    (#poke sk_document_pdf_metadata_t, fTitle) in'ptr in'value.fTitle
    (#poke sk_document_pdf_metadata_t, fAuthor) in'ptr in'value.fAuthor
    (#poke sk_document_pdf_metadata_t, fSubject) in'ptr in'value.fSubject
    (#poke sk_document_pdf_metadata_t, fKeywords) in'ptr in'value.fKeywords
    (#poke sk_document_pdf_metadata_t, fCreator) in'ptr in'value.fCreator
    (#poke sk_document_pdf_metadata_t, fProducer) in'ptr in'value.fProducer
    (#poke sk_document_pdf_metadata_t, fCreation) in'ptr in'value.fCreation
    (#poke sk_document_pdf_metadata_t, fModified) in'ptr in'value.fModified
    (#poke sk_document_pdf_metadata_t, fRasterDPI) in'ptr in'value.fRasterDPI
    (#poke sk_document_pdf_metadata_t, fPDFA) in'ptr in'value.fPDFA
    (#poke sk_document_pdf_metadata_t, fEncodingQuality) in'ptr in'value.fEncodingQuality
-- | `sk_imageinfo_t`
data Sk_imageinfo = Sk_imageinfo
  { colorspace :: Ptr (Sk_colorspace)
  -- ^ `colorspace`
  , width :: Int32
  -- ^ `width`
  , height :: Int32
  -- ^ `height`
  , colorType :: Sk_colortype
  -- ^ `colorType`
  , alphaType :: Sk_alphatype
  -- ^ `alphaType`
  } deriving (Show, Eq, Ord)
instance Offset "colorspace" Sk_imageinfo where rawOffset = (#offset sk_imageinfo_t, colorspace)
instance Offset "width" Sk_imageinfo where rawOffset = (#offset sk_imageinfo_t, width)
instance Offset "height" Sk_imageinfo where rawOffset = (#offset sk_imageinfo_t, height)
instance Offset "colorType" Sk_imageinfo where rawOffset = (#offset sk_imageinfo_t, colorType)
instance Offset "alphaType" Sk_imageinfo where rawOffset = (#offset sk_imageinfo_t, alphaType)
instance Storable Sk_imageinfo where
  sizeOf _ = (#size sk_imageinfo_t)
  alignment _ = (#alignment sk_imageinfo_t)
  peek in'ptr = do
    colorspace <- (#peek sk_imageinfo_t, colorspace) in'ptr
    width <- (#peek sk_imageinfo_t, width) in'ptr
    height <- (#peek sk_imageinfo_t, height) in'ptr
    colorType <- (#peek sk_imageinfo_t, colorType) in'ptr
    alphaType <- (#peek sk_imageinfo_t, alphaType) in'ptr
    pure Sk_imageinfo{..}
  poke in'ptr in'value = do
    (#poke sk_imageinfo_t, colorspace) in'ptr in'value.colorspace
    (#poke sk_imageinfo_t, width) in'ptr in'value.width
    (#poke sk_imageinfo_t, height) in'ptr in'value.height
    (#poke sk_imageinfo_t, colorType) in'ptr in'value.colorType
    (#poke sk_imageinfo_t, alphaType) in'ptr in'value.alphaType
-- | `sk_codecanimation_disposalmethod_t`
newtype Sk_codecanimation_disposalmethod = Sk_codecanimation_disposalmethod (#type sk_codecanimation_disposalmethod_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
sk_codecanimation_disposalmethod'KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
sk_codecanimation_disposalmethod'KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD = #const KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
sk_codecanimation_disposalmethod'RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
sk_codecanimation_disposalmethod'RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD = #const RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD`
sk_codecanimation_disposalmethod'RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
sk_codecanimation_disposalmethod'RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD = #const RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD
-- | `sk_codecanimation_blend_t`
newtype Sk_codecanimation_blend = Sk_codecanimation_blend (#type sk_codecanimation_blend_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SRC_OVER_SK_CODEC_ANIMATION_BLEND`
sk_codecanimation_blend'SRC_OVER_SK_CODEC_ANIMATION_BLEND :: Sk_codecanimation_blend
sk_codecanimation_blend'SRC_OVER_SK_CODEC_ANIMATION_BLEND = #const SRC_OVER_SK_CODEC_ANIMATION_BLEND
-- | `SRC_SK_CODEC_ANIMATION_BLEND`
sk_codecanimation_blend'SRC_SK_CODEC_ANIMATION_BLEND :: Sk_codecanimation_blend
sk_codecanimation_blend'SRC_SK_CODEC_ANIMATION_BLEND = #const SRC_SK_CODEC_ANIMATION_BLEND
-- | `sk_codec_frameinfo_t`
data Sk_codec_frameinfo = Sk_codec_frameinfo
  { fRequiredFrame :: CInt
  -- ^ `fRequiredFrame`
  , fDuration :: CInt
  -- ^ `fDuration`
  , fFullyReceived :: CBool
  -- ^ `fFullyReceived`
  , fAlphaType :: Sk_alphatype
  -- ^ `fAlphaType`
  , fHasAlphaWithinBounds :: CBool
  -- ^ `fHasAlphaWithinBounds`
  , fDisposalMethod :: Sk_codecanimation_disposalmethod
  -- ^ `fDisposalMethod`
  , fBlend :: Sk_codecanimation_blend
  -- ^ `fBlend`
  , fFrameRect :: Sk_irect
  -- ^ `fFrameRect`
  } deriving (Show, Eq, Ord)
instance Offset "fRequiredFrame" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fRequiredFrame)
instance Offset "fDuration" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fDuration)
instance Offset "fFullyReceived" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fFullyReceived)
instance Offset "fAlphaType" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fAlphaType)
instance Offset "fHasAlphaWithinBounds" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fHasAlphaWithinBounds)
instance Offset "fDisposalMethod" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fDisposalMethod)
instance Offset "fBlend" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fBlend)
instance Offset "fFrameRect" Sk_codec_frameinfo where rawOffset = (#offset sk_codec_frameinfo_t, fFrameRect)
instance Storable Sk_codec_frameinfo where
  sizeOf _ = (#size sk_codec_frameinfo_t)
  alignment _ = (#alignment sk_codec_frameinfo_t)
  peek in'ptr = do
    fRequiredFrame <- (#peek sk_codec_frameinfo_t, fRequiredFrame) in'ptr
    fDuration <- (#peek sk_codec_frameinfo_t, fDuration) in'ptr
    fFullyReceived <- (#peek sk_codec_frameinfo_t, fFullyReceived) in'ptr
    fAlphaType <- (#peek sk_codec_frameinfo_t, fAlphaType) in'ptr
    fHasAlphaWithinBounds <- (#peek sk_codec_frameinfo_t, fHasAlphaWithinBounds) in'ptr
    fDisposalMethod <- (#peek sk_codec_frameinfo_t, fDisposalMethod) in'ptr
    fBlend <- (#peek sk_codec_frameinfo_t, fBlend) in'ptr
    fFrameRect <- (#peek sk_codec_frameinfo_t, fFrameRect) in'ptr
    pure Sk_codec_frameinfo{..}
  poke in'ptr in'value = do
    (#poke sk_codec_frameinfo_t, fRequiredFrame) in'ptr in'value.fRequiredFrame
    (#poke sk_codec_frameinfo_t, fDuration) in'ptr in'value.fDuration
    (#poke sk_codec_frameinfo_t, fFullyReceived) in'ptr in'value.fFullyReceived
    (#poke sk_codec_frameinfo_t, fAlphaType) in'ptr in'value.fAlphaType
    (#poke sk_codec_frameinfo_t, fHasAlphaWithinBounds) in'ptr in'value.fHasAlphaWithinBounds
    (#poke sk_codec_frameinfo_t, fDisposalMethod) in'ptr in'value.fDisposalMethod
    (#poke sk_codec_frameinfo_t, fBlend) in'ptr in'value.fBlend
    (#poke sk_codec_frameinfo_t, fFrameRect) in'ptr in'value.fFrameRect
-- | `sk_svgcanvas_t`
data Sk_svgcanvas = Sk_svgcanvas
  deriving (Show, Eq, Ord)
-- | `sk_vertices_vertex_mode_t`
newtype Sk_vertices_vertex_mode = Sk_vertices_vertex_mode (#type sk_vertices_vertex_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `TRIANGLES_SK_VERTICES_VERTEX_MODE`
sk_vertices_vertex_mode'TRIANGLES_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
sk_vertices_vertex_mode'TRIANGLES_SK_VERTICES_VERTEX_MODE = #const TRIANGLES_SK_VERTICES_VERTEX_MODE
-- | `TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE`
sk_vertices_vertex_mode'TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
sk_vertices_vertex_mode'TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE = #const TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE
-- | `TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE`
sk_vertices_vertex_mode'TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
sk_vertices_vertex_mode'TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE = #const TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE
-- | `sk_vertices_t`
data Sk_vertices = Sk_vertices
  deriving (Show, Eq, Ord)
-- | `sk_colorspace_transfer_fn_t`
data Sk_colorspace_transfer_fn = Sk_colorspace_transfer_fn
  { fG :: CFloat
  -- ^ `fG`
  , fA :: CFloat
  -- ^ `fA`
  , fB :: CFloat
  -- ^ `fB`
  , fC :: CFloat
  -- ^ `fC`
  , fD :: CFloat
  -- ^ `fD`
  , fE :: CFloat
  -- ^ `fE`
  , fF :: CFloat
  -- ^ `fF`
  } deriving (Show, Eq, Ord)
instance Offset "fG" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fG)
instance Offset "fA" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fA)
instance Offset "fB" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fB)
instance Offset "fC" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fC)
instance Offset "fD" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fD)
instance Offset "fE" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fE)
instance Offset "fF" Sk_colorspace_transfer_fn where rawOffset = (#offset sk_colorspace_transfer_fn_t, fF)
instance Storable Sk_colorspace_transfer_fn where
  sizeOf _ = (#size sk_colorspace_transfer_fn_t)
  alignment _ = (#alignment sk_colorspace_transfer_fn_t)
  peek in'ptr = do
    fG <- (#peek sk_colorspace_transfer_fn_t, fG) in'ptr
    fA <- (#peek sk_colorspace_transfer_fn_t, fA) in'ptr
    fB <- (#peek sk_colorspace_transfer_fn_t, fB) in'ptr
    fC <- (#peek sk_colorspace_transfer_fn_t, fC) in'ptr
    fD <- (#peek sk_colorspace_transfer_fn_t, fD) in'ptr
    fE <- (#peek sk_colorspace_transfer_fn_t, fE) in'ptr
    fF <- (#peek sk_colorspace_transfer_fn_t, fF) in'ptr
    pure Sk_colorspace_transfer_fn{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_transfer_fn_t, fG) in'ptr in'value.fG
    (#poke sk_colorspace_transfer_fn_t, fA) in'ptr in'value.fA
    (#poke sk_colorspace_transfer_fn_t, fB) in'ptr in'value.fB
    (#poke sk_colorspace_transfer_fn_t, fC) in'ptr in'value.fC
    (#poke sk_colorspace_transfer_fn_t, fD) in'ptr in'value.fD
    (#poke sk_colorspace_transfer_fn_t, fE) in'ptr in'value.fE
    (#poke sk_colorspace_transfer_fn_t, fF) in'ptr in'value.fF
-- | `sk_colorspace_primaries_t`
data Sk_colorspace_primaries = Sk_colorspace_primaries
  { fRX :: CFloat
  -- ^ `fRX`
  , fRY :: CFloat
  -- ^ `fRY`
  , fGX :: CFloat
  -- ^ `fGX`
  , fGY :: CFloat
  -- ^ `fGY`
  , fBX :: CFloat
  -- ^ `fBX`
  , fBY :: CFloat
  -- ^ `fBY`
  , fWX :: CFloat
  -- ^ `fWX`
  , fWY :: CFloat
  -- ^ `fWY`
  } deriving (Show, Eq, Ord)
instance Offset "fRX" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fRX)
instance Offset "fRY" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fRY)
instance Offset "fGX" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fGX)
instance Offset "fGY" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fGY)
instance Offset "fBX" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fBX)
instance Offset "fBY" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fBY)
instance Offset "fWX" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fWX)
instance Offset "fWY" Sk_colorspace_primaries where rawOffset = (#offset sk_colorspace_primaries_t, fWY)
instance Storable Sk_colorspace_primaries where
  sizeOf _ = (#size sk_colorspace_primaries_t)
  alignment _ = (#alignment sk_colorspace_primaries_t)
  peek in'ptr = do
    fRX <- (#peek sk_colorspace_primaries_t, fRX) in'ptr
    fRY <- (#peek sk_colorspace_primaries_t, fRY) in'ptr
    fGX <- (#peek sk_colorspace_primaries_t, fGX) in'ptr
    fGY <- (#peek sk_colorspace_primaries_t, fGY) in'ptr
    fBX <- (#peek sk_colorspace_primaries_t, fBX) in'ptr
    fBY <- (#peek sk_colorspace_primaries_t, fBY) in'ptr
    fWX <- (#peek sk_colorspace_primaries_t, fWX) in'ptr
    fWY <- (#peek sk_colorspace_primaries_t, fWY) in'ptr
    pure Sk_colorspace_primaries{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_primaries_t, fRX) in'ptr in'value.fRX
    (#poke sk_colorspace_primaries_t, fRY) in'ptr in'value.fRY
    (#poke sk_colorspace_primaries_t, fGX) in'ptr in'value.fGX
    (#poke sk_colorspace_primaries_t, fGY) in'ptr in'value.fGY
    (#poke sk_colorspace_primaries_t, fBX) in'ptr in'value.fBX
    (#poke sk_colorspace_primaries_t, fBY) in'ptr in'value.fBY
    (#poke sk_colorspace_primaries_t, fWX) in'ptr in'value.fWX
    (#poke sk_colorspace_primaries_t, fWY) in'ptr in'value.fWY
-- | `sk_colorspace_xyz_t`
data Sk_colorspace_xyz = Sk_colorspace_xyz
  { fM00 :: CFloat
  -- ^ `fM00`
  , fM01 :: CFloat
  -- ^ `fM01`
  , fM02 :: CFloat
  -- ^ `fM02`
  , fM10 :: CFloat
  -- ^ `fM10`
  , fM11 :: CFloat
  -- ^ `fM11`
  , fM12 :: CFloat
  -- ^ `fM12`
  , fM20 :: CFloat
  -- ^ `fM20`
  , fM21 :: CFloat
  -- ^ `fM21`
  , fM22 :: CFloat
  -- ^ `fM22`
  } deriving (Show, Eq, Ord)
instance Offset "fM00" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM00)
instance Offset "fM01" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM01)
instance Offset "fM02" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM02)
instance Offset "fM10" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM10)
instance Offset "fM11" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM11)
instance Offset "fM12" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM12)
instance Offset "fM20" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM20)
instance Offset "fM21" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM21)
instance Offset "fM22" Sk_colorspace_xyz where rawOffset = (#offset sk_colorspace_xyz_t, fM22)
instance Storable Sk_colorspace_xyz where
  sizeOf _ = (#size sk_colorspace_xyz_t)
  alignment _ = (#alignment sk_colorspace_xyz_t)
  peek in'ptr = do
    fM00 <- (#peek sk_colorspace_xyz_t, fM00) in'ptr
    fM01 <- (#peek sk_colorspace_xyz_t, fM01) in'ptr
    fM02 <- (#peek sk_colorspace_xyz_t, fM02) in'ptr
    fM10 <- (#peek sk_colorspace_xyz_t, fM10) in'ptr
    fM11 <- (#peek sk_colorspace_xyz_t, fM11) in'ptr
    fM12 <- (#peek sk_colorspace_xyz_t, fM12) in'ptr
    fM20 <- (#peek sk_colorspace_xyz_t, fM20) in'ptr
    fM21 <- (#peek sk_colorspace_xyz_t, fM21) in'ptr
    fM22 <- (#peek sk_colorspace_xyz_t, fM22) in'ptr
    pure Sk_colorspace_xyz{..}
  poke in'ptr in'value = do
    (#poke sk_colorspace_xyz_t, fM00) in'ptr in'value.fM00
    (#poke sk_colorspace_xyz_t, fM01) in'ptr in'value.fM01
    (#poke sk_colorspace_xyz_t, fM02) in'ptr in'value.fM02
    (#poke sk_colorspace_xyz_t, fM10) in'ptr in'value.fM10
    (#poke sk_colorspace_xyz_t, fM11) in'ptr in'value.fM11
    (#poke sk_colorspace_xyz_t, fM12) in'ptr in'value.fM12
    (#poke sk_colorspace_xyz_t, fM20) in'ptr in'value.fM20
    (#poke sk_colorspace_xyz_t, fM21) in'ptr in'value.fM21
    (#poke sk_colorspace_xyz_t, fM22) in'ptr in'value.fM22
-- | `sk_colorspace_icc_profile_t`
data Sk_colorspace_icc_profile = Sk_colorspace_icc_profile
  deriving (Show, Eq, Ord)
-- | `sk_highcontrastconfig_invertstyle_t`
newtype Sk_highcontrastconfig_invertstyle = Sk_highcontrastconfig_invertstyle (#type sk_highcontrastconfig_invertstyle_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
sk_highcontrastconfig_invertstyle'NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
sk_highcontrastconfig_invertstyle'NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = #const NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
sk_highcontrastconfig_invertstyle'INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
sk_highcontrastconfig_invertstyle'INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = #const INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE`
sk_highcontrastconfig_invertstyle'INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
sk_highcontrastconfig_invertstyle'INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = #const INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
-- | `sk_highcontrastconfig_t`
data Sk_highcontrastconfig = Sk_highcontrastconfig
  { fGrayscale :: CBool
  -- ^ `fGrayscale`
  , fInvertStyle :: Sk_highcontrastconfig_invertstyle
  -- ^ `fInvertStyle`
  , fContrast :: CFloat
  -- ^ `fContrast`
  } deriving (Show, Eq, Ord)
instance Offset "fGrayscale" Sk_highcontrastconfig where rawOffset = (#offset sk_highcontrastconfig_t, fGrayscale)
instance Offset "fInvertStyle" Sk_highcontrastconfig where rawOffset = (#offset sk_highcontrastconfig_t, fInvertStyle)
instance Offset "fContrast" Sk_highcontrastconfig where rawOffset = (#offset sk_highcontrastconfig_t, fContrast)
instance Storable Sk_highcontrastconfig where
  sizeOf _ = (#size sk_highcontrastconfig_t)
  alignment _ = (#alignment sk_highcontrastconfig_t)
  peek in'ptr = do
    fGrayscale <- (#peek sk_highcontrastconfig_t, fGrayscale) in'ptr
    fInvertStyle <- (#peek sk_highcontrastconfig_t, fInvertStyle) in'ptr
    fContrast <- (#peek sk_highcontrastconfig_t, fContrast) in'ptr
    pure Sk_highcontrastconfig{..}
  poke in'ptr in'value = do
    (#poke sk_highcontrastconfig_t, fGrayscale) in'ptr in'value.fGrayscale
    (#poke sk_highcontrastconfig_t, fInvertStyle) in'ptr in'value.fInvertStyle
    (#poke sk_highcontrastconfig_t, fContrast) in'ptr in'value.fContrast
-- | `sk_pngencoder_filterflags_t`
newtype Sk_pngencoder_filterflags = Sk_pngencoder_filterflags (#type sk_pngencoder_filterflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `ZERO_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'ZERO_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'ZERO_SK_PNGENCODER_FILTER_FLAGS = #const ZERO_SK_PNGENCODER_FILTER_FLAGS
-- | `NONE_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'NONE_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'NONE_SK_PNGENCODER_FILTER_FLAGS = #const NONE_SK_PNGENCODER_FILTER_FLAGS
-- | `SUB_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'SUB_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'SUB_SK_PNGENCODER_FILTER_FLAGS = #const SUB_SK_PNGENCODER_FILTER_FLAGS
-- | `UP_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'UP_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'UP_SK_PNGENCODER_FILTER_FLAGS = #const UP_SK_PNGENCODER_FILTER_FLAGS
-- | `AVG_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'AVG_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'AVG_SK_PNGENCODER_FILTER_FLAGS = #const AVG_SK_PNGENCODER_FILTER_FLAGS
-- | `PAETH_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'PAETH_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'PAETH_SK_PNGENCODER_FILTER_FLAGS = #const PAETH_SK_PNGENCODER_FILTER_FLAGS
-- | `ALL_SK_PNGENCODER_FILTER_FLAGS`
sk_pngencoder_filterflags'ALL_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
sk_pngencoder_filterflags'ALL_SK_PNGENCODER_FILTER_FLAGS = #const ALL_SK_PNGENCODER_FILTER_FLAGS
-- | `sk_pngencoder_options_t`
data Sk_pngencoder_options = Sk_pngencoder_options
  { fFilterFlags :: Sk_pngencoder_filterflags
  -- ^ `fFilterFlags`
  , fZLibLevel :: CInt
  -- ^ `fZLibLevel`
  , fComments :: Ptr (())
  -- ^ `fComments`
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile)
  -- ^ `fICCProfile`
  , fICCProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "fFilterFlags" Sk_pngencoder_options where rawOffset = (#offset sk_pngencoder_options_t, fFilterFlags)
instance Offset "fZLibLevel" Sk_pngencoder_options where rawOffset = (#offset sk_pngencoder_options_t, fZLibLevel)
instance Offset "fComments" Sk_pngencoder_options where rawOffset = (#offset sk_pngencoder_options_t, fComments)
instance Offset "fICCProfile" Sk_pngencoder_options where rawOffset = (#offset sk_pngencoder_options_t, fICCProfile)
instance Offset "fICCProfileDescription" Sk_pngencoder_options where rawOffset = (#offset sk_pngencoder_options_t, fICCProfileDescription)
instance Storable Sk_pngencoder_options where
  sizeOf _ = (#size sk_pngencoder_options_t)
  alignment _ = (#alignment sk_pngencoder_options_t)
  peek in'ptr = do
    fFilterFlags <- (#peek sk_pngencoder_options_t, fFilterFlags) in'ptr
    fZLibLevel <- (#peek sk_pngencoder_options_t, fZLibLevel) in'ptr
    fComments <- (#peek sk_pngencoder_options_t, fComments) in'ptr
    fICCProfile <- (#peek sk_pngencoder_options_t, fICCProfile) in'ptr
    fICCProfileDescription <- (#peek sk_pngencoder_options_t, fICCProfileDescription) in'ptr
    pure Sk_pngencoder_options{..}
  poke in'ptr in'value = do
    (#poke sk_pngencoder_options_t, fFilterFlags) in'ptr in'value.fFilterFlags
    (#poke sk_pngencoder_options_t, fZLibLevel) in'ptr in'value.fZLibLevel
    (#poke sk_pngencoder_options_t, fComments) in'ptr in'value.fComments
    (#poke sk_pngencoder_options_t, fICCProfile) in'ptr in'value.fICCProfile
    (#poke sk_pngencoder_options_t, fICCProfileDescription) in'ptr in'value.fICCProfileDescription
-- | `sk_jpegencoder_downsample_t`
newtype Sk_jpegencoder_downsample = Sk_jpegencoder_downsample (#type sk_jpegencoder_downsample_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE`
sk_jpegencoder_downsample'DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
sk_jpegencoder_downsample'DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE = #const DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE
-- | `DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE`
sk_jpegencoder_downsample'DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
sk_jpegencoder_downsample'DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE = #const DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE
-- | `DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE`
sk_jpegencoder_downsample'DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
sk_jpegencoder_downsample'DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE = #const DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE
-- | `sk_jpegencoder_alphaoption_t`
newtype Sk_jpegencoder_alphaoption = Sk_jpegencoder_alphaoption (#type sk_jpegencoder_alphaoption_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `IGNORE_SK_JPEGENCODER_ALPHA_OPTION`
sk_jpegencoder_alphaoption'IGNORE_SK_JPEGENCODER_ALPHA_OPTION :: Sk_jpegencoder_alphaoption
sk_jpegencoder_alphaoption'IGNORE_SK_JPEGENCODER_ALPHA_OPTION = #const IGNORE_SK_JPEGENCODER_ALPHA_OPTION
-- | `BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION`
sk_jpegencoder_alphaoption'BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION :: Sk_jpegencoder_alphaoption
sk_jpegencoder_alphaoption'BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION = #const BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION
-- | `sk_jpegencoder_options_t`
data Sk_jpegencoder_options = Sk_jpegencoder_options
  { fQuality :: CInt
  -- ^ `fQuality`
  , fDownsample :: Sk_jpegencoder_downsample
  -- ^ `fDownsample`
  , fAlphaOption :: Sk_jpegencoder_alphaoption
  -- ^ `fAlphaOption`
  , xmpMetadata :: Ptr (Sk_data)
  -- ^ `xmpMetadata`
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile)
  -- ^ `fICCProfile`
  , fICCProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "fQuality" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, fQuality)
instance Offset "fDownsample" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, fDownsample)
instance Offset "fAlphaOption" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, fAlphaOption)
instance Offset "xmpMetadata" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, xmpMetadata)
instance Offset "fICCProfile" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, fICCProfile)
instance Offset "fICCProfileDescription" Sk_jpegencoder_options where rawOffset = (#offset sk_jpegencoder_options_t, fICCProfileDescription)
instance Storable Sk_jpegencoder_options where
  sizeOf _ = (#size sk_jpegencoder_options_t)
  alignment _ = (#alignment sk_jpegencoder_options_t)
  peek in'ptr = do
    fQuality <- (#peek sk_jpegencoder_options_t, fQuality) in'ptr
    fDownsample <- (#peek sk_jpegencoder_options_t, fDownsample) in'ptr
    fAlphaOption <- (#peek sk_jpegencoder_options_t, fAlphaOption) in'ptr
    xmpMetadata <- (#peek sk_jpegencoder_options_t, xmpMetadata) in'ptr
    fICCProfile <- (#peek sk_jpegencoder_options_t, fICCProfile) in'ptr
    fICCProfileDescription <- (#peek sk_jpegencoder_options_t, fICCProfileDescription) in'ptr
    pure Sk_jpegencoder_options{..}
  poke in'ptr in'value = do
    (#poke sk_jpegencoder_options_t, fQuality) in'ptr in'value.fQuality
    (#poke sk_jpegencoder_options_t, fDownsample) in'ptr in'value.fDownsample
    (#poke sk_jpegencoder_options_t, fAlphaOption) in'ptr in'value.fAlphaOption
    (#poke sk_jpegencoder_options_t, xmpMetadata) in'ptr in'value.xmpMetadata
    (#poke sk_jpegencoder_options_t, fICCProfile) in'ptr in'value.fICCProfile
    (#poke sk_jpegencoder_options_t, fICCProfileDescription) in'ptr in'value.fICCProfileDescription
-- | `sk_webpencoder_compression_t`
newtype Sk_webpencoder_compression = Sk_webpencoder_compression (#type sk_webpencoder_compression_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `LOSSY_SK_WEBPENCODER_COMPTRESSION`
sk_webpencoder_compression'LOSSY_SK_WEBPENCODER_COMPTRESSION :: Sk_webpencoder_compression
sk_webpencoder_compression'LOSSY_SK_WEBPENCODER_COMPTRESSION = #const LOSSY_SK_WEBPENCODER_COMPTRESSION
-- | `LOSSLESS_SK_WEBPENCODER_COMPTRESSION`
sk_webpencoder_compression'LOSSLESS_SK_WEBPENCODER_COMPTRESSION :: Sk_webpencoder_compression
sk_webpencoder_compression'LOSSLESS_SK_WEBPENCODER_COMPTRESSION = #const LOSSLESS_SK_WEBPENCODER_COMPTRESSION
-- | `sk_webpencoder_options_t`
data Sk_webpencoder_options = Sk_webpencoder_options
  { fCompression :: Sk_webpencoder_compression
  -- ^ `fCompression`
  , fQuality :: CFloat
  -- ^ `fQuality`
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile)
  -- ^ `fICCProfile`
  , fICCProfileDescription :: Ptr (CChar)
  -- ^ `fICCProfileDescription`
  } deriving (Show, Eq, Ord)
instance Offset "fCompression" Sk_webpencoder_options where rawOffset = (#offset sk_webpencoder_options_t, fCompression)
instance Offset "fQuality" Sk_webpencoder_options where rawOffset = (#offset sk_webpencoder_options_t, fQuality)
instance Offset "fICCProfile" Sk_webpencoder_options where rawOffset = (#offset sk_webpencoder_options_t, fICCProfile)
instance Offset "fICCProfileDescription" Sk_webpencoder_options where rawOffset = (#offset sk_webpencoder_options_t, fICCProfileDescription)
instance Storable Sk_webpencoder_options where
  sizeOf _ = (#size sk_webpencoder_options_t)
  alignment _ = (#alignment sk_webpencoder_options_t)
  peek in'ptr = do
    fCompression <- (#peek sk_webpencoder_options_t, fCompression) in'ptr
    fQuality <- (#peek sk_webpencoder_options_t, fQuality) in'ptr
    fICCProfile <- (#peek sk_webpencoder_options_t, fICCProfile) in'ptr
    fICCProfileDescription <- (#peek sk_webpencoder_options_t, fICCProfileDescription) in'ptr
    pure Sk_webpencoder_options{..}
  poke in'ptr in'value = do
    (#poke sk_webpencoder_options_t, fCompression) in'ptr in'value.fCompression
    (#poke sk_webpencoder_options_t, fQuality) in'ptr in'value.fQuality
    (#poke sk_webpencoder_options_t, fICCProfile) in'ptr in'value.fICCProfile
    (#poke sk_webpencoder_options_t, fICCProfileDescription) in'ptr in'value.fICCProfileDescription
-- | `sk_rrect_t`
data Sk_rrect = Sk_rrect
  deriving (Show, Eq, Ord)
-- | `sk_rrect_type_t`
newtype Sk_rrect_type = Sk_rrect_type (#type sk_rrect_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `EMPTY_SK_RRECT_TYPE`
sk_rrect_type'EMPTY_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'EMPTY_SK_RRECT_TYPE = #const EMPTY_SK_RRECT_TYPE
-- | `RECT_SK_RRECT_TYPE`
sk_rrect_type'RECT_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'RECT_SK_RRECT_TYPE = #const RECT_SK_RRECT_TYPE
-- | `OVAL_SK_RRECT_TYPE`
sk_rrect_type'OVAL_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'OVAL_SK_RRECT_TYPE = #const OVAL_SK_RRECT_TYPE
-- | `SIMPLE_SK_RRECT_TYPE`
sk_rrect_type'SIMPLE_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'SIMPLE_SK_RRECT_TYPE = #const SIMPLE_SK_RRECT_TYPE
-- | `NINE_PATCH_SK_RRECT_TYPE`
sk_rrect_type'NINE_PATCH_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'NINE_PATCH_SK_RRECT_TYPE = #const NINE_PATCH_SK_RRECT_TYPE
-- | `COMPLEX_SK_RRECT_TYPE`
sk_rrect_type'COMPLEX_SK_RRECT_TYPE :: Sk_rrect_type
sk_rrect_type'COMPLEX_SK_RRECT_TYPE = #const COMPLEX_SK_RRECT_TYPE
-- | `sk_rrect_corner_t`
newtype Sk_rrect_corner = Sk_rrect_corner (#type sk_rrect_corner_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `UPPER_LEFT_SK_RRECT_CORNER`
sk_rrect_corner'UPPER_LEFT_SK_RRECT_CORNER :: Sk_rrect_corner
sk_rrect_corner'UPPER_LEFT_SK_RRECT_CORNER = #const UPPER_LEFT_SK_RRECT_CORNER
-- | `UPPER_RIGHT_SK_RRECT_CORNER`
sk_rrect_corner'UPPER_RIGHT_SK_RRECT_CORNER :: Sk_rrect_corner
sk_rrect_corner'UPPER_RIGHT_SK_RRECT_CORNER = #const UPPER_RIGHT_SK_RRECT_CORNER
-- | `LOWER_RIGHT_SK_RRECT_CORNER`
sk_rrect_corner'LOWER_RIGHT_SK_RRECT_CORNER :: Sk_rrect_corner
sk_rrect_corner'LOWER_RIGHT_SK_RRECT_CORNER = #const LOWER_RIGHT_SK_RRECT_CORNER
-- | `LOWER_LEFT_SK_RRECT_CORNER`
sk_rrect_corner'LOWER_LEFT_SK_RRECT_CORNER :: Sk_rrect_corner
sk_rrect_corner'LOWER_LEFT_SK_RRECT_CORNER = #const LOWER_LEFT_SK_RRECT_CORNER
-- | `sk_textblob_t`
data Sk_textblob = Sk_textblob
  deriving (Show, Eq, Ord)
-- | `sk_textblob_builder_t`
data Sk_textblob_builder = Sk_textblob_builder
  deriving (Show, Eq, Ord)
-- | `sk_textblob_builder_runbuffer_t`
data Sk_textblob_builder_runbuffer = Sk_textblob_builder_runbuffer
  { glyphs :: Ptr (())
  -- ^ `glyphs`
  , pos :: Ptr (())
  -- ^ `pos`
  , utf8text :: Ptr (())
  -- ^ `utf8text`
  , clusters :: Ptr (())
  -- ^ `clusters`
  } deriving (Show, Eq, Ord)
instance Offset "glyphs" Sk_textblob_builder_runbuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, glyphs)
instance Offset "pos" Sk_textblob_builder_runbuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, pos)
instance Offset "utf8text" Sk_textblob_builder_runbuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, utf8text)
instance Offset "clusters" Sk_textblob_builder_runbuffer where rawOffset = (#offset sk_textblob_builder_runbuffer_t, clusters)
instance Storable Sk_textblob_builder_runbuffer where
  sizeOf _ = (#size sk_textblob_builder_runbuffer_t)
  alignment _ = (#alignment sk_textblob_builder_runbuffer_t)
  peek in'ptr = do
    glyphs <- (#peek sk_textblob_builder_runbuffer_t, glyphs) in'ptr
    pos <- (#peek sk_textblob_builder_runbuffer_t, pos) in'ptr
    utf8text <- (#peek sk_textblob_builder_runbuffer_t, utf8text) in'ptr
    clusters <- (#peek sk_textblob_builder_runbuffer_t, clusters) in'ptr
    pure Sk_textblob_builder_runbuffer{..}
  poke in'ptr in'value = do
    (#poke sk_textblob_builder_runbuffer_t, glyphs) in'ptr in'value.glyphs
    (#poke sk_textblob_builder_runbuffer_t, pos) in'ptr in'value.pos
    (#poke sk_textblob_builder_runbuffer_t, utf8text) in'ptr in'value.utf8text
    (#poke sk_textblob_builder_runbuffer_t, clusters) in'ptr in'value.clusters
-- | `sk_rsxform_t`
data Sk_rsxform = Sk_rsxform
  { fSCos :: CFloat
  -- ^ `fSCos`
  , fSSin :: CFloat
  -- ^ `fSSin`
  , fTX :: CFloat
  -- ^ `fTX`
  , fTY :: CFloat
  -- ^ `fTY`
  } deriving (Show, Eq, Ord)
instance Offset "fSCos" Sk_rsxform where rawOffset = (#offset sk_rsxform_t, fSCos)
instance Offset "fSSin" Sk_rsxform where rawOffset = (#offset sk_rsxform_t, fSSin)
instance Offset "fTX" Sk_rsxform where rawOffset = (#offset sk_rsxform_t, fTX)
instance Offset "fTY" Sk_rsxform where rawOffset = (#offset sk_rsxform_t, fTY)
instance Storable Sk_rsxform where
  sizeOf _ = (#size sk_rsxform_t)
  alignment _ = (#alignment sk_rsxform_t)
  peek in'ptr = do
    fSCos <- (#peek sk_rsxform_t, fSCos) in'ptr
    fSSin <- (#peek sk_rsxform_t, fSSin) in'ptr
    fTX <- (#peek sk_rsxform_t, fTX) in'ptr
    fTY <- (#peek sk_rsxform_t, fTY) in'ptr
    pure Sk_rsxform{..}
  poke in'ptr in'value = do
    (#poke sk_rsxform_t, fSCos) in'ptr in'value.fSCos
    (#poke sk_rsxform_t, fSSin) in'ptr in'value.fSSin
    (#poke sk_rsxform_t, fTX) in'ptr in'value.fTX
    (#poke sk_rsxform_t, fTY) in'ptr in'value.fTY
-- | `sk_tracememorydump_t`
data Sk_tracememorydump = Sk_tracememorydump
  deriving (Show, Eq, Ord)
-- | `sk_runtimeeffect_t`
data Sk_runtimeeffect = Sk_runtimeeffect
  deriving (Show, Eq, Ord)
-- | `sk_runtimeeffect_uniform_type_t`
newtype Sk_runtimeeffect_uniform_type = Sk_runtimeeffect_uniform_type (#type sk_runtimeeffect_uniform_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE`
sk_runtimeeffect_uniform_type'INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
sk_runtimeeffect_uniform_type'INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = #const INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
-- | `sk_runtimeeffect_child_type_t`
newtype Sk_runtimeeffect_child_type = Sk_runtimeeffect_child_type (#type sk_runtimeeffect_child_type_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE`
sk_runtimeeffect_child_type'SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
sk_runtimeeffect_child_type'SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE = #const SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE`
sk_runtimeeffect_child_type'COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
sk_runtimeeffect_child_type'COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE = #const COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE`
sk_runtimeeffect_child_type'BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
sk_runtimeeffect_child_type'BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE = #const BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE
-- | `sk_runtimeeffect_uniform_flags_t`
newtype Sk_runtimeeffect_uniform_flags = Sk_runtimeeffect_uniform_flags (#type sk_runtimeeffect_uniform_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS`
sk_runtimeeffect_uniform_flags'HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
sk_runtimeeffect_uniform_flags'HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = #const HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS
-- | `sk_runtimeeffect_uniform_t`
data Sk_runtimeeffect_uniform = Sk_runtimeeffect_uniform
  { fName :: Ptr (CChar)
  -- ^ `fName`
  , fNameLength :: CSize
  -- ^ `fNameLength`
  , fOffset :: CSize
  -- ^ `fOffset`
  , fType :: Sk_runtimeeffect_uniform_type
  -- ^ `fType`
  , fCount :: CInt
  -- ^ `fCount`
  , fFlags :: Sk_runtimeeffect_uniform_flags
  -- ^ `fFlags`
  } deriving (Show, Eq, Ord)
instance Offset "fName" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fName)
instance Offset "fNameLength" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fNameLength)
instance Offset "fOffset" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fOffset)
instance Offset "fType" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fType)
instance Offset "fCount" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fCount)
instance Offset "fFlags" Sk_runtimeeffect_uniform where rawOffset = (#offset sk_runtimeeffect_uniform_t, fFlags)
instance Storable Sk_runtimeeffect_uniform where
  sizeOf _ = (#size sk_runtimeeffect_uniform_t)
  alignment _ = (#alignment sk_runtimeeffect_uniform_t)
  peek in'ptr = do
    fName <- (#peek sk_runtimeeffect_uniform_t, fName) in'ptr
    fNameLength <- (#peek sk_runtimeeffect_uniform_t, fNameLength) in'ptr
    fOffset <- (#peek sk_runtimeeffect_uniform_t, fOffset) in'ptr
    fType <- (#peek sk_runtimeeffect_uniform_t, fType) in'ptr
    fCount <- (#peek sk_runtimeeffect_uniform_t, fCount) in'ptr
    fFlags <- (#peek sk_runtimeeffect_uniform_t, fFlags) in'ptr
    pure Sk_runtimeeffect_uniform{..}
  poke in'ptr in'value = do
    (#poke sk_runtimeeffect_uniform_t, fName) in'ptr in'value.fName
    (#poke sk_runtimeeffect_uniform_t, fNameLength) in'ptr in'value.fNameLength
    (#poke sk_runtimeeffect_uniform_t, fOffset) in'ptr in'value.fOffset
    (#poke sk_runtimeeffect_uniform_t, fType) in'ptr in'value.fType
    (#poke sk_runtimeeffect_uniform_t, fCount) in'ptr in'value.fCount
    (#poke sk_runtimeeffect_uniform_t, fFlags) in'ptr in'value.fFlags
-- | `sk_runtimeeffect_child_t`
data Sk_runtimeeffect_child = Sk_runtimeeffect_child
  { fName :: Ptr (CChar)
  -- ^ `fName`
  , fNameLength :: CSize
  -- ^ `fNameLength`
  , fType :: Sk_runtimeeffect_child_type
  -- ^ `fType`
  , fIndex :: CInt
  -- ^ `fIndex`
  } deriving (Show, Eq, Ord)
instance Offset "fName" Sk_runtimeeffect_child where rawOffset = (#offset sk_runtimeeffect_child_t, fName)
instance Offset "fNameLength" Sk_runtimeeffect_child where rawOffset = (#offset sk_runtimeeffect_child_t, fNameLength)
instance Offset "fType" Sk_runtimeeffect_child where rawOffset = (#offset sk_runtimeeffect_child_t, fType)
instance Offset "fIndex" Sk_runtimeeffect_child where rawOffset = (#offset sk_runtimeeffect_child_t, fIndex)
instance Storable Sk_runtimeeffect_child where
  sizeOf _ = (#size sk_runtimeeffect_child_t)
  alignment _ = (#alignment sk_runtimeeffect_child_t)
  peek in'ptr = do
    fName <- (#peek sk_runtimeeffect_child_t, fName) in'ptr
    fNameLength <- (#peek sk_runtimeeffect_child_t, fNameLength) in'ptr
    fType <- (#peek sk_runtimeeffect_child_t, fType) in'ptr
    fIndex <- (#peek sk_runtimeeffect_child_t, fIndex) in'ptr
    pure Sk_runtimeeffect_child{..}
  poke in'ptr in'value = do
    (#poke sk_runtimeeffect_child_t, fName) in'ptr in'value.fName
    (#poke sk_runtimeeffect_child_t, fNameLength) in'ptr in'value.fNameLength
    (#poke sk_runtimeeffect_child_t, fType) in'ptr in'value.fType
    (#poke sk_runtimeeffect_child_t, fIndex) in'ptr in'value.fIndex
-- | `sk_filter_mode_t`
newtype Sk_filter_mode = Sk_filter_mode (#type sk_filter_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NEAREST_SK_FILTER_MODE`
sk_filter_mode'NEAREST_SK_FILTER_MODE :: Sk_filter_mode
sk_filter_mode'NEAREST_SK_FILTER_MODE = #const NEAREST_SK_FILTER_MODE
-- | `LINEAR_SK_FILTER_MODE`
sk_filter_mode'LINEAR_SK_FILTER_MODE :: Sk_filter_mode
sk_filter_mode'LINEAR_SK_FILTER_MODE = #const LINEAR_SK_FILTER_MODE
-- | `sk_mipmap_mode_t`
newtype Sk_mipmap_mode = Sk_mipmap_mode (#type sk_mipmap_mode_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_MIPMAP_MODE`
sk_mipmap_mode'NONE_SK_MIPMAP_MODE :: Sk_mipmap_mode
sk_mipmap_mode'NONE_SK_MIPMAP_MODE = #const NONE_SK_MIPMAP_MODE
-- | `NEAREST_SK_MIPMAP_MODE`
sk_mipmap_mode'NEAREST_SK_MIPMAP_MODE :: Sk_mipmap_mode
sk_mipmap_mode'NEAREST_SK_MIPMAP_MODE = #const NEAREST_SK_MIPMAP_MODE
-- | `LINEAR_SK_MIPMAP_MODE`
sk_mipmap_mode'LINEAR_SK_MIPMAP_MODE :: Sk_mipmap_mode
sk_mipmap_mode'LINEAR_SK_MIPMAP_MODE = #const LINEAR_SK_MIPMAP_MODE
-- | `sk_cubic_resampler_t`
data Sk_cubic_resampler = Sk_cubic_resampler
  { fB :: CFloat
  -- ^ `fB`
  , fC :: CFloat
  -- ^ `fC`
  } deriving (Show, Eq, Ord)
instance Offset "fB" Sk_cubic_resampler where rawOffset = (#offset sk_cubic_resampler_t, fB)
instance Offset "fC" Sk_cubic_resampler where rawOffset = (#offset sk_cubic_resampler_t, fC)
instance Storable Sk_cubic_resampler where
  sizeOf _ = (#size sk_cubic_resampler_t)
  alignment _ = (#alignment sk_cubic_resampler_t)
  peek in'ptr = do
    fB <- (#peek sk_cubic_resampler_t, fB) in'ptr
    fC <- (#peek sk_cubic_resampler_t, fC) in'ptr
    pure Sk_cubic_resampler{..}
  poke in'ptr in'value = do
    (#poke sk_cubic_resampler_t, fB) in'ptr in'value.fB
    (#poke sk_cubic_resampler_t, fC) in'ptr in'value.fC
-- | `sk_sampling_options_t`
data Sk_sampling_options = Sk_sampling_options
  { fMaxAniso :: CInt
  -- ^ `fMaxAniso`
  , fUseCubic :: CBool
  -- ^ `fUseCubic`
  , fCubic :: Sk_cubic_resampler
  -- ^ `fCubic`
  , fFilter :: Sk_filter_mode
  -- ^ `fFilter`
  , fMipmap :: Sk_mipmap_mode
  -- ^ `fMipmap`
  } deriving (Show, Eq, Ord)
instance Offset "fMaxAniso" Sk_sampling_options where rawOffset = (#offset sk_sampling_options_t, fMaxAniso)
instance Offset "fUseCubic" Sk_sampling_options where rawOffset = (#offset sk_sampling_options_t, fUseCubic)
instance Offset "fCubic" Sk_sampling_options where rawOffset = (#offset sk_sampling_options_t, fCubic)
instance Offset "fFilter" Sk_sampling_options where rawOffset = (#offset sk_sampling_options_t, fFilter)
instance Offset "fMipmap" Sk_sampling_options where rawOffset = (#offset sk_sampling_options_t, fMipmap)
instance Storable Sk_sampling_options where
  sizeOf _ = (#size sk_sampling_options_t)
  alignment _ = (#alignment sk_sampling_options_t)
  peek in'ptr = do
    fMaxAniso <- (#peek sk_sampling_options_t, fMaxAniso) in'ptr
    fUseCubic <- (#peek sk_sampling_options_t, fUseCubic) in'ptr
    fCubic <- (#peek sk_sampling_options_t, fCubic) in'ptr
    fFilter <- (#peek sk_sampling_options_t, fFilter) in'ptr
    fMipmap <- (#peek sk_sampling_options_t, fMipmap) in'ptr
    pure Sk_sampling_options{..}
  poke in'ptr in'value = do
    (#poke sk_sampling_options_t, fMaxAniso) in'ptr in'value.fMaxAniso
    (#poke sk_sampling_options_t, fUseCubic) in'ptr in'value.fUseCubic
    (#poke sk_sampling_options_t, fCubic) in'ptr in'value.fCubic
    (#poke sk_sampling_options_t, fFilter) in'ptr in'value.fFilter
    (#poke sk_sampling_options_t, fMipmap) in'ptr in'value.fMipmap
-- | `sk_canvas_savelayerrec_flags_t`
newtype Sk_canvas_savelayerrec_flags = Sk_canvas_savelayerrec_flags (#type sk_canvas_savelayerrec_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SK_CANVAS_SAVELAYERREC_FLAGS`
sk_canvas_savelayerrec_flags'NONE_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
sk_canvas_savelayerrec_flags'NONE_SK_CANVAS_SAVELAYERREC_FLAGS = #const NONE_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS`
sk_canvas_savelayerrec_flags'PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
sk_canvas_savelayerrec_flags'PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS = #const PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS`
sk_canvas_savelayerrec_flags'INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
sk_canvas_savelayerrec_flags'INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS = #const INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS`
sk_canvas_savelayerrec_flags'F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
sk_canvas_savelayerrec_flags'F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS = #const F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS
-- | `sk_canvas_savelayerrec_t`
data Sk_canvas_savelayerrec = Sk_canvas_savelayerrec
  { fBounds :: Ptr (Sk_rect)
  -- ^ `fBounds`
  , fPaint :: Ptr (Sk_paint)
  -- ^ `fPaint`
  , fBackdrop :: Ptr (Sk_imagefilter)
  -- ^ `fBackdrop`
  , fFlags :: Sk_canvas_savelayerrec_flags
  -- ^ `fFlags`
  } deriving (Show, Eq, Ord)
instance Offset "fBounds" Sk_canvas_savelayerrec where rawOffset = (#offset sk_canvas_savelayerrec_t, fBounds)
instance Offset "fPaint" Sk_canvas_savelayerrec where rawOffset = (#offset sk_canvas_savelayerrec_t, fPaint)
instance Offset "fBackdrop" Sk_canvas_savelayerrec where rawOffset = (#offset sk_canvas_savelayerrec_t, fBackdrop)
instance Offset "fFlags" Sk_canvas_savelayerrec where rawOffset = (#offset sk_canvas_savelayerrec_t, fFlags)
instance Storable Sk_canvas_savelayerrec where
  sizeOf _ = (#size sk_canvas_savelayerrec_t)
  alignment _ = (#alignment sk_canvas_savelayerrec_t)
  peek in'ptr = do
    fBounds <- (#peek sk_canvas_savelayerrec_t, fBounds) in'ptr
    fPaint <- (#peek sk_canvas_savelayerrec_t, fPaint) in'ptr
    fBackdrop <- (#peek sk_canvas_savelayerrec_t, fBackdrop) in'ptr
    fFlags <- (#peek sk_canvas_savelayerrec_t, fFlags) in'ptr
    pure Sk_canvas_savelayerrec{..}
  poke in'ptr in'value = do
    (#poke sk_canvas_savelayerrec_t, fBounds) in'ptr in'value.fBounds
    (#poke sk_canvas_savelayerrec_t, fPaint) in'ptr in'value.fPaint
    (#poke sk_canvas_savelayerrec_t, fBackdrop) in'ptr in'value.fBackdrop
    (#poke sk_canvas_savelayerrec_t, fFlags) in'ptr in'value.fFlags
-- | `skottie_animation_t`
data Skottie_animation = Skottie_animation
  deriving (Show, Eq, Ord)
-- | `skottie_animation_builder_t`
data Skottie_animation_builder = Skottie_animation_builder
  deriving (Show, Eq, Ord)
-- | `skottie_resource_provider_t`
data Skottie_resource_provider = Skottie_resource_provider
  deriving (Show, Eq, Ord)
-- | `skottie_property_observer_t`
data Skottie_property_observer = Skottie_property_observer
  deriving (Show, Eq, Ord)
-- | `skottie_logger_t`
data Skottie_logger = Skottie_logger
  deriving (Show, Eq, Ord)
-- | `skottie_marker_observer_t`
data Skottie_marker_observer = Skottie_marker_observer
  deriving (Show, Eq, Ord)
-- | `sksg_invalidation_controller_t`
data Sksg_invalidation_controller = Sksg_invalidation_controller
  deriving (Show, Eq, Ord)
-- | `skottie_animation_renderflags_t`
newtype Skottie_animation_renderflags = Skottie_animation_renderflags (#type skottie_animation_renderflags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `SKIP_TOP_LEVEL_ISOLATION`
skottie_animation_renderflags'SKIP_TOP_LEVEL_ISOLATION :: Skottie_animation_renderflags
skottie_animation_renderflags'SKIP_TOP_LEVEL_ISOLATION = #const SKIP_TOP_LEVEL_ISOLATION
-- | `DISABLE_TOP_LEVEL_CLIPPING`
skottie_animation_renderflags'DISABLE_TOP_LEVEL_CLIPPING :: Skottie_animation_renderflags
skottie_animation_renderflags'DISABLE_TOP_LEVEL_CLIPPING = #const DISABLE_TOP_LEVEL_CLIPPING
-- | `skottie_animation_builder_flags_t`
newtype Skottie_animation_builder_flags = Skottie_animation_builder_flags (#type skottie_animation_builder_flags_t)
  deriving (Show, Eq, Ord) deriving newtype (Num, Bits, Storable)
-- | `NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottie_animation_builder_flags'NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
skottie_animation_builder_flags'NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS = #const NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottie_animation_builder_flags'DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
skottie_animation_builder_flags'DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS = #const DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS`
skottie_animation_builder_flags'PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
skottie_animation_builder_flags'PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS = #const PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS
-- | `skottie_animation_builder_stats_t`
data Skottie_animation_builder_stats = Skottie_animation_builder_stats
  { fTotalLoadTimeMS :: CFloat
  -- ^ `fTotalLoadTimeMS`
  , fJsonParseTimeMS :: CFloat
  -- ^ `fJsonParseTimeMS`
  , fSceneParseTimeMS :: CFloat
  -- ^ `fSceneParseTimeMS`
  , fJsonSize :: CSize
  -- ^ `fJsonSize`
  , fAnimatorCount :: CSize
  -- ^ `fAnimatorCount`
  } deriving (Show, Eq, Ord)
instance Offset "fTotalLoadTimeMS" Skottie_animation_builder_stats where rawOffset = (#offset skottie_animation_builder_stats_t, fTotalLoadTimeMS)
instance Offset "fJsonParseTimeMS" Skottie_animation_builder_stats where rawOffset = (#offset skottie_animation_builder_stats_t, fJsonParseTimeMS)
instance Offset "fSceneParseTimeMS" Skottie_animation_builder_stats where rawOffset = (#offset skottie_animation_builder_stats_t, fSceneParseTimeMS)
instance Offset "fJsonSize" Skottie_animation_builder_stats where rawOffset = (#offset skottie_animation_builder_stats_t, fJsonSize)
instance Offset "fAnimatorCount" Skottie_animation_builder_stats where rawOffset = (#offset skottie_animation_builder_stats_t, fAnimatorCount)
instance Storable Skottie_animation_builder_stats where
  sizeOf _ = (#size skottie_animation_builder_stats_t)
  alignment _ = (#alignment skottie_animation_builder_stats_t)
  peek in'ptr = do
    fTotalLoadTimeMS <- (#peek skottie_animation_builder_stats_t, fTotalLoadTimeMS) in'ptr
    fJsonParseTimeMS <- (#peek skottie_animation_builder_stats_t, fJsonParseTimeMS) in'ptr
    fSceneParseTimeMS <- (#peek skottie_animation_builder_stats_t, fSceneParseTimeMS) in'ptr
    fJsonSize <- (#peek skottie_animation_builder_stats_t, fJsonSize) in'ptr
    fAnimatorCount <- (#peek skottie_animation_builder_stats_t, fAnimatorCount) in'ptr
    pure Skottie_animation_builder_stats{..}
  poke in'ptr in'value = do
    (#poke skottie_animation_builder_stats_t, fTotalLoadTimeMS) in'ptr in'value.fTotalLoadTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonParseTimeMS) in'ptr in'value.fJsonParseTimeMS
    (#poke skottie_animation_builder_stats_t, fSceneParseTimeMS) in'ptr in'value.fSceneParseTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonSize) in'ptr in'value.fJsonSize
    (#poke skottie_animation_builder_stats_t, fAnimatorCount) in'ptr in'value.fAnimatorCount
-- | `skresources_image_asset_t`
data Skresources_image_asset = Skresources_image_asset
  deriving (Show, Eq, Ord)
-- | `skresources_multi_frame_image_asset_t`
data Skresources_multi_frame_image_asset = Skresources_multi_frame_image_asset
  deriving (Show, Eq, Ord)
-- | `skresources_external_track_asset_t`
data Skresources_external_track_asset = Skresources_external_track_asset
  deriving (Show, Eq, Ord)
-- | `skresources_resource_provider_t`
data Skresources_resource_provider = Skresources_resource_provider
  deriving (Show, Eq, Ord)
-- | `d3d_dxgi_adapter_t`
data D3d_dxgi_adapter = D3d_dxgi_adapter
  deriving (Show, Eq, Ord)
-- | `d3d_d12_device_t`
data D3d_d12_device = D3d_d12_device
  deriving (Show, Eq, Ord)
-- | `d3d_d12_command_queue_t`
data D3d_d12_command_queue = D3d_d12_command_queue
  deriving (Show, Eq, Ord)
-- | `gr_d3d_memory_allocator_t`
data Gr_d3d_memory_allocator = Gr_d3d_memory_allocator
  deriving (Show, Eq, Ord)
-- | `gr_d3d_backendcontext_t`
data Gr_d3d_backendcontext = Gr_d3d_backendcontext
  { fAdapter :: Ptr (D3d_dxgi_adapter)
  -- ^ `fAdapter`
  , fDevice :: Ptr (D3d_d12_device)
  -- ^ `fDevice`
  , fQueue :: Ptr (D3d_d12_command_queue)
  -- ^ `fQueue`
  , fMemoryAllocator :: Ptr (Gr_d3d_memory_allocator)
  -- ^ `fMemoryAllocator`
  , fProtectedContext :: CBool
  -- ^ `fProtectedContext`
  } deriving (Show, Eq, Ord)
instance Offset "fAdapter" Gr_d3d_backendcontext where rawOffset = (#offset gr_d3d_backendcontext_t, fAdapter)
instance Offset "fDevice" Gr_d3d_backendcontext where rawOffset = (#offset gr_d3d_backendcontext_t, fDevice)
instance Offset "fQueue" Gr_d3d_backendcontext where rawOffset = (#offset gr_d3d_backendcontext_t, fQueue)
instance Offset "fMemoryAllocator" Gr_d3d_backendcontext where rawOffset = (#offset gr_d3d_backendcontext_t, fMemoryAllocator)
instance Offset "fProtectedContext" Gr_d3d_backendcontext where rawOffset = (#offset gr_d3d_backendcontext_t, fProtectedContext)
instance Storable Gr_d3d_backendcontext where
  sizeOf _ = (#size gr_d3d_backendcontext_t)
  alignment _ = (#alignment gr_d3d_backendcontext_t)
  peek in'ptr = do
    fAdapter <- (#peek gr_d3d_backendcontext_t, fAdapter) in'ptr
    fDevice <- (#peek gr_d3d_backendcontext_t, fDevice) in'ptr
    fQueue <- (#peek gr_d3d_backendcontext_t, fQueue) in'ptr
    fMemoryAllocator <- (#peek gr_d3d_backendcontext_t, fMemoryAllocator) in'ptr
    fProtectedContext <- (#peek gr_d3d_backendcontext_t, fProtectedContext) in'ptr
    pure Gr_d3d_backendcontext{..}
  poke in'ptr in'value = do
    (#poke gr_d3d_backendcontext_t, fAdapter) in'ptr in'value.fAdapter
    (#poke gr_d3d_backendcontext_t, fDevice) in'ptr in'value.fDevice
    (#poke gr_d3d_backendcontext_t, fQueue) in'ptr in'value.fQueue
    (#poke gr_d3d_backendcontext_t, fMemoryAllocator) in'ptr in'value.fMemoryAllocator
    (#poke gr_d3d_backendcontext_t, fProtectedContext) in'ptr in'value.fProtectedContext
-- | `d3d_d12_resource_t`
data D3d_d12_resource = D3d_d12_resource
  deriving (Show, Eq, Ord)
-- | `d3d_alloc_t`
data D3d_alloc = D3d_alloc
  deriving (Show, Eq, Ord)
-- | `gr_d3d_textureresourceinfo_t`
data Gr_d3d_textureresourceinfo = Gr_d3d_textureresourceinfo
  { fResource :: Ptr (D3d_d12_resource)
  -- ^ `fResource`
  , fAlloc :: Ptr (D3d_alloc)
  -- ^ `fAlloc`
  , fResourceState :: Word32
  -- ^ `fResourceState`
  , fFormat :: Word32
  -- ^ `fFormat`
  , fSampleCount :: Word32
  -- ^ `fSampleCount`
  , fLevelCount :: Word32
  -- ^ `fLevelCount`
  , fSampleQualityPattern :: CUInt
  -- ^ `fSampleQualityPattern`
  , fProtected :: CBool
  -- ^ `fProtected`
  } deriving (Show, Eq, Ord)
instance Offset "fResource" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResource)
instance Offset "fAlloc" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fAlloc)
instance Offset "fResourceState" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResourceState)
instance Offset "fFormat" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fFormat)
instance Offset "fSampleCount" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleCount)
instance Offset "fLevelCount" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fLevelCount)
instance Offset "fSampleQualityPattern" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleQualityPattern)
instance Offset "fProtected" Gr_d3d_textureresourceinfo where rawOffset = (#offset gr_d3d_textureresourceinfo_t, fProtected)
instance Storable Gr_d3d_textureresourceinfo where
  sizeOf _ = (#size gr_d3d_textureresourceinfo_t)
  alignment _ = (#alignment gr_d3d_textureresourceinfo_t)
  peek in'ptr = do
    fResource <- (#peek gr_d3d_textureresourceinfo_t, fResource) in'ptr
    fAlloc <- (#peek gr_d3d_textureresourceinfo_t, fAlloc) in'ptr
    fResourceState <- (#peek gr_d3d_textureresourceinfo_t, fResourceState) in'ptr
    fFormat <- (#peek gr_d3d_textureresourceinfo_t, fFormat) in'ptr
    fSampleCount <- (#peek gr_d3d_textureresourceinfo_t, fSampleCount) in'ptr
    fLevelCount <- (#peek gr_d3d_textureresourceinfo_t, fLevelCount) in'ptr
    fSampleQualityPattern <- (#peek gr_d3d_textureresourceinfo_t, fSampleQualityPattern) in'ptr
    fProtected <- (#peek gr_d3d_textureresourceinfo_t, fProtected) in'ptr
    pure Gr_d3d_textureresourceinfo{..}
  poke in'ptr in'value = do
    (#poke gr_d3d_textureresourceinfo_t, fResource) in'ptr in'value.fResource
    (#poke gr_d3d_textureresourceinfo_t, fAlloc) in'ptr in'value.fAlloc
    (#poke gr_d3d_textureresourceinfo_t, fResourceState) in'ptr in'value.fResourceState
    (#poke gr_d3d_textureresourceinfo_t, fFormat) in'ptr in'value.fFormat
    (#poke gr_d3d_textureresourceinfo_t, fSampleCount) in'ptr in'value.fSampleCount
    (#poke gr_d3d_textureresourceinfo_t, fLevelCount) in'ptr in'value.fLevelCount
    (#poke gr_d3d_textureresourceinfo_t, fSampleQualityPattern) in'ptr in'value.fSampleQualityPattern
    (#poke gr_d3d_textureresourceinfo_t, fProtected) in'ptr in'value.fProtected
-- | `sk_colorfilter_unref`
foreign import ccall "sk_colorfilter_unref" sk_colorfilter_unref :: (Ptr (Sk_colorfilter)) -> IO (())
-- | `sk_colorfilter_new_mode`
foreign import ccall "sk_colorfilter_new_mode" sk_colorfilter_new_mode :: (Sk_color) -> (Sk_blendmode) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_lighting`
foreign import ccall "sk_colorfilter_new_lighting" sk_colorfilter_new_lighting :: (Sk_color) -> (Sk_color) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_compose`
foreign import ccall "sk_colorfilter_new_compose" sk_colorfilter_new_compose :: (Ptr (Sk_colorfilter)) -> (Ptr (Sk_colorfilter)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_color_matrix`
foreign import ccall "sk_colorfilter_new_color_matrix" sk_colorfilter_new_color_matrix :: (Ptr (CFloat)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_hsla_matrix`
foreign import ccall "sk_colorfilter_new_hsla_matrix" sk_colorfilter_new_hsla_matrix :: (Ptr (CFloat)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_linear_to_srgb_gamma`
foreign import ccall "sk_colorfilter_new_linear_to_srgb_gamma" sk_colorfilter_new_linear_to_srgb_gamma :: IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_srgb_to_linear_gamma`
foreign import ccall "sk_colorfilter_new_srgb_to_linear_gamma" sk_colorfilter_new_srgb_to_linear_gamma :: IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_lerp`
foreign import ccall "sk_colorfilter_new_lerp" sk_colorfilter_new_lerp :: (CFloat) -> (Ptr (Sk_colorfilter)) -> (Ptr (Sk_colorfilter)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_luma_color`
foreign import ccall "sk_colorfilter_new_luma_color" sk_colorfilter_new_luma_color :: IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_high_contrast`
foreign import ccall "sk_colorfilter_new_high_contrast" sk_colorfilter_new_high_contrast :: (Ptr (Sk_highcontrastconfig)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_table`
foreign import ccall "sk_colorfilter_new_table" sk_colorfilter_new_table :: (Ptr (Word8)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_colorfilter_new_table_argb`
foreign import ccall "sk_colorfilter_new_table_argb" sk_colorfilter_new_table_argb :: (Ptr (Word8)) -> (Ptr (Word8)) -> (Ptr (Word8)) -> (Ptr (Word8)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_typeface_unref`
foreign import ccall "sk_typeface_unref" sk_typeface_unref :: (Ptr (Sk_typeface)) -> IO (())
-- | `sk_typeface_get_fontstyle`
foreign import ccall "sk_typeface_get_fontstyle" sk_typeface_get_fontstyle :: (Ptr (Sk_typeface)) -> IO (Ptr (Sk_fontstyle))
-- | `sk_typeface_get_font_weight`
foreign import ccall "sk_typeface_get_font_weight" sk_typeface_get_font_weight :: (Ptr (Sk_typeface)) -> IO (CInt)
-- | `sk_typeface_get_font_width`
foreign import ccall "sk_typeface_get_font_width" sk_typeface_get_font_width :: (Ptr (Sk_typeface)) -> IO (CInt)
-- | `sk_typeface_get_font_slant`
foreign import ccall "sk_typeface_get_font_slant" sk_typeface_get_font_slant :: (Ptr (Sk_typeface)) -> IO (Sk_font_style_slant)
-- | `sk_typeface_is_fixed_pitch`
foreign import ccall "sk_typeface_is_fixed_pitch" sk_typeface_is_fixed_pitch :: (Ptr (Sk_typeface)) -> IO (CBool)
-- | `sk_typeface_create_default`
foreign import ccall "sk_typeface_create_default" sk_typeface_create_default :: IO (Ptr (Sk_typeface))
-- | `sk_typeface_ref_default`
foreign import ccall "sk_typeface_ref_default" sk_typeface_ref_default :: IO (Ptr (Sk_typeface))
-- | `sk_typeface_create_from_name`
foreign import ccall "sk_typeface_create_from_name" sk_typeface_create_from_name :: (Ptr (CChar)) -> (Ptr (Sk_fontstyle)) -> IO (Ptr (Sk_typeface))
-- | `sk_typeface_create_from_file`
foreign import ccall "sk_typeface_create_from_file" sk_typeface_create_from_file :: (Ptr (CChar)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_typeface_create_from_stream`
foreign import ccall "sk_typeface_create_from_stream" sk_typeface_create_from_stream :: (Ptr (Sk_stream_asset)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_typeface_create_from_data`
foreign import ccall "sk_typeface_create_from_data" sk_typeface_create_from_data :: (Ptr (Sk_data)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_typeface_unichars_to_glyphs`
foreign import ccall "sk_typeface_unichars_to_glyphs" sk_typeface_unichars_to_glyphs :: (Ptr (Sk_typeface)) -> (Ptr (Int32)) -> (CInt) -> (Ptr (Word16)) -> IO (())
-- | `sk_typeface_unichar_to_glyph`
foreign import ccall "sk_typeface_unichar_to_glyph" sk_typeface_unichar_to_glyph :: (Ptr (Sk_typeface)) -> (Int32) -> IO (Word16)
-- | `sk_typeface_count_glyphs`
foreign import ccall "sk_typeface_count_glyphs" sk_typeface_count_glyphs :: (Ptr (Sk_typeface)) -> IO (CInt)
-- | `sk_typeface_count_tables`
foreign import ccall "sk_typeface_count_tables" sk_typeface_count_tables :: (Ptr (Sk_typeface)) -> IO (CInt)
-- | `sk_typeface_get_table_tags`
foreign import ccall "sk_typeface_get_table_tags" sk_typeface_get_table_tags :: (Ptr (Sk_typeface)) -> (Ptr (Sk_font_table_tag)) -> IO (CInt)
-- | `sk_typeface_get_table_size`
foreign import ccall "sk_typeface_get_table_size" sk_typeface_get_table_size :: (Ptr (Sk_typeface)) -> (Sk_font_table_tag) -> IO (CSize)
-- | `sk_typeface_get_table_data`
foreign import ccall "sk_typeface_get_table_data" sk_typeface_get_table_data :: (Ptr (Sk_typeface)) -> (Sk_font_table_tag) -> (CSize) -> (CSize) -> (Ptr (())) -> IO (CSize)
-- | `sk_typeface_copy_table_data`
foreign import ccall "sk_typeface_copy_table_data" sk_typeface_copy_table_data :: (Ptr (Sk_typeface)) -> (Sk_font_table_tag) -> IO (Ptr (Sk_data))
-- | `sk_typeface_get_units_per_em`
foreign import ccall "sk_typeface_get_units_per_em" sk_typeface_get_units_per_em :: (Ptr (Sk_typeface)) -> IO (CInt)
-- | `sk_typeface_get_kerning_pair_adjustments`
foreign import ccall "sk_typeface_get_kerning_pair_adjustments" sk_typeface_get_kerning_pair_adjustments :: (Ptr (Sk_typeface)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (Int32)) -> IO (CBool)
-- | `sk_typeface_get_family_name`
foreign import ccall "sk_typeface_get_family_name" sk_typeface_get_family_name :: (Ptr (Sk_typeface)) -> IO (Ptr (Sk_string))
-- | `sk_typeface_open_stream`
foreign import ccall "sk_typeface_open_stream" sk_typeface_open_stream :: (Ptr (Sk_typeface)) -> (Ptr (CInt)) -> IO (Ptr (Sk_stream_asset))
-- | `sk_fontmgr_create_default`
foreign import ccall "sk_fontmgr_create_default" sk_fontmgr_create_default :: IO (Ptr (Sk_fontmgr))
-- | `sk_fontmgr_ref_default`
foreign import ccall "sk_fontmgr_ref_default" sk_fontmgr_ref_default :: IO (Ptr (Sk_fontmgr))
-- | `sk_fontmgr_unref`
foreign import ccall "sk_fontmgr_unref" sk_fontmgr_unref :: (Ptr (Sk_fontmgr)) -> IO (())
-- | `sk_fontmgr_count_families`
foreign import ccall "sk_fontmgr_count_families" sk_fontmgr_count_families :: (Ptr (Sk_fontmgr)) -> IO (CInt)
-- | `sk_fontmgr_get_family_name`
foreign import ccall "sk_fontmgr_get_family_name" sk_fontmgr_get_family_name :: (Ptr (Sk_fontmgr)) -> (CInt) -> (Ptr (Sk_string)) -> IO (())
-- | `sk_fontmgr_create_styleset`
foreign import ccall "sk_fontmgr_create_styleset" sk_fontmgr_create_styleset :: (Ptr (Sk_fontmgr)) -> (CInt) -> IO (Ptr (Sk_fontstyleset))
-- | `sk_fontmgr_match_family`
foreign import ccall "sk_fontmgr_match_family" sk_fontmgr_match_family :: (Ptr (Sk_fontmgr)) -> (Ptr (CChar)) -> IO (Ptr (Sk_fontstyleset))
-- | `sk_fontmgr_match_family_style`
foreign import ccall "sk_fontmgr_match_family_style" sk_fontmgr_match_family_style :: (Ptr (Sk_fontmgr)) -> (Ptr (CChar)) -> (Ptr (Sk_fontstyle)) -> IO (Ptr (Sk_typeface))
-- | `sk_fontmgr_match_family_style_character`
foreign import ccall "sk_fontmgr_match_family_style_character" sk_fontmgr_match_family_style_character :: (Ptr (Sk_fontmgr)) -> (Ptr (CChar)) -> (Ptr (Sk_fontstyle)) -> (Ptr (Ptr (CChar))) -> (CInt) -> (Int32) -> IO (Ptr (Sk_typeface))
-- | `sk_fontmgr_create_from_data`
foreign import ccall "sk_fontmgr_create_from_data" sk_fontmgr_create_from_data :: (Ptr (Sk_fontmgr)) -> (Ptr (Sk_data)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_fontmgr_create_from_stream`
foreign import ccall "sk_fontmgr_create_from_stream" sk_fontmgr_create_from_stream :: (Ptr (Sk_fontmgr)) -> (Ptr (Sk_stream_asset)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_fontmgr_create_from_file`
foreign import ccall "sk_fontmgr_create_from_file" sk_fontmgr_create_from_file :: (Ptr (Sk_fontmgr)) -> (Ptr (CChar)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_fontstyle_new`
foreign import ccall "sk_fontstyle_new" sk_fontstyle_new :: (CInt) -> (CInt) -> (Sk_font_style_slant) -> IO (Ptr (Sk_fontstyle))
-- | `sk_fontstyle_delete`
foreign import ccall "sk_fontstyle_delete" sk_fontstyle_delete :: (Ptr (Sk_fontstyle)) -> IO (())
-- | `sk_fontstyle_get_weight`
foreign import ccall "sk_fontstyle_get_weight" sk_fontstyle_get_weight :: (Ptr (Sk_fontstyle)) -> IO (CInt)
-- | `sk_fontstyle_get_width`
foreign import ccall "sk_fontstyle_get_width" sk_fontstyle_get_width :: (Ptr (Sk_fontstyle)) -> IO (CInt)
-- | `sk_fontstyle_get_slant`
foreign import ccall "sk_fontstyle_get_slant" sk_fontstyle_get_slant :: (Ptr (Sk_fontstyle)) -> IO (Sk_font_style_slant)
-- | `sk_fontstyleset_create_empty`
foreign import ccall "sk_fontstyleset_create_empty" sk_fontstyleset_create_empty :: IO (Ptr (Sk_fontstyleset))
-- | `sk_fontstyleset_unref`
foreign import ccall "sk_fontstyleset_unref" sk_fontstyleset_unref :: (Ptr (Sk_fontstyleset)) -> IO (())
-- | `sk_fontstyleset_get_count`
foreign import ccall "sk_fontstyleset_get_count" sk_fontstyleset_get_count :: (Ptr (Sk_fontstyleset)) -> IO (CInt)
-- | `sk_fontstyleset_get_style`
foreign import ccall "sk_fontstyleset_get_style" sk_fontstyleset_get_style :: (Ptr (Sk_fontstyleset)) -> (CInt) -> (Ptr (Sk_fontstyle)) -> (Ptr (Sk_string)) -> IO (())
-- | `sk_fontstyleset_create_typeface`
foreign import ccall "sk_fontstyleset_create_typeface" sk_fontstyleset_create_typeface :: (Ptr (Sk_fontstyleset)) -> (CInt) -> IO (Ptr (Sk_typeface))
-- | `sk_fontstyleset_match_style`
foreign import ccall "sk_fontstyleset_match_style" sk_fontstyleset_match_style :: (Ptr (Sk_fontstyleset)) -> (Ptr (Sk_fontstyle)) -> IO (Ptr (Sk_typeface))
-- | `sk_picture_recorder_new`
foreign import ccall "sk_picture_recorder_new" sk_picture_recorder_new :: IO (Ptr (Sk_picture_recorder))
-- | `sk_picture_recorder_delete`
foreign import ccall "sk_picture_recorder_delete" sk_picture_recorder_delete :: (Ptr (Sk_picture_recorder)) -> IO (())
-- | `sk_picture_recorder_begin_recording`
foreign import ccall "sk_picture_recorder_begin_recording" sk_picture_recorder_begin_recording :: (Ptr (Sk_picture_recorder)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_canvas))
-- | `sk_picture_recorder_begin_recording_with_bbh_factory`
foreign import ccall "sk_picture_recorder_begin_recording_with_bbh_factory" sk_picture_recorder_begin_recording_with_bbh_factory :: (Ptr (Sk_picture_recorder)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_bbh_factory)) -> IO (Ptr (Sk_canvas))
-- | `sk_picture_recorder_end_recording`
foreign import ccall "sk_picture_recorder_end_recording" sk_picture_recorder_end_recording :: (Ptr (Sk_picture_recorder)) -> IO (Ptr (Sk_picture))
-- | `sk_picture_recorder_end_recording_as_drawable`
foreign import ccall "sk_picture_recorder_end_recording_as_drawable" sk_picture_recorder_end_recording_as_drawable :: (Ptr (Sk_picture_recorder)) -> IO (Ptr (Sk_drawable))
-- | `sk_picture_get_recording_canvas`
foreign import ccall "sk_picture_get_recording_canvas" sk_picture_get_recording_canvas :: (Ptr (Sk_picture_recorder)) -> IO (Ptr (Sk_canvas))
-- | `sk_picture_ref`
foreign import ccall "sk_picture_ref" sk_picture_ref :: (Ptr (Sk_picture)) -> IO (())
-- | `sk_picture_unref`
foreign import ccall "sk_picture_unref" sk_picture_unref :: (Ptr (Sk_picture)) -> IO (())
-- | `sk_picture_get_unique_id`
foreign import ccall "sk_picture_get_unique_id" sk_picture_get_unique_id :: (Ptr (Sk_picture)) -> IO (Word32)
-- | `sk_picture_get_cull_rect`
foreign import ccall "sk_picture_get_cull_rect" sk_picture_get_cull_rect :: (Ptr (Sk_picture)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_picture_make_shader`
foreign import ccall "sk_picture_make_shader" sk_picture_make_shader :: (Ptr (Sk_picture)) -> (Sk_shader_tilemode) -> (Sk_shader_tilemode) -> (Sk_filter_mode) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_shader))
-- | `sk_picture_serialize_to_data`
foreign import ccall "sk_picture_serialize_to_data" sk_picture_serialize_to_data :: (Ptr (Sk_picture)) -> IO (Ptr (Sk_data))
-- | `sk_picture_serialize_to_stream`
foreign import ccall "sk_picture_serialize_to_stream" sk_picture_serialize_to_stream :: (Ptr (Sk_picture)) -> (Ptr (Sk_wstream)) -> IO (())
-- | `sk_picture_deserialize_from_stream`
foreign import ccall "sk_picture_deserialize_from_stream" sk_picture_deserialize_from_stream :: (Ptr (Sk_stream)) -> IO (Ptr (Sk_picture))
-- | `sk_picture_deserialize_from_data`
foreign import ccall "sk_picture_deserialize_from_data" sk_picture_deserialize_from_data :: (Ptr (Sk_data)) -> IO (Ptr (Sk_picture))
-- | `sk_picture_deserialize_from_memory`
foreign import ccall "sk_picture_deserialize_from_memory" sk_picture_deserialize_from_memory :: (Ptr (())) -> (CSize) -> IO (Ptr (Sk_picture))
-- | `sk_picture_playback`
foreign import ccall "sk_picture_playback" sk_picture_playback :: (Ptr (Sk_picture)) -> (Ptr (Sk_canvas)) -> IO (())
-- | `sk_picture_approximate_op_count`
foreign import ccall "sk_picture_approximate_op_count" sk_picture_approximate_op_count :: (Ptr (Sk_picture)) -> (CBool) -> IO (CInt)
-- | `sk_picture_approximate_bytes_used`
foreign import ccall "sk_picture_approximate_bytes_used" sk_picture_approximate_bytes_used :: (Ptr (Sk_picture)) -> IO (CSize)
-- | `sk_rtree_factory_new`
foreign import ccall "sk_rtree_factory_new" sk_rtree_factory_new :: IO (Ptr (Sk_rtree_factory))
-- | `sk_rtree_factory_delete`
foreign import ccall "sk_rtree_factory_delete" sk_rtree_factory_delete :: (Ptr (Sk_rtree_factory)) -> IO (())
-- | `sk_surface_new_null`
foreign import ccall "sk_surface_new_null" sk_surface_new_null :: (CInt) -> (CInt) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_raster`
foreign import ccall "sk_surface_new_raster" sk_surface_new_raster :: (Ptr (Sk_imageinfo)) -> (CSize) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_raster_direct`
foreign import ccall "sk_surface_new_raster_direct" sk_surface_new_raster_direct :: (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (FunPtr (Sk_surface_raster_release_proc)) -> (Ptr (())) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_backend_texture`
foreign import ccall "sk_surface_new_backend_texture" sk_surface_new_backend_texture :: (Ptr (Gr_recording_context)) -> (Ptr (Gr_backendtexture)) -> (Gr_surfaceorigin) -> (CInt) -> (Sk_colortype) -> (Ptr (Sk_colorspace)) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_backend_render_target`
foreign import ccall "sk_surface_new_backend_render_target" sk_surface_new_backend_render_target :: (Ptr (Gr_recording_context)) -> (Ptr (Gr_backendrendertarget)) -> (Gr_surfaceorigin) -> (Sk_colortype) -> (Ptr (Sk_colorspace)) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_render_target`
foreign import ccall "sk_surface_new_render_target" sk_surface_new_render_target :: (Ptr (Gr_recording_context)) -> (CBool) -> (Ptr (Sk_imageinfo)) -> (CInt) -> (Gr_surfaceorigin) -> (Ptr (Sk_surfaceprops)) -> (CBool) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_metal_layer`
foreign import ccall "sk_surface_new_metal_layer" sk_surface_new_metal_layer :: (Ptr (Gr_recording_context)) -> (Ptr (())) -> (Gr_surfaceorigin) -> (CInt) -> (Sk_colortype) -> (Ptr (Sk_colorspace)) -> (Ptr (Sk_surfaceprops)) -> (Ptr (Ptr (()))) -> IO (Ptr (Sk_surface))
-- | `sk_surface_new_metal_view`
foreign import ccall "sk_surface_new_metal_view" sk_surface_new_metal_view :: (Ptr (Gr_recording_context)) -> (Ptr (())) -> (Gr_surfaceorigin) -> (CInt) -> (Sk_colortype) -> (Ptr (Sk_colorspace)) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_surface))
-- | `sk_surface_unref`
foreign import ccall "sk_surface_unref" sk_surface_unref :: (Ptr (Sk_surface)) -> IO (())
-- | `sk_surface_get_canvas`
foreign import ccall "sk_surface_get_canvas" sk_surface_get_canvas :: (Ptr (Sk_surface)) -> IO (Ptr (Sk_canvas))
-- | `sk_surface_new_image_snapshot`
foreign import ccall "sk_surface_new_image_snapshot" sk_surface_new_image_snapshot :: (Ptr (Sk_surface)) -> IO (Ptr (Sk_image))
-- | `sk_surface_new_image_snapshot_with_crop`
foreign import ccall "sk_surface_new_image_snapshot_with_crop" sk_surface_new_image_snapshot_with_crop :: (Ptr (Sk_surface)) -> (Ptr (Sk_irect)) -> IO (Ptr (Sk_image))
-- | `sk_surface_draw`
foreign import ccall "sk_surface_draw" sk_surface_draw :: (Ptr (Sk_surface)) -> (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_surface_peek_pixels`
foreign import ccall "sk_surface_peek_pixels" sk_surface_peek_pixels :: (Ptr (Sk_surface)) -> (Ptr (Sk_pixmap)) -> IO (CBool)
-- | `sk_surface_read_pixels`
foreign import ccall "sk_surface_read_pixels" sk_surface_read_pixels :: (Ptr (Sk_surface)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_surface_get_props`
foreign import ccall "sk_surface_get_props" sk_surface_get_props :: (Ptr (Sk_surface)) -> IO (Ptr (Sk_surfaceprops))
-- | `sk_surface_get_recording_context`
foreign import ccall "sk_surface_get_recording_context" sk_surface_get_recording_context :: (Ptr (Sk_surface)) -> IO (Ptr (Gr_recording_context))
-- | `sk_surfaceprops_new`
foreign import ccall "sk_surfaceprops_new" sk_surfaceprops_new :: (Word32) -> (Sk_pixelgeometry) -> IO (Ptr (Sk_surfaceprops))
-- | `sk_surfaceprops_delete`
foreign import ccall "sk_surfaceprops_delete" sk_surfaceprops_delete :: (Ptr (Sk_surfaceprops)) -> IO (())
-- | `sk_surfaceprops_get_flags`
foreign import ccall "sk_surfaceprops_get_flags" sk_surfaceprops_get_flags :: (Ptr (Sk_surfaceprops)) -> IO (Word32)
-- | `sk_surfaceprops_get_pixel_geometry`
foreign import ccall "sk_surfaceprops_get_pixel_geometry" sk_surfaceprops_get_pixel_geometry :: (Ptr (Sk_surfaceprops)) -> IO (Sk_pixelgeometry)
-- | `sk_pixmap_destructor`
foreign import ccall "sk_pixmap_destructor" sk_pixmap_destructor :: (Ptr (Sk_pixmap)) -> IO (())
-- | `sk_pixmap_new`
foreign import ccall "sk_pixmap_new" sk_pixmap_new :: IO (Ptr (Sk_pixmap))
-- | `sk_pixmap_new_with_params`
foreign import ccall "sk_pixmap_new_with_params" sk_pixmap_new_with_params :: (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> IO (Ptr (Sk_pixmap))
-- | `sk_pixmap_reset`
foreign import ccall "sk_pixmap_reset" sk_pixmap_reset :: (Ptr (Sk_pixmap)) -> IO (())
-- | `sk_pixmap_reset_with_params`
foreign import ccall "sk_pixmap_reset_with_params" sk_pixmap_reset_with_params :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> IO (())
-- | `sk_pixmap_set_colorspace`
foreign import ccall "sk_pixmap_set_colorspace" sk_pixmap_set_colorspace :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_colorspace)) -> IO (())
-- | `sk_pixmap_extract_subset`
foreign import ccall "sk_pixmap_extract_subset" sk_pixmap_extract_subset :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_pixmap_get_info`
foreign import ccall "sk_pixmap_get_info" sk_pixmap_get_info :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_imageinfo)) -> IO (())
-- | `sk_pixmap_get_row_bytes`
foreign import ccall "sk_pixmap_get_row_bytes" sk_pixmap_get_row_bytes :: (Ptr (Sk_pixmap)) -> IO (CSize)
-- | `sk_pixmap_get_colorspace`
foreign import ccall "sk_pixmap_get_colorspace" sk_pixmap_get_colorspace :: (Ptr (Sk_pixmap)) -> IO (Ptr (Sk_colorspace))
-- | `sk_pixmap_compute_is_opaque`
foreign import ccall "sk_pixmap_compute_is_opaque" sk_pixmap_compute_is_opaque :: (Ptr (Sk_pixmap)) -> IO (CBool)
-- | `sk_pixmap_get_pixel_color`
foreign import ccall "sk_pixmap_get_pixel_color" sk_pixmap_get_pixel_color :: (Ptr (Sk_pixmap)) -> (CInt) -> (CInt) -> IO (Sk_color)
-- | `sk_pixmap_get_pixel_color4f`
foreign import ccall "sk_pixmap_get_pixel_color4f" sk_pixmap_get_pixel_color4f :: (Ptr (Sk_pixmap)) -> (CInt) -> (CInt) -> (Ptr (Sk_color4f)) -> IO (())
-- | `sk_pixmap_get_pixel_alphaf`
foreign import ccall "sk_pixmap_get_pixel_alphaf" sk_pixmap_get_pixel_alphaf :: (Ptr (Sk_pixmap)) -> (CInt) -> (CInt) -> IO (CFloat)
-- | `sk_pixmap_get_writable_addr`
foreign import ccall "sk_pixmap_get_writable_addr" sk_pixmap_get_writable_addr :: (Ptr (Sk_pixmap)) -> IO (Ptr (()))
-- | `sk_pixmap_get_writeable_addr_with_xy`
foreign import ccall "sk_pixmap_get_writeable_addr_with_xy" sk_pixmap_get_writeable_addr_with_xy :: (Ptr (Sk_pixmap)) -> (CInt) -> (CInt) -> IO (Ptr (()))
-- | `sk_pixmap_read_pixels`
foreign import ccall "sk_pixmap_read_pixels" sk_pixmap_read_pixels :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_pixmap_scale_pixels`
foreign import ccall "sk_pixmap_scale_pixels" sk_pixmap_scale_pixels :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_sampling_options)) -> IO (CBool)
-- | `sk_pixmap_erase_color`
foreign import ccall "sk_pixmap_erase_color" sk_pixmap_erase_color :: (Ptr (Sk_pixmap)) -> (Sk_color) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_pixmap_erase_color4f`
foreign import ccall "sk_pixmap_erase_color4f" sk_pixmap_erase_color4f :: (Ptr (Sk_pixmap)) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_webpencoder_encode`
foreign import ccall "sk_webpencoder_encode" sk_webpencoder_encode :: (Ptr (Sk_wstream)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_webpencoder_options)) -> IO (CBool)
-- | `sk_jpegencoder_encode`
foreign import ccall "sk_jpegencoder_encode" sk_jpegencoder_encode :: (Ptr (Sk_wstream)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_jpegencoder_options)) -> IO (CBool)
-- | `sk_pngencoder_encode`
foreign import ccall "sk_pngencoder_encode" sk_pngencoder_encode :: (Ptr (Sk_wstream)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_pngencoder_options)) -> IO (CBool)
-- | `sk_swizzle_swap_rb`
foreign import ccall "sk_swizzle_swap_rb" sk_swizzle_swap_rb :: (Ptr (Word32)) -> (Ptr (Word32)) -> (CInt) -> IO (())
-- | `sk_color_unpremultiply`
foreign import ccall "sk_color_unpremultiply" sk_color_unpremultiply :: (Sk_pmcolor) -> IO (Sk_color)
-- | `sk_color_premultiply`
foreign import ccall "sk_color_premultiply" sk_color_premultiply :: (Sk_color) -> IO (Sk_pmcolor)
-- | `sk_color_unpremultiply_array`
foreign import ccall "sk_color_unpremultiply_array" sk_color_unpremultiply_array :: (Ptr (Sk_pmcolor)) -> (CInt) -> (Ptr (Sk_color)) -> IO (())
-- | `sk_color_premultiply_array`
foreign import ccall "sk_color_premultiply_array" sk_color_premultiply_array :: (Ptr (Sk_color)) -> (CInt) -> (Ptr (Sk_pmcolor)) -> IO (())
-- | `sk_color_get_bit_shift`
foreign import ccall "sk_color_get_bit_shift" sk_color_get_bit_shift :: (Ptr (CInt)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> IO (())
-- | `sk_region_new`
foreign import ccall "sk_region_new" sk_region_new :: IO (Ptr (Sk_region))
-- | `sk_region_delete`
foreign import ccall "sk_region_delete" sk_region_delete :: (Ptr (Sk_region)) -> IO (())
-- | `sk_region_is_empty`
foreign import ccall "sk_region_is_empty" sk_region_is_empty :: (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_is_rect`
foreign import ccall "sk_region_is_rect" sk_region_is_rect :: (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_is_complex`
foreign import ccall "sk_region_is_complex" sk_region_is_complex :: (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_get_bounds`
foreign import ccall "sk_region_get_bounds" sk_region_get_bounds :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (())
-- | `sk_region_get_boundary_path`
foreign import ccall "sk_region_get_boundary_path" sk_region_get_boundary_path :: (Ptr (Sk_region)) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_region_set_empty`
foreign import ccall "sk_region_set_empty" sk_region_set_empty :: (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_set_rect`
foreign import ccall "sk_region_set_rect" sk_region_set_rect :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_region_set_rects`
foreign import ccall "sk_region_set_rects" sk_region_set_rects :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> (CInt) -> IO (CBool)
-- | `sk_region_set_region`
foreign import ccall "sk_region_set_region" sk_region_set_region :: (Ptr (Sk_region)) -> (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_set_path`
foreign import ccall "sk_region_set_path" sk_region_set_path :: (Ptr (Sk_region)) -> (Ptr (Sk_path)) -> (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_intersects_rect`
foreign import ccall "sk_region_intersects_rect" sk_region_intersects_rect :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_region_intersects`
foreign import ccall "sk_region_intersects" sk_region_intersects :: (Ptr (Sk_region)) -> (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_contains_point`
foreign import ccall "sk_region_contains_point" sk_region_contains_point :: (Ptr (Sk_region)) -> (CInt) -> (CInt) -> IO (CBool)
-- | `sk_region_contains_rect`
foreign import ccall "sk_region_contains_rect" sk_region_contains_rect :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_region_contains`
foreign import ccall "sk_region_contains" sk_region_contains :: (Ptr (Sk_region)) -> (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_quick_contains`
foreign import ccall "sk_region_quick_contains" sk_region_quick_contains :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_region_quick_reject_rect`
foreign import ccall "sk_region_quick_reject_rect" sk_region_quick_reject_rect :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_region_quick_reject`
foreign import ccall "sk_region_quick_reject" sk_region_quick_reject :: (Ptr (Sk_region)) -> (Ptr (Sk_region)) -> IO (CBool)
-- | `sk_region_translate`
foreign import ccall "sk_region_translate" sk_region_translate :: (Ptr (Sk_region)) -> (CInt) -> (CInt) -> IO (())
-- | `sk_region_op_rect`
foreign import ccall "sk_region_op_rect" sk_region_op_rect :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> (Sk_region_op) -> IO (CBool)
-- | `sk_region_op`
foreign import ccall "sk_region_op" sk_region_op :: (Ptr (Sk_region)) -> (Ptr (Sk_region)) -> (Sk_region_op) -> IO (CBool)
-- | `sk_region_iterator_new`
foreign import ccall "sk_region_iterator_new" sk_region_iterator_new :: (Ptr (Sk_region)) -> IO (Ptr (Sk_region_iterator))
-- | `sk_region_iterator_delete`
foreign import ccall "sk_region_iterator_delete" sk_region_iterator_delete :: (Ptr (Sk_region_iterator)) -> IO (())
-- | `sk_region_iterator_rewind`
foreign import ccall "sk_region_iterator_rewind" sk_region_iterator_rewind :: (Ptr (Sk_region_iterator)) -> IO (CBool)
-- | `sk_region_iterator_done`
foreign import ccall "sk_region_iterator_done" sk_region_iterator_done :: (Ptr (Sk_region_iterator)) -> IO (CBool)
-- | `sk_region_iterator_next`
foreign import ccall "sk_region_iterator_next" sk_region_iterator_next :: (Ptr (Sk_region_iterator)) -> IO (())
-- | `sk_region_iterator_rect`
foreign import ccall "sk_region_iterator_rect" sk_region_iterator_rect :: (Ptr (Sk_region_iterator)) -> (Ptr (Sk_irect)) -> IO (())
-- | `sk_region_cliperator_new`
foreign import ccall "sk_region_cliperator_new" sk_region_cliperator_new :: (Ptr (Sk_region)) -> (Ptr (Sk_irect)) -> IO (Ptr (Sk_region_cliperator))
-- | `sk_region_cliperator_delete`
foreign import ccall "sk_region_cliperator_delete" sk_region_cliperator_delete :: (Ptr (Sk_region_cliperator)) -> IO (())
-- | `sk_region_cliperator_done`
foreign import ccall "sk_region_cliperator_done" sk_region_cliperator_done :: (Ptr (Sk_region_cliperator)) -> IO (CBool)
-- | `sk_region_cliperator_next`
foreign import ccall "sk_region_cliperator_next" sk_region_cliperator_next :: (Ptr (Sk_region_cliperator)) -> IO (())
-- | `sk_region_cliperator_rect`
foreign import ccall "sk_region_cliperator_rect" sk_region_cliperator_rect :: (Ptr (Sk_region_cliperator)) -> (Ptr (Sk_irect)) -> IO (())
-- | `sk_region_spanerator_new`
foreign import ccall "sk_region_spanerator_new" sk_region_spanerator_new :: (Ptr (Sk_region)) -> (CInt) -> (CInt) -> (CInt) -> IO (Ptr (Sk_region_spanerator))
-- | `sk_region_spanerator_delete`
foreign import ccall "sk_region_spanerator_delete" sk_region_spanerator_delete :: (Ptr (Sk_region_spanerator)) -> IO (())
-- | `sk_region_spanerator_next`
foreign import ccall "sk_region_spanerator_next" sk_region_spanerator_next :: (Ptr (Sk_region_spanerator)) -> (Ptr (CInt)) -> (Ptr (CInt)) -> IO (CBool)
-- | `sk_canvas_destroy`
foreign import ccall "sk_canvas_destroy" sk_canvas_destroy :: (Ptr (Sk_canvas)) -> IO (())
-- | `sk_canvas_clear`
foreign import ccall "sk_canvas_clear" sk_canvas_clear :: (Ptr (Sk_canvas)) -> (Sk_color) -> IO (())
-- | `sk_canvas_discard`
foreign import ccall "sk_canvas_discard" sk_canvas_discard :: (Ptr (Sk_canvas)) -> IO (())
-- | `sk_canvas_get_save_count`
foreign import ccall "sk_canvas_get_save_count" sk_canvas_get_save_count :: (Ptr (Sk_canvas)) -> IO (CInt)
-- | `sk_canvas_restore_to_count`
foreign import ccall "sk_canvas_restore_to_count" sk_canvas_restore_to_count :: (Ptr (Sk_canvas)) -> (CInt) -> IO (())
-- | `sk_canvas_draw_color`
foreign import ccall "sk_canvas_draw_color" sk_canvas_draw_color :: (Ptr (Sk_canvas)) -> (Sk_color) -> (Sk_blendmode) -> IO (())
-- | `sk_canvas_draw_points`
foreign import ccall "sk_canvas_draw_points" sk_canvas_draw_points :: (Ptr (Sk_canvas)) -> (Sk_point_mode) -> (CSize) -> (Ptr (Sk_point)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_point`
foreign import ccall "sk_canvas_draw_point" sk_canvas_draw_point :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_line`
foreign import ccall "sk_canvas_draw_line" sk_canvas_draw_line :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_simple_text`
foreign import ccall "sk_canvas_draw_simple_text" sk_canvas_draw_simple_text :: (Ptr (Sk_canvas)) -> (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (CFloat) -> (CFloat) -> (Ptr (Sk_font)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_text_blob`
foreign import ccall "sk_canvas_draw_text_blob" sk_canvas_draw_text_blob :: (Ptr (Sk_canvas)) -> (Ptr (Sk_textblob)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_reset_matrix`
foreign import ccall "sk_canvas_reset_matrix" sk_canvas_reset_matrix :: (Ptr (Sk_canvas)) -> IO (())
-- | `sk_canvas_set_matrix`
foreign import ccall "sk_canvas_set_matrix" sk_canvas_set_matrix :: (Ptr (Sk_canvas)) -> (Ptr (Sk_matrix44)) -> IO (())
-- | `sk_canvas_get_matrix`
foreign import ccall "sk_canvas_get_matrix" sk_canvas_get_matrix :: (Ptr (Sk_canvas)) -> (Ptr (Sk_matrix44)) -> IO (())
-- | `sk_canvas_draw_round_rect`
foreign import ccall "sk_canvas_draw_round_rect" sk_canvas_draw_round_rect :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_clip_rect_with_operation`
foreign import ccall "sk_canvas_clip_rect_with_operation" sk_canvas_clip_rect_with_operation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Sk_clipop) -> (CBool) -> IO (())
-- | `sk_canvas_clip_path_with_operation`
foreign import ccall "sk_canvas_clip_path_with_operation" sk_canvas_clip_path_with_operation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_path)) -> (Sk_clipop) -> (CBool) -> IO (())
-- | `sk_canvas_clip_rrect_with_operation`
foreign import ccall "sk_canvas_clip_rrect_with_operation" sk_canvas_clip_rrect_with_operation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rrect)) -> (Sk_clipop) -> (CBool) -> IO (())
-- | `sk_canvas_get_local_clip_bounds`
foreign import ccall "sk_canvas_get_local_clip_bounds" sk_canvas_get_local_clip_bounds :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> IO (CBool)
-- | `sk_canvas_get_device_clip_bounds`
foreign import ccall "sk_canvas_get_device_clip_bounds" sk_canvas_get_device_clip_bounds :: (Ptr (Sk_canvas)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_canvas_save`
foreign import ccall "sk_canvas_save" sk_canvas_save :: (Ptr (Sk_canvas)) -> IO (CInt)
-- | `sk_canvas_save_layer`
foreign import ccall "sk_canvas_save_layer" sk_canvas_save_layer :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (CInt)
-- | `sk_canvas_save_layer_rec`
foreign import ccall "sk_canvas_save_layer_rec" sk_canvas_save_layer_rec :: (Ptr (Sk_canvas)) -> (Ptr (Sk_canvas_savelayerrec)) -> IO (CInt)
-- | `sk_canvas_restore`
foreign import ccall "sk_canvas_restore" sk_canvas_restore :: (Ptr (Sk_canvas)) -> IO (())
-- | `sk_canvas_translate`
foreign import ccall "sk_canvas_translate" sk_canvas_translate :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_scale`
foreign import ccall "sk_canvas_scale" sk_canvas_scale :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_rotate_degrees`
foreign import ccall "sk_canvas_rotate_degrees" sk_canvas_rotate_degrees :: (Ptr (Sk_canvas)) -> (CFloat) -> IO (())
-- | `sk_canvas_rotate_radians`
foreign import ccall "sk_canvas_rotate_radians" sk_canvas_rotate_radians :: (Ptr (Sk_canvas)) -> (CFloat) -> IO (())
-- | `sk_canvas_skew`
foreign import ccall "sk_canvas_skew" sk_canvas_skew :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_canvas_concat`
foreign import ccall "sk_canvas_concat" sk_canvas_concat :: (Ptr (Sk_canvas)) -> (Ptr (Sk_matrix44)) -> IO (())
-- | `sk_canvas_quick_reject`
foreign import ccall "sk_canvas_quick_reject" sk_canvas_quick_reject :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> IO (CBool)
-- | `sk_canvas_clip_region`
foreign import ccall "sk_canvas_clip_region" sk_canvas_clip_region :: (Ptr (Sk_canvas)) -> (Ptr (Sk_region)) -> (Sk_clipop) -> IO (())
-- | `sk_canvas_draw_paint`
foreign import ccall "sk_canvas_draw_paint" sk_canvas_draw_paint :: (Ptr (Sk_canvas)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_region`
foreign import ccall "sk_canvas_draw_region" sk_canvas_draw_region :: (Ptr (Sk_canvas)) -> (Ptr (Sk_region)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_rect`
foreign import ccall "sk_canvas_draw_rect" sk_canvas_draw_rect :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_rrect`
foreign import ccall "sk_canvas_draw_rrect" sk_canvas_draw_rrect :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rrect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_circle`
foreign import ccall "sk_canvas_draw_circle" sk_canvas_draw_circle :: (Ptr (Sk_canvas)) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_oval`
foreign import ccall "sk_canvas_draw_oval" sk_canvas_draw_oval :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_path`
foreign import ccall "sk_canvas_draw_path" sk_canvas_draw_path :: (Ptr (Sk_canvas)) -> (Ptr (Sk_path)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_image`
foreign import ccall "sk_canvas_draw_image" sk_canvas_draw_image :: (Ptr (Sk_canvas)) -> (Ptr (Sk_image)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_image_rect`
foreign import ccall "sk_canvas_draw_image_rect" sk_canvas_draw_image_rect :: (Ptr (Sk_canvas)) -> (Ptr (Sk_image)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_picture`
foreign import ccall "sk_canvas_draw_picture" sk_canvas_draw_picture :: (Ptr (Sk_canvas)) -> (Ptr (Sk_picture)) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_drawable`
foreign import ccall "sk_canvas_draw_drawable" sk_canvas_draw_drawable :: (Ptr (Sk_canvas)) -> (Ptr (Sk_drawable)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_canvas_new_from_bitmap`
foreign import ccall "sk_canvas_new_from_bitmap" sk_canvas_new_from_bitmap :: (Ptr (Sk_bitmap)) -> IO (Ptr (Sk_canvas))
-- | `sk_canvas_new_from_raster`
foreign import ccall "sk_canvas_new_from_raster" sk_canvas_new_from_raster :: (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_canvas))
-- | `sk_canvas_draw_annotation`
foreign import ccall "sk_canvas_draw_annotation" sk_canvas_draw_annotation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (CChar)) -> (Ptr (Sk_data)) -> IO (())
-- | `sk_canvas_draw_url_annotation`
foreign import ccall "sk_canvas_draw_url_annotation" sk_canvas_draw_url_annotation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_data)) -> IO (())
-- | `sk_canvas_draw_named_destination_annotation`
foreign import ccall "sk_canvas_draw_named_destination_annotation" sk_canvas_draw_named_destination_annotation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_point)) -> (Ptr (Sk_data)) -> IO (())
-- | `sk_canvas_draw_link_destination_annotation`
foreign import ccall "sk_canvas_draw_link_destination_annotation" sk_canvas_draw_link_destination_annotation :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_data)) -> IO (())
-- | `sk_canvas_draw_image_lattice`
foreign import ccall "sk_canvas_draw_image_lattice" sk_canvas_draw_image_lattice :: (Ptr (Sk_canvas)) -> (Ptr (Sk_image)) -> (Ptr (Sk_lattice)) -> (Ptr (Sk_rect)) -> (Sk_filter_mode) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_image_nine`
foreign import ccall "sk_canvas_draw_image_nine" sk_canvas_draw_image_nine :: (Ptr (Sk_canvas)) -> (Ptr (Sk_image)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_rect)) -> (Sk_filter_mode) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_vertices`
foreign import ccall "sk_canvas_draw_vertices" sk_canvas_draw_vertices :: (Ptr (Sk_canvas)) -> (Ptr (Sk_vertices)) -> (Sk_blendmode) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_arc`
foreign import ccall "sk_canvas_draw_arc" sk_canvas_draw_arc :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (CBool) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_drrect`
foreign import ccall "sk_canvas_draw_drrect" sk_canvas_draw_drrect :: (Ptr (Sk_canvas)) -> (Ptr (Sk_rrect)) -> (Ptr (Sk_rrect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_atlas`
foreign import ccall "sk_canvas_draw_atlas" sk_canvas_draw_atlas :: (Ptr (Sk_canvas)) -> (Ptr (Sk_image)) -> (Ptr (Sk_rsxform)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_color)) -> (CInt) -> (Sk_blendmode) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_draw_patch`
foreign import ccall "sk_canvas_draw_patch" sk_canvas_draw_patch :: (Ptr (Sk_canvas)) -> (Ptr (Sk_point)) -> (Ptr (Sk_color)) -> (Ptr (Sk_point)) -> (Sk_blendmode) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_canvas_is_clip_empty`
foreign import ccall "sk_canvas_is_clip_empty" sk_canvas_is_clip_empty :: (Ptr (Sk_canvas)) -> IO (CBool)
-- | `sk_canvas_is_clip_rect`
foreign import ccall "sk_canvas_is_clip_rect" sk_canvas_is_clip_rect :: (Ptr (Sk_canvas)) -> IO (CBool)
-- | `sk_nodraw_canvas_new`
foreign import ccall "sk_nodraw_canvas_new" sk_nodraw_canvas_new :: (CInt) -> (CInt) -> IO (Ptr (Sk_nodraw_canvas))
-- | `sk_nodraw_canvas_destroy`
foreign import ccall "sk_nodraw_canvas_destroy" sk_nodraw_canvas_destroy :: (Ptr (Sk_nodraw_canvas)) -> IO (())
-- | `sk_nway_canvas_new`
foreign import ccall "sk_nway_canvas_new" sk_nway_canvas_new :: (CInt) -> (CInt) -> IO (Ptr (Sk_nway_canvas))
-- | `sk_nway_canvas_destroy`
foreign import ccall "sk_nway_canvas_destroy" sk_nway_canvas_destroy :: (Ptr (Sk_nway_canvas)) -> IO (())
-- | `sk_nway_canvas_add_canvas`
foreign import ccall "sk_nway_canvas_add_canvas" sk_nway_canvas_add_canvas :: (Ptr (Sk_nway_canvas)) -> (Ptr (Sk_canvas)) -> IO (())
-- | `sk_nway_canvas_remove_canvas`
foreign import ccall "sk_nway_canvas_remove_canvas" sk_nway_canvas_remove_canvas :: (Ptr (Sk_nway_canvas)) -> (Ptr (Sk_canvas)) -> IO (())
-- | `sk_nway_canvas_remove_all`
foreign import ccall "sk_nway_canvas_remove_all" sk_nway_canvas_remove_all :: (Ptr (Sk_nway_canvas)) -> IO (())
-- | `sk_overdraw_canvas_new`
foreign import ccall "sk_overdraw_canvas_new" sk_overdraw_canvas_new :: (Ptr (Sk_canvas)) -> IO (Ptr (Sk_overdraw_canvas))
-- | `sk_overdraw_canvas_destroy`
foreign import ccall "sk_overdraw_canvas_destroy" sk_overdraw_canvas_destroy :: (Ptr (Sk_overdraw_canvas)) -> IO (())
-- | `sk_get_recording_context`
foreign import ccall "sk_get_recording_context" sk_get_recording_context :: (Ptr (Sk_canvas)) -> IO (Ptr (Gr_recording_context))
-- | `sk_get_surface`
foreign import ccall "sk_get_surface" sk_get_surface :: (Ptr (Sk_canvas)) -> IO (Ptr (Sk_surface))
-- | `sk_textblob_ref`
foreign import ccall "sk_textblob_ref" sk_textblob_ref :: (Ptr (Sk_textblob)) -> IO (())
-- | `sk_textblob_unref`
foreign import ccall "sk_textblob_unref" sk_textblob_unref :: (Ptr (Sk_textblob)) -> IO (())
-- | `sk_textblob_get_unique_id`
foreign import ccall "sk_textblob_get_unique_id" sk_textblob_get_unique_id :: (Ptr (Sk_textblob)) -> IO (Word32)
-- | `sk_textblob_get_bounds`
foreign import ccall "sk_textblob_get_bounds" sk_textblob_get_bounds :: (Ptr (Sk_textblob)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_textblob_get_intercepts`
foreign import ccall "sk_textblob_get_intercepts" sk_textblob_get_intercepts :: (Ptr (Sk_textblob)) -> (Ptr (CFloat)) -> (Ptr (CFloat)) -> (Ptr (Sk_paint)) -> IO (CInt)
-- | `sk_textblob_builder_new`
foreign import ccall "sk_textblob_builder_new" sk_textblob_builder_new :: IO (Ptr (Sk_textblob_builder))
-- | `sk_textblob_builder_delete`
foreign import ccall "sk_textblob_builder_delete" sk_textblob_builder_delete :: (Ptr (Sk_textblob_builder)) -> IO (())
-- | `sk_textblob_builder_make`
foreign import ccall "sk_textblob_builder_make" sk_textblob_builder_make :: (Ptr (Sk_textblob_builder)) -> IO (Ptr (Sk_textblob))
-- | `sk_textblob_builder_alloc_run`
foreign import ccall "sk_textblob_builder_alloc_run" sk_textblob_builder_alloc_run :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CFloat) -> (CFloat) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_pos_h`
foreign import ccall "sk_textblob_builder_alloc_run_pos_h" sk_textblob_builder_alloc_run_pos_h :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CFloat) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_pos`
foreign import ccall "sk_textblob_builder_alloc_run_pos" sk_textblob_builder_alloc_run_pos :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_rsxform`
foreign import ccall "sk_textblob_builder_alloc_run_rsxform" sk_textblob_builder_alloc_run_rsxform :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text`
foreign import ccall "sk_textblob_builder_alloc_run_text" sk_textblob_builder_alloc_run_text :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CFloat) -> (CFloat) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_pos_h`
foreign import ccall "sk_textblob_builder_alloc_run_text_pos_h" sk_textblob_builder_alloc_run_text_pos_h :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CFloat) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_pos`
foreign import ccall "sk_textblob_builder_alloc_run_text_pos" sk_textblob_builder_alloc_run_text_pos :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_textblob_builder_alloc_run_text_rsxform`
foreign import ccall "sk_textblob_builder_alloc_run_text_rsxform" sk_textblob_builder_alloc_run_text_rsxform :: (Ptr (Sk_textblob_builder)) -> (Ptr (Sk_font)) -> (CInt) -> (CInt) -> (Ptr (Sk_rect)) -> (Ptr (Sk_textblob_builder_runbuffer)) -> IO (())
-- | `sk_maskfilter_ref`
foreign import ccall "sk_maskfilter_ref" sk_maskfilter_ref :: (Ptr (Sk_maskfilter)) -> IO (())
-- | `sk_maskfilter_unref`
foreign import ccall "sk_maskfilter_unref" sk_maskfilter_unref :: (Ptr (Sk_maskfilter)) -> IO (())
-- | `sk_maskfilter_new_blur`
foreign import ccall "sk_maskfilter_new_blur" sk_maskfilter_new_blur :: (Sk_blurstyle) -> (CFloat) -> IO (Ptr (Sk_maskfilter))
-- | `sk_maskfilter_new_blur_with_flags`
foreign import ccall "sk_maskfilter_new_blur_with_flags" sk_maskfilter_new_blur_with_flags :: (Sk_blurstyle) -> (CFloat) -> (CBool) -> IO (Ptr (Sk_maskfilter))
-- | `sk_maskfilter_new_table`
foreign import ccall "sk_maskfilter_new_table" sk_maskfilter_new_table :: (Ptr (Word8)) -> IO (Ptr (Sk_maskfilter))
-- | `sk_maskfilter_new_gamma`
foreign import ccall "sk_maskfilter_new_gamma" sk_maskfilter_new_gamma :: (CFloat) -> IO (Ptr (Sk_maskfilter))
-- | `sk_maskfilter_new_clip`
foreign import ccall "sk_maskfilter_new_clip" sk_maskfilter_new_clip :: (Word8) -> (Word8) -> IO (Ptr (Sk_maskfilter))
-- | `sk_maskfilter_new_shader`
foreign import ccall "sk_maskfilter_new_shader" sk_maskfilter_new_shader :: (Ptr (Sk_shader)) -> IO (Ptr (Sk_maskfilter))
-- | `sk_colorspace_ref`
foreign import ccall "sk_colorspace_ref" sk_colorspace_ref :: (Ptr (Sk_colorspace)) -> IO (())
-- | `sk_colorspace_unref`
foreign import ccall "sk_colorspace_unref" sk_colorspace_unref :: (Ptr (Sk_colorspace)) -> IO (())
-- | `sk_colorspace_new_srgb`
foreign import ccall "sk_colorspace_new_srgb" sk_colorspace_new_srgb :: IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_new_srgb_linear`
foreign import ccall "sk_colorspace_new_srgb_linear" sk_colorspace_new_srgb_linear :: IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_new_rgb`
foreign import ccall "sk_colorspace_new_rgb" sk_colorspace_new_rgb :: (Ptr (Sk_colorspace_transfer_fn)) -> (Ptr (Sk_colorspace_xyz)) -> IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_new_icc`
foreign import ccall "sk_colorspace_new_icc" sk_colorspace_new_icc :: (Ptr (Sk_colorspace_icc_profile)) -> IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_to_profile`
foreign import ccall "sk_colorspace_to_profile" sk_colorspace_to_profile :: (Ptr (Sk_colorspace)) -> (Ptr (Sk_colorspace_icc_profile)) -> IO (())
-- | `sk_colorspace_gamma_close_to_srgb`
foreign import ccall "sk_colorspace_gamma_close_to_srgb" sk_colorspace_gamma_close_to_srgb :: (Ptr (Sk_colorspace)) -> IO (CBool)
-- | `sk_colorspace_gamma_is_linear`
foreign import ccall "sk_colorspace_gamma_is_linear" sk_colorspace_gamma_is_linear :: (Ptr (Sk_colorspace)) -> IO (CBool)
-- | `sk_colorspace_is_numerical_transfer_fn`
foreign import ccall "sk_colorspace_is_numerical_transfer_fn" sk_colorspace_is_numerical_transfer_fn :: (Ptr (Sk_colorspace)) -> (Ptr (Sk_colorspace_transfer_fn)) -> IO (CBool)
-- | `sk_colorspace_to_xyzd50`
foreign import ccall "sk_colorspace_to_xyzd50" sk_colorspace_to_xyzd50 :: (Ptr (Sk_colorspace)) -> (Ptr (Sk_colorspace_xyz)) -> IO (CBool)
-- | `sk_colorspace_make_linear_gamma`
foreign import ccall "sk_colorspace_make_linear_gamma" sk_colorspace_make_linear_gamma :: (Ptr (Sk_colorspace)) -> IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_make_srgb_gamma`
foreign import ccall "sk_colorspace_make_srgb_gamma" sk_colorspace_make_srgb_gamma :: (Ptr (Sk_colorspace)) -> IO (Ptr (Sk_colorspace))
-- | `sk_colorspace_is_srgb`
foreign import ccall "sk_colorspace_is_srgb" sk_colorspace_is_srgb :: (Ptr (Sk_colorspace)) -> IO (CBool)
-- | `sk_colorspace_equals`
foreign import ccall "sk_colorspace_equals" sk_colorspace_equals :: (Ptr (Sk_colorspace)) -> (Ptr (Sk_colorspace)) -> IO (CBool)
-- | `sk_colorspace_transfer_fn_named_srgb`
foreign import ccall "sk_colorspace_transfer_fn_named_srgb" sk_colorspace_transfer_fn_named_srgb :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_2dot2`
foreign import ccall "sk_colorspace_transfer_fn_named_2dot2" sk_colorspace_transfer_fn_named_2dot2 :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_linear`
foreign import ccall "sk_colorspace_transfer_fn_named_linear" sk_colorspace_transfer_fn_named_linear :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_rec2020`
foreign import ccall "sk_colorspace_transfer_fn_named_rec2020" sk_colorspace_transfer_fn_named_rec2020 :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_pq`
foreign import ccall "sk_colorspace_transfer_fn_named_pq" sk_colorspace_transfer_fn_named_pq :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_named_hlg`
foreign import ccall "sk_colorspace_transfer_fn_named_hlg" sk_colorspace_transfer_fn_named_hlg :: (Ptr (Sk_colorspace_transfer_fn)) -> IO (())
-- | `sk_colorspace_transfer_fn_eval`
foreign import ccall "sk_colorspace_transfer_fn_eval" sk_colorspace_transfer_fn_eval :: (Ptr (Sk_colorspace_transfer_fn)) -> (CFloat) -> IO (CFloat)
-- | `sk_colorspace_transfer_fn_invert`
foreign import ccall "sk_colorspace_transfer_fn_invert" sk_colorspace_transfer_fn_invert :: (Ptr (Sk_colorspace_transfer_fn)) -> (Ptr (Sk_colorspace_transfer_fn)) -> IO (CBool)
-- | `sk_colorspace_primaries_to_xyzd50`
foreign import ccall "sk_colorspace_primaries_to_xyzd50" sk_colorspace_primaries_to_xyzd50 :: (Ptr (Sk_colorspace_primaries)) -> (Ptr (Sk_colorspace_xyz)) -> IO (CBool)
-- | `sk_colorspace_xyz_named_srgb`
foreign import ccall "sk_colorspace_xyz_named_srgb" sk_colorspace_xyz_named_srgb :: (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_xyz_named_adobe_rgb`
foreign import ccall "sk_colorspace_xyz_named_adobe_rgb" sk_colorspace_xyz_named_adobe_rgb :: (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_xyz_named_display_p3`
foreign import ccall "sk_colorspace_xyz_named_display_p3" sk_colorspace_xyz_named_display_p3 :: (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_xyz_named_rec2020`
foreign import ccall "sk_colorspace_xyz_named_rec2020" sk_colorspace_xyz_named_rec2020 :: (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_xyz_named_xyz`
foreign import ccall "sk_colorspace_xyz_named_xyz" sk_colorspace_xyz_named_xyz :: (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_xyz_invert`
foreign import ccall "sk_colorspace_xyz_invert" sk_colorspace_xyz_invert :: (Ptr (Sk_colorspace_xyz)) -> (Ptr (Sk_colorspace_xyz)) -> IO (CBool)
-- | `sk_colorspace_xyz_concat`
foreign import ccall "sk_colorspace_xyz_concat" sk_colorspace_xyz_concat :: (Ptr (Sk_colorspace_xyz)) -> (Ptr (Sk_colorspace_xyz)) -> (Ptr (Sk_colorspace_xyz)) -> IO (())
-- | `sk_colorspace_icc_profile_delete`
foreign import ccall "sk_colorspace_icc_profile_delete" sk_colorspace_icc_profile_delete :: (Ptr (Sk_colorspace_icc_profile)) -> IO (())
-- | `sk_colorspace_icc_profile_new`
foreign import ccall "sk_colorspace_icc_profile_new" sk_colorspace_icc_profile_new :: IO (Ptr (Sk_colorspace_icc_profile))
-- | `sk_colorspace_icc_profile_parse`
foreign import ccall "sk_colorspace_icc_profile_parse" sk_colorspace_icc_profile_parse :: (Ptr (())) -> (CSize) -> (Ptr (Sk_colorspace_icc_profile)) -> IO (CBool)
-- | `sk_colorspace_icc_profile_get_buffer`
foreign import ccall "sk_colorspace_icc_profile_get_buffer" sk_colorspace_icc_profile_get_buffer :: (Ptr (Sk_colorspace_icc_profile)) -> (Ptr (Word32)) -> IO (Ptr (Word8))
-- | `sk_colorspace_icc_profile_get_to_xyzd50`
foreign import ccall "sk_colorspace_icc_profile_get_to_xyzd50" sk_colorspace_icc_profile_get_to_xyzd50 :: (Ptr (Sk_colorspace_icc_profile)) -> (Ptr (Sk_colorspace_xyz)) -> IO (CBool)
-- | `sk_color4f_to_color`
foreign import ccall "sk_color4f_to_color" sk_color4f_to_color :: (Ptr (Sk_color4f)) -> IO (Sk_color)
-- | `sk_color4f_from_color`
foreign import ccall "sk_color4f_from_color" sk_color4f_from_color :: (Sk_color) -> (Ptr (Sk_color4f)) -> IO (())
-- | `sk_imagefilter_unref`
foreign import ccall "sk_imagefilter_unref" sk_imagefilter_unref :: (Ptr (Sk_imagefilter)) -> IO (())
-- | `sk_imagefilter_new_arithmetic`
foreign import ccall "sk_imagefilter_new_arithmetic" sk_imagefilter_new_arithmetic :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CBool) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_blend`
foreign import ccall "sk_imagefilter_new_blend" sk_imagefilter_new_blend :: (Sk_blendmode) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_blender`
foreign import ccall "sk_imagefilter_new_blender" sk_imagefilter_new_blender :: (Ptr (Sk_blender)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_blur`
foreign import ccall "sk_imagefilter_new_blur" sk_imagefilter_new_blur :: (CFloat) -> (CFloat) -> (Sk_shader_tilemode) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_color_filter`
foreign import ccall "sk_imagefilter_new_color_filter" sk_imagefilter_new_color_filter :: (Ptr (Sk_colorfilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_compose`
foreign import ccall "sk_imagefilter_new_compose" sk_imagefilter_new_compose :: (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_displacement_map_effect`
foreign import ccall "sk_imagefilter_new_displacement_map_effect" sk_imagefilter_new_displacement_map_effect :: (Sk_color_channel) -> (Sk_color_channel) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_drop_shadow`
foreign import ccall "sk_imagefilter_new_drop_shadow" sk_imagefilter_new_drop_shadow :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (Sk_color) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_drop_shadow_only`
foreign import ccall "sk_imagefilter_new_drop_shadow_only" sk_imagefilter_new_drop_shadow_only :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (Sk_color) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_image`
foreign import ccall "sk_imagefilter_new_image" sk_imagefilter_new_image :: (Ptr (Sk_image)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_sampling_options)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_image_simple`
foreign import ccall "sk_imagefilter_new_image_simple" sk_imagefilter_new_image_simple :: (Ptr (Sk_image)) -> (Ptr (Sk_sampling_options)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_magnifier`
foreign import ccall "sk_imagefilter_new_magnifier" sk_imagefilter_new_magnifier :: (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_matrix_convolution`
foreign import ccall "sk_imagefilter_new_matrix_convolution" sk_imagefilter_new_matrix_convolution :: (Ptr (Sk_isize)) -> (Ptr (CFloat)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_ipoint)) -> (Sk_shader_tilemode) -> (CBool) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_matrix_transform`
foreign import ccall "sk_imagefilter_new_matrix_transform" sk_imagefilter_new_matrix_transform :: (Ptr (Sk_matrix)) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_imagefilter)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_merge`
foreign import ccall "sk_imagefilter_new_merge" sk_imagefilter_new_merge :: (Ptr (Ptr (Sk_imagefilter))) -> (CInt) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_merge_simple`
foreign import ccall "sk_imagefilter_new_merge_simple" sk_imagefilter_new_merge_simple :: (Ptr (Sk_imagefilter)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_offset`
foreign import ccall "sk_imagefilter_new_offset" sk_imagefilter_new_offset :: (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_picture`
foreign import ccall "sk_imagefilter_new_picture" sk_imagefilter_new_picture :: (Ptr (Sk_picture)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_picture_with_rect`
foreign import ccall "sk_imagefilter_new_picture_with_rect" sk_imagefilter_new_picture_with_rect :: (Ptr (Sk_picture)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_shader`
foreign import ccall "sk_imagefilter_new_shader" sk_imagefilter_new_shader :: (Ptr (Sk_shader)) -> (CBool) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_tile`
foreign import ccall "sk_imagefilter_new_tile" sk_imagefilter_new_tile :: (Ptr (Sk_rect)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_imagefilter)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_dilate`
foreign import ccall "sk_imagefilter_new_dilate" sk_imagefilter_new_dilate :: (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_erode`
foreign import ccall "sk_imagefilter_new_erode" sk_imagefilter_new_erode :: (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_distant_lit_diffuse`
foreign import ccall "sk_imagefilter_new_distant_lit_diffuse" sk_imagefilter_new_distant_lit_diffuse :: (Ptr (Sk_point3)) -> (Sk_color) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_point_lit_diffuse`
foreign import ccall "sk_imagefilter_new_point_lit_diffuse" sk_imagefilter_new_point_lit_diffuse :: (Ptr (Sk_point3)) -> (Sk_color) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_spot_lit_diffuse`
foreign import ccall "sk_imagefilter_new_spot_lit_diffuse" sk_imagefilter_new_spot_lit_diffuse :: (Ptr (Sk_point3)) -> (Ptr (Sk_point3)) -> (CFloat) -> (CFloat) -> (Sk_color) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_distant_lit_specular`
foreign import ccall "sk_imagefilter_new_distant_lit_specular" sk_imagefilter_new_distant_lit_specular :: (Ptr (Sk_point3)) -> (Sk_color) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_point_lit_specular`
foreign import ccall "sk_imagefilter_new_point_lit_specular" sk_imagefilter_new_point_lit_specular :: (Ptr (Sk_point3)) -> (Sk_color) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_imagefilter_new_spot_lit_specular`
foreign import ccall "sk_imagefilter_new_spot_lit_specular" sk_imagefilter_new_spot_lit_specular :: (Ptr (Sk_point3)) -> (Ptr (Sk_point3)) -> (CFloat) -> (CFloat) -> (Sk_color) -> (CFloat) -> (CFloat) -> (CFloat) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_bitmap_destructor`
foreign import ccall "sk_bitmap_destructor" sk_bitmap_destructor :: (Ptr (Sk_bitmap)) -> IO (())
-- | `sk_bitmap_new`
foreign import ccall "sk_bitmap_new" sk_bitmap_new :: IO (Ptr (Sk_bitmap))
-- | `sk_bitmap_get_info`
foreign import ccall "sk_bitmap_get_info" sk_bitmap_get_info :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_imageinfo)) -> IO (())
-- | `sk_bitmap_get_pixels`
foreign import ccall "sk_bitmap_get_pixels" sk_bitmap_get_pixels :: (Ptr (Sk_bitmap)) -> (Ptr (CSize)) -> IO (Ptr (()))
-- | `sk_bitmap_get_row_bytes`
foreign import ccall "sk_bitmap_get_row_bytes" sk_bitmap_get_row_bytes :: (Ptr (Sk_bitmap)) -> IO (CSize)
-- | `sk_bitmap_get_byte_count`
foreign import ccall "sk_bitmap_get_byte_count" sk_bitmap_get_byte_count :: (Ptr (Sk_bitmap)) -> IO (CSize)
-- | `sk_bitmap_reset`
foreign import ccall "sk_bitmap_reset" sk_bitmap_reset :: (Ptr (Sk_bitmap)) -> IO (())
-- | `sk_bitmap_is_null`
foreign import ccall "sk_bitmap_is_null" sk_bitmap_is_null :: (Ptr (Sk_bitmap)) -> IO (CBool)
-- | `sk_bitmap_is_immutable`
foreign import ccall "sk_bitmap_is_immutable" sk_bitmap_is_immutable :: (Ptr (Sk_bitmap)) -> IO (CBool)
-- | `sk_bitmap_set_immutable`
foreign import ccall "sk_bitmap_set_immutable" sk_bitmap_set_immutable :: (Ptr (Sk_bitmap)) -> IO (())
-- | `sk_bitmap_erase`
foreign import ccall "sk_bitmap_erase" sk_bitmap_erase :: (Ptr (Sk_bitmap)) -> (Sk_color) -> IO (())
-- | `sk_bitmap_erase_rect`
foreign import ccall "sk_bitmap_erase_rect" sk_bitmap_erase_rect :: (Ptr (Sk_bitmap)) -> (Sk_color) -> (Ptr (Sk_irect)) -> IO (())
-- | `sk_bitmap_get_addr_8`
foreign import ccall "sk_bitmap_get_addr_8" sk_bitmap_get_addr_8 :: (Ptr (Sk_bitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word8))
-- | `sk_bitmap_get_addr_16`
foreign import ccall "sk_bitmap_get_addr_16" sk_bitmap_get_addr_16 :: (Ptr (Sk_bitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word16))
-- | `sk_bitmap_get_addr_32`
foreign import ccall "sk_bitmap_get_addr_32" sk_bitmap_get_addr_32 :: (Ptr (Sk_bitmap)) -> (CInt) -> (CInt) -> IO (Ptr (Word32))
-- | `sk_bitmap_get_addr`
foreign import ccall "sk_bitmap_get_addr" sk_bitmap_get_addr :: (Ptr (Sk_bitmap)) -> (CInt) -> (CInt) -> IO (Ptr (()))
-- | `sk_bitmap_get_pixel_color`
foreign import ccall "sk_bitmap_get_pixel_color" sk_bitmap_get_pixel_color :: (Ptr (Sk_bitmap)) -> (CInt) -> (CInt) -> IO (Sk_color)
-- | `sk_bitmap_ready_to_draw`
foreign import ccall "sk_bitmap_ready_to_draw" sk_bitmap_ready_to_draw :: (Ptr (Sk_bitmap)) -> IO (CBool)
-- | `sk_bitmap_get_pixel_colors`
foreign import ccall "sk_bitmap_get_pixel_colors" sk_bitmap_get_pixel_colors :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_color)) -> IO (())
-- | `sk_bitmap_install_pixels`
foreign import ccall "sk_bitmap_install_pixels" sk_bitmap_install_pixels :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (FunPtr (Sk_bitmap_release_proc)) -> (Ptr (())) -> IO (CBool)
-- | `sk_bitmap_install_pixels_with_pixmap`
foreign import ccall "sk_bitmap_install_pixels_with_pixmap" sk_bitmap_install_pixels_with_pixmap :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_pixmap)) -> IO (CBool)
-- | `sk_bitmap_try_alloc_pixels`
foreign import ccall "sk_bitmap_try_alloc_pixels" sk_bitmap_try_alloc_pixels :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_imageinfo)) -> (CSize) -> IO (CBool)
-- | `sk_bitmap_try_alloc_pixels_with_flags`
foreign import ccall "sk_bitmap_try_alloc_pixels_with_flags" sk_bitmap_try_alloc_pixels_with_flags :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_imageinfo)) -> (Word32) -> IO (CBool)
-- | `sk_bitmap_set_pixels`
foreign import ccall "sk_bitmap_set_pixels" sk_bitmap_set_pixels :: (Ptr (Sk_bitmap)) -> (Ptr (())) -> IO (())
-- | `sk_bitmap_peek_pixels`
foreign import ccall "sk_bitmap_peek_pixels" sk_bitmap_peek_pixels :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_pixmap)) -> IO (CBool)
-- | `sk_bitmap_extract_subset`
foreign import ccall "sk_bitmap_extract_subset" sk_bitmap_extract_subset :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_bitmap)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_bitmap_extract_alpha`
foreign import ccall "sk_bitmap_extract_alpha" sk_bitmap_extract_alpha :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_bitmap)) -> (Ptr (Sk_paint)) -> (Ptr (Sk_ipoint)) -> IO (CBool)
-- | `sk_bitmap_notify_pixels_changed`
foreign import ccall "sk_bitmap_notify_pixels_changed" sk_bitmap_notify_pixels_changed :: (Ptr (Sk_bitmap)) -> IO (())
-- | `sk_bitmap_swap`
foreign import ccall "sk_bitmap_swap" sk_bitmap_swap :: (Ptr (Sk_bitmap)) -> (Ptr (Sk_bitmap)) -> IO (())
-- | `sk_bitmap_make_shader`
foreign import ccall "sk_bitmap_make_shader" sk_bitmap_make_shader :: (Ptr (Sk_bitmap)) -> (Sk_shader_tilemode) -> (Sk_shader_tilemode) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sksg_invalidation_controller_new`
foreign import ccall "sksg_invalidation_controller_new" sksg_invalidation_controller_new :: IO (Ptr (Sksg_invalidation_controller))
-- | `sksg_invalidation_controller_delete`
foreign import ccall "sksg_invalidation_controller_delete" sksg_invalidation_controller_delete :: (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `sksg_invalidation_controller_inval`
foreign import ccall "sksg_invalidation_controller_inval" sksg_invalidation_controller_inval :: (Ptr (Sksg_invalidation_controller)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sksg_invalidation_controller_get_bounds`
foreign import ccall "sksg_invalidation_controller_get_bounds" sksg_invalidation_controller_get_bounds :: (Ptr (Sksg_invalidation_controller)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sksg_invalidation_controller_begin`
foreign import ccall "sksg_invalidation_controller_begin" sksg_invalidation_controller_begin :: (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `sksg_invalidation_controller_end`
foreign import ccall "sksg_invalidation_controller_end" sksg_invalidation_controller_end :: (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `sksg_invalidation_controller_reset`
foreign import ccall "sksg_invalidation_controller_reset" sksg_invalidation_controller_reset :: (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `sk_path_new`
foreign import ccall "sk_path_new" sk_path_new :: IO (Ptr (Sk_path))
-- | `sk_path_delete`
foreign import ccall "sk_path_delete" sk_path_delete :: (Ptr (Sk_path)) -> IO (())
-- | `sk_path_move_to`
foreign import ccall "sk_path_move_to" sk_path_move_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_line_to`
foreign import ccall "sk_path_line_to" sk_path_line_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_quad_to`
foreign import ccall "sk_path_quad_to" sk_path_quad_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_conic_to`
foreign import ccall "sk_path_conic_to" sk_path_conic_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_cubic_to`
foreign import ccall "sk_path_cubic_to" sk_path_cubic_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_arc_to`
foreign import ccall "sk_path_arc_to" sk_path_arc_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (Sk_path_arc_size) -> (Sk_path_direction) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rarc_to`
foreign import ccall "sk_path_rarc_to" sk_path_rarc_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (Sk_path_arc_size) -> (Sk_path_direction) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_arc_to_with_oval`
foreign import ccall "sk_path_arc_to_with_oval" sk_path_arc_to_with_oval :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (CBool) -> IO (())
-- | `sk_path_arc_to_with_points`
foreign import ccall "sk_path_arc_to_with_points" sk_path_arc_to_with_points :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_close`
foreign import ccall "sk_path_close" sk_path_close :: (Ptr (Sk_path)) -> IO (())
-- | `sk_path_add_rect`
foreign import ccall "sk_path_add_rect" sk_path_add_rect :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (Sk_path_direction) -> IO (())
-- | `sk_path_add_rrect`
foreign import ccall "sk_path_add_rrect" sk_path_add_rrect :: (Ptr (Sk_path)) -> (Ptr (Sk_rrect)) -> (Sk_path_direction) -> IO (())
-- | `sk_path_add_rrect_start`
foreign import ccall "sk_path_add_rrect_start" sk_path_add_rrect_start :: (Ptr (Sk_path)) -> (Ptr (Sk_rrect)) -> (Sk_path_direction) -> (Word32) -> IO (())
-- | `sk_path_add_rounded_rect`
foreign import ccall "sk_path_add_rounded_rect" sk_path_add_rounded_rect :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (Sk_path_direction) -> IO (())
-- | `sk_path_add_oval`
foreign import ccall "sk_path_add_oval" sk_path_add_oval :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (Sk_path_direction) -> IO (())
-- | `sk_path_add_circle`
foreign import ccall "sk_path_add_circle" sk_path_add_circle :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (Sk_path_direction) -> IO (())
-- | `sk_path_get_bounds`
foreign import ccall "sk_path_get_bounds" sk_path_get_bounds :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_path_compute_tight_bounds`
foreign import ccall "sk_path_compute_tight_bounds" sk_path_compute_tight_bounds :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_path_rmove_to`
foreign import ccall "sk_path_rmove_to" sk_path_rmove_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rline_to`
foreign import ccall "sk_path_rline_to" sk_path_rline_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rquad_to`
foreign import ccall "sk_path_rquad_to" sk_path_rquad_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rconic_to`
foreign import ccall "sk_path_rconic_to" sk_path_rconic_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_rcubic_to`
foreign import ccall "sk_path_rcubic_to" sk_path_rcubic_to :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_add_rect_start`
foreign import ccall "sk_path_add_rect_start" sk_path_add_rect_start :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (Sk_path_direction) -> (Word32) -> IO (())
-- | `sk_path_add_arc`
foreign import ccall "sk_path_add_arc" sk_path_add_arc :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_path_get_filltype`
foreign import ccall "sk_path_get_filltype" sk_path_get_filltype :: (Ptr (Sk_path)) -> IO (Sk_path_filltype)
-- | `sk_path_set_filltype`
foreign import ccall "sk_path_set_filltype" sk_path_set_filltype :: (Ptr (Sk_path)) -> (Sk_path_filltype) -> IO (())
-- | `sk_path_transform`
foreign import ccall "sk_path_transform" sk_path_transform :: (Ptr (Sk_path)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_path_transform_to_dest`
foreign import ccall "sk_path_transform_to_dest" sk_path_transform_to_dest :: (Ptr (Sk_path)) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_path)) -> IO (())
-- | `sk_path_clone`
foreign import ccall "sk_path_clone" sk_path_clone :: (Ptr (Sk_path)) -> IO (Ptr (Sk_path))
-- | `sk_path_add_path_offset`
foreign import ccall "sk_path_add_path_offset" sk_path_add_path_offset :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (Sk_path_add_mode) -> IO (())
-- | `sk_path_add_path_matrix`
foreign import ccall "sk_path_add_path_matrix" sk_path_add_path_matrix :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> (Ptr (Sk_matrix)) -> (Sk_path_add_mode) -> IO (())
-- | `sk_path_add_path`
foreign import ccall "sk_path_add_path" sk_path_add_path :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> (Sk_path_add_mode) -> IO (())
-- | `sk_path_add_path_reverse`
foreign import ccall "sk_path_add_path_reverse" sk_path_add_path_reverse :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> IO (())
-- | `sk_path_reset`
foreign import ccall "sk_path_reset" sk_path_reset :: (Ptr (Sk_path)) -> IO (())
-- | `sk_path_rewind`
foreign import ccall "sk_path_rewind" sk_path_rewind :: (Ptr (Sk_path)) -> IO (())
-- | `sk_path_count_points`
foreign import ccall "sk_path_count_points" sk_path_count_points :: (Ptr (Sk_path)) -> IO (CInt)
-- | `sk_path_count_verbs`
foreign import ccall "sk_path_count_verbs" sk_path_count_verbs :: (Ptr (Sk_path)) -> IO (CInt)
-- | `sk_path_get_point`
foreign import ccall "sk_path_get_point" sk_path_get_point :: (Ptr (Sk_path)) -> (CInt) -> (Ptr (Sk_point)) -> IO (())
-- | `sk_path_get_points`
foreign import ccall "sk_path_get_points" sk_path_get_points :: (Ptr (Sk_path)) -> (Ptr (Sk_point)) -> (CInt) -> IO (CInt)
-- | `sk_path_contains`
foreign import ccall "sk_path_contains" sk_path_contains :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> IO (CBool)
-- | `sk_path_parse_svg_string`
foreign import ccall "sk_path_parse_svg_string" sk_path_parse_svg_string :: (Ptr (Sk_path)) -> (Ptr (CChar)) -> IO (CBool)
-- | `sk_path_to_svg_string`
foreign import ccall "sk_path_to_svg_string" sk_path_to_svg_string :: (Ptr (Sk_path)) -> (Ptr (Sk_string)) -> IO (())
-- | `sk_path_get_last_point`
foreign import ccall "sk_path_get_last_point" sk_path_get_last_point :: (Ptr (Sk_path)) -> (Ptr (Sk_point)) -> IO (CBool)
-- | `sk_path_convert_conic_to_quads`
foreign import ccall "sk_path_convert_conic_to_quads" sk_path_convert_conic_to_quads :: (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_point)) -> (CInt) -> IO (CInt)
-- | `sk_path_add_poly`
foreign import ccall "sk_path_add_poly" sk_path_add_poly :: (Ptr (Sk_path)) -> (Ptr (Sk_point)) -> (CInt) -> (CBool) -> IO (())
-- | `sk_path_get_segment_masks`
foreign import ccall "sk_path_get_segment_masks" sk_path_get_segment_masks :: (Ptr (Sk_path)) -> IO (Word32)
-- | `sk_path_is_oval`
foreign import ccall "sk_path_is_oval" sk_path_is_oval :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> IO (CBool)
-- | `sk_path_is_rrect`
foreign import ccall "sk_path_is_rrect" sk_path_is_rrect :: (Ptr (Sk_path)) -> (Ptr (Sk_rrect)) -> IO (CBool)
-- | `sk_path_is_line`
foreign import ccall "sk_path_is_line" sk_path_is_line :: (Ptr (Sk_path)) -> (Ptr (Sk_point)) -> IO (CBool)
-- | `sk_path_is_rect`
foreign import ccall "sk_path_is_rect" sk_path_is_rect :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (Ptr (CBool)) -> (Ptr (Sk_path_direction)) -> IO (CBool)
-- | `sk_path_is_convex`
foreign import ccall "sk_path_is_convex" sk_path_is_convex :: (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_path_create_iter`
foreign import ccall "sk_path_create_iter" sk_path_create_iter :: (Ptr (Sk_path)) -> (CInt) -> IO (Ptr (Sk_path_iterator))
-- | `sk_path_iter_next`
foreign import ccall "sk_path_iter_next" sk_path_iter_next :: (Ptr (Sk_path_iterator)) -> (Ptr (Sk_point)) -> IO (Sk_path_verb)
-- | `sk_path_iter_conic_weight`
foreign import ccall "sk_path_iter_conic_weight" sk_path_iter_conic_weight :: (Ptr (Sk_path_iterator)) -> IO (CFloat)
-- | `sk_path_iter_is_close_line`
foreign import ccall "sk_path_iter_is_close_line" sk_path_iter_is_close_line :: (Ptr (Sk_path_iterator)) -> IO (CInt)
-- | `sk_path_iter_is_closed_contour`
foreign import ccall "sk_path_iter_is_closed_contour" sk_path_iter_is_closed_contour :: (Ptr (Sk_path_iterator)) -> IO (CInt)
-- | `sk_path_iter_destroy`
foreign import ccall "sk_path_iter_destroy" sk_path_iter_destroy :: (Ptr (Sk_path_iterator)) -> IO (())
-- | `sk_path_create_rawiter`
foreign import ccall "sk_path_create_rawiter" sk_path_create_rawiter :: (Ptr (Sk_path)) -> IO (Ptr (Sk_path_rawiterator))
-- | `sk_path_rawiter_peek`
foreign import ccall "sk_path_rawiter_peek" sk_path_rawiter_peek :: (Ptr (Sk_path_rawiterator)) -> IO (Sk_path_verb)
-- | `sk_path_rawiter_next`
foreign import ccall "sk_path_rawiter_next" sk_path_rawiter_next :: (Ptr (Sk_path_rawiterator)) -> (Ptr (Sk_point)) -> IO (Sk_path_verb)
-- | `sk_path_rawiter_conic_weight`
foreign import ccall "sk_path_rawiter_conic_weight" sk_path_rawiter_conic_weight :: (Ptr (Sk_path_rawiterator)) -> IO (CFloat)
-- | `sk_path_rawiter_destroy`
foreign import ccall "sk_path_rawiter_destroy" sk_path_rawiter_destroy :: (Ptr (Sk_path_rawiterator)) -> IO (())
-- | `sk_pathop_op`
foreign import ccall "sk_pathop_op" sk_pathop_op :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> (Sk_pathop) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_pathop_simplify`
foreign import ccall "sk_pathop_simplify" sk_pathop_simplify :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_pathop_tight_bounds`
foreign import ccall "sk_pathop_tight_bounds" sk_pathop_tight_bounds :: (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> IO (CBool)
-- | `sk_pathop_as_winding`
foreign import ccall "sk_pathop_as_winding" sk_pathop_as_winding :: (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_opbuilder_new`
foreign import ccall "sk_opbuilder_new" sk_opbuilder_new :: IO (Ptr (Sk_opbuilder))
-- | `sk_opbuilder_destroy`
foreign import ccall "sk_opbuilder_destroy" sk_opbuilder_destroy :: (Ptr (Sk_opbuilder)) -> IO (())
-- | `sk_opbuilder_add`
foreign import ccall "sk_opbuilder_add" sk_opbuilder_add :: (Ptr (Sk_opbuilder)) -> (Ptr (Sk_path)) -> (Sk_pathop) -> IO (())
-- | `sk_opbuilder_resolve`
foreign import ccall "sk_opbuilder_resolve" sk_opbuilder_resolve :: (Ptr (Sk_opbuilder)) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_pathmeasure_new`
foreign import ccall "sk_pathmeasure_new" sk_pathmeasure_new :: IO (Ptr (Sk_pathmeasure))
-- | `sk_pathmeasure_new_with_path`
foreign import ccall "sk_pathmeasure_new_with_path" sk_pathmeasure_new_with_path :: (Ptr (Sk_path)) -> (CBool) -> (CFloat) -> IO (Ptr (Sk_pathmeasure))
-- | `sk_pathmeasure_destroy`
foreign import ccall "sk_pathmeasure_destroy" sk_pathmeasure_destroy :: (Ptr (Sk_pathmeasure)) -> IO (())
-- | `sk_pathmeasure_set_path`
foreign import ccall "sk_pathmeasure_set_path" sk_pathmeasure_set_path :: (Ptr (Sk_pathmeasure)) -> (Ptr (Sk_path)) -> (CBool) -> IO (())
-- | `sk_pathmeasure_get_length`
foreign import ccall "sk_pathmeasure_get_length" sk_pathmeasure_get_length :: (Ptr (Sk_pathmeasure)) -> IO (CFloat)
-- | `sk_pathmeasure_get_pos_tan`
foreign import ccall "sk_pathmeasure_get_pos_tan" sk_pathmeasure_get_pos_tan :: (Ptr (Sk_pathmeasure)) -> (CFloat) -> (Ptr (Sk_point)) -> (Ptr (Sk_vector)) -> IO (CBool)
-- | `sk_pathmeasure_get_matrix`
foreign import ccall "sk_pathmeasure_get_matrix" sk_pathmeasure_get_matrix :: (Ptr (Sk_pathmeasure)) -> (CFloat) -> (Ptr (Sk_matrix)) -> (Sk_pathmeasure_matrixflags) -> IO (CBool)
-- | `sk_pathmeasure_get_segment`
foreign import ccall "sk_pathmeasure_get_segment" sk_pathmeasure_get_segment :: (Ptr (Sk_pathmeasure)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_path)) -> (CBool) -> IO (CBool)
-- | `sk_pathmeasure_is_closed`
foreign import ccall "sk_pathmeasure_is_closed" sk_pathmeasure_is_closed :: (Ptr (Sk_pathmeasure)) -> IO (CBool)
-- | `sk_pathmeasure_next_contour`
foreign import ccall "sk_pathmeasure_next_contour" sk_pathmeasure_next_contour :: (Ptr (Sk_pathmeasure)) -> IO (CBool)
-- | `sk_runtimeeffect_make_for_color_filter`
foreign import ccall "sk_runtimeeffect_make_for_color_filter" sk_runtimeeffect_make_for_color_filter :: (Ptr (Sk_string)) -> (Ptr (Sk_string)) -> IO (Ptr (Sk_runtimeeffect))
-- | `sk_runtimeeffect_make_for_shader`
foreign import ccall "sk_runtimeeffect_make_for_shader" sk_runtimeeffect_make_for_shader :: (Ptr (Sk_string)) -> (Ptr (Sk_string)) -> IO (Ptr (Sk_runtimeeffect))
-- | `sk_runtimeeffect_make_for_blender`
foreign import ccall "sk_runtimeeffect_make_for_blender" sk_runtimeeffect_make_for_blender :: (Ptr (Sk_string)) -> (Ptr (Sk_string)) -> IO (Ptr (Sk_runtimeeffect))
-- | `sk_runtimeeffect_unref`
foreign import ccall "sk_runtimeeffect_unref" sk_runtimeeffect_unref :: (Ptr (Sk_runtimeeffect)) -> IO (())
-- | `sk_runtimeeffect_make_shader`
foreign import ccall "sk_runtimeeffect_make_shader" sk_runtimeeffect_make_shader :: (Ptr (Sk_runtimeeffect)) -> (Ptr (Sk_data)) -> (Ptr (Ptr (Sk_flattenable))) -> (CSize) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_runtimeeffect_make_color_filter`
foreign import ccall "sk_runtimeeffect_make_color_filter" sk_runtimeeffect_make_color_filter :: (Ptr (Sk_runtimeeffect)) -> (Ptr (Sk_data)) -> (Ptr (Ptr (Sk_flattenable))) -> (CSize) -> IO (Ptr (Sk_colorfilter))
-- | `sk_runtimeeffect_make_blender`
foreign import ccall "sk_runtimeeffect_make_blender" sk_runtimeeffect_make_blender :: (Ptr (Sk_runtimeeffect)) -> (Ptr (Sk_data)) -> (Ptr (Ptr (Sk_flattenable))) -> (CSize) -> IO (Ptr (Sk_blender))
-- | `sk_runtimeeffect_get_uniform_byte_size`
foreign import ccall "sk_runtimeeffect_get_uniform_byte_size" sk_runtimeeffect_get_uniform_byte_size :: (Ptr (Sk_runtimeeffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_uniforms_size`
foreign import ccall "sk_runtimeeffect_get_uniforms_size" sk_runtimeeffect_get_uniforms_size :: (Ptr (Sk_runtimeeffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_uniform_name`
foreign import ccall "sk_runtimeeffect_get_uniform_name" sk_runtimeeffect_get_uniform_name :: (Ptr (Sk_runtimeeffect)) -> (CInt) -> (Ptr (Sk_string)) -> IO (())
-- | `sk_runtimeeffect_get_uniform_from_index`
foreign import ccall "sk_runtimeeffect_get_uniform_from_index" sk_runtimeeffect_get_uniform_from_index :: (Ptr (Sk_runtimeeffect)) -> (CInt) -> (Ptr (Sk_runtimeeffect_uniform)) -> IO (())
-- | `sk_runtimeeffect_get_uniform_from_name`
foreign import ccall "sk_runtimeeffect_get_uniform_from_name" sk_runtimeeffect_get_uniform_from_name :: (Ptr (Sk_runtimeeffect)) -> (Ptr (CChar)) -> (CSize) -> (Ptr (Sk_runtimeeffect_uniform)) -> IO (())
-- | `sk_runtimeeffect_get_children_size`
foreign import ccall "sk_runtimeeffect_get_children_size" sk_runtimeeffect_get_children_size :: (Ptr (Sk_runtimeeffect)) -> IO (CSize)
-- | `sk_runtimeeffect_get_child_name`
foreign import ccall "sk_runtimeeffect_get_child_name" sk_runtimeeffect_get_child_name :: (Ptr (Sk_runtimeeffect)) -> (CInt) -> (Ptr (Sk_string)) -> IO (())
-- | `sk_runtimeeffect_get_child_from_index`
foreign import ccall "sk_runtimeeffect_get_child_from_index" sk_runtimeeffect_get_child_from_index :: (Ptr (Sk_runtimeeffect)) -> (CInt) -> (Ptr (Sk_runtimeeffect_child)) -> IO (())
-- | `sk_runtimeeffect_get_child_from_name`
foreign import ccall "sk_runtimeeffect_get_child_from_name" sk_runtimeeffect_get_child_from_name :: (Ptr (Sk_runtimeeffect)) -> (Ptr (CChar)) -> (CSize) -> (Ptr (Sk_runtimeeffect_child)) -> IO (())
-- | `sk_refcnt_unique`
foreign import ccall "sk_refcnt_unique" sk_refcnt_unique :: (Ptr (Sk_refcnt)) -> IO (CBool)
-- | `sk_refcnt_get_ref_count`
foreign import ccall "sk_refcnt_get_ref_count" sk_refcnt_get_ref_count :: (Ptr (Sk_refcnt)) -> IO (CInt)
-- | `sk_refcnt_safe_ref`
foreign import ccall "sk_refcnt_safe_ref" sk_refcnt_safe_ref :: (Ptr (Sk_refcnt)) -> IO (())
-- | `sk_refcnt_safe_unref`
foreign import ccall "sk_refcnt_safe_unref" sk_refcnt_safe_unref :: (Ptr (Sk_refcnt)) -> IO (())
-- | `sk_nvrefcnt_unique`
foreign import ccall "sk_nvrefcnt_unique" sk_nvrefcnt_unique :: (Ptr (Sk_nvrefcnt)) -> IO (CBool)
-- | `sk_nvrefcnt_get_ref_count`
foreign import ccall "sk_nvrefcnt_get_ref_count" sk_nvrefcnt_get_ref_count :: (Ptr (Sk_nvrefcnt)) -> IO (CInt)
-- | `sk_nvrefcnt_safe_ref`
foreign import ccall "sk_nvrefcnt_safe_ref" sk_nvrefcnt_safe_ref :: (Ptr (Sk_nvrefcnt)) -> IO (())
-- | `sk_nvrefcnt_safe_unref`
foreign import ccall "sk_nvrefcnt_safe_unref" sk_nvrefcnt_safe_unref :: (Ptr (Sk_nvrefcnt)) -> IO (())
-- | `sk_colortype_get_default_8888`
foreign import ccall "sk_colortype_get_default_8888" sk_colortype_get_default_8888 :: IO (Sk_colortype)
-- | `sk_version_get_milestone`
foreign import ccall "sk_version_get_milestone" sk_version_get_milestone :: IO (CInt)
-- | `sk_version_get_increment`
foreign import ccall "sk_version_get_increment" sk_version_get_increment :: IO (CInt)
-- | `sk_version_get_string`
foreign import ccall "sk_version_get_string" sk_version_get_string :: IO (Ptr (CChar))
-- | `sk_document_unref`
foreign import ccall "sk_document_unref" sk_document_unref :: (Ptr (Sk_document)) -> IO (())
-- | `sk_document_create_pdf_from_stream`
foreign import ccall "sk_document_create_pdf_from_stream" sk_document_create_pdf_from_stream :: (Ptr (Sk_wstream)) -> IO (Ptr (Sk_document))
-- | `sk_document_create_pdf_from_stream_with_metadata`
foreign import ccall "sk_document_create_pdf_from_stream_with_metadata" sk_document_create_pdf_from_stream_with_metadata :: (Ptr (Sk_wstream)) -> (Ptr (Sk_document_pdf_metadata)) -> IO (Ptr (Sk_document))
-- | `sk_document_create_xps_from_stream`
foreign import ccall "sk_document_create_xps_from_stream" sk_document_create_xps_from_stream :: (Ptr (Sk_wstream)) -> (CFloat) -> IO (Ptr (Sk_document))
-- | `sk_document_begin_page`
foreign import ccall "sk_document_begin_page" sk_document_begin_page :: (Ptr (Sk_document)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_rect)) -> IO (Ptr (Sk_canvas))
-- | `sk_document_end_page`
foreign import ccall "sk_document_end_page" sk_document_end_page :: (Ptr (Sk_document)) -> IO (())
-- | `sk_document_close`
foreign import ccall "sk_document_close" sk_document_close :: (Ptr (Sk_document)) -> IO (())
-- | `sk_document_abort`
foreign import ccall "sk_document_abort" sk_document_abort :: (Ptr (Sk_document)) -> IO (())
-- | `sk_image_ref`
foreign import ccall "sk_image_ref" sk_image_ref :: (Ptr (Sk_image)) -> IO (())
-- | `sk_image_unref`
foreign import ccall "sk_image_unref" sk_image_unref :: (Ptr (Sk_image)) -> IO (())
-- | `sk_image_new_raster_copy`
foreign import ccall "sk_image_new_raster_copy" sk_image_new_raster_copy :: (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> IO (Ptr (Sk_image))
-- | `sk_image_new_raster_copy_with_pixmap`
foreign import ccall "sk_image_new_raster_copy_with_pixmap" sk_image_new_raster_copy_with_pixmap :: (Ptr (Sk_pixmap)) -> IO (Ptr (Sk_image))
-- | `sk_image_new_raster_data`
foreign import ccall "sk_image_new_raster_data" sk_image_new_raster_data :: (Ptr (Sk_imageinfo)) -> (Ptr (Sk_data)) -> (CSize) -> IO (Ptr (Sk_image))
-- | `sk_image_new_raster`
foreign import ccall "sk_image_new_raster" sk_image_new_raster :: (Ptr (Sk_pixmap)) -> (FunPtr (Sk_image_raster_release_proc)) -> (Ptr (())) -> IO (Ptr (Sk_image))
-- | `sk_image_new_from_bitmap`
foreign import ccall "sk_image_new_from_bitmap" sk_image_new_from_bitmap :: (Ptr (Sk_bitmap)) -> IO (Ptr (Sk_image))
-- | `sk_image_new_from_encoded`
foreign import ccall "sk_image_new_from_encoded" sk_image_new_from_encoded :: (Ptr (Sk_data)) -> IO (Ptr (Sk_image))
-- | `sk_image_new_from_texture`
foreign import ccall "sk_image_new_from_texture" sk_image_new_from_texture :: (Ptr (Gr_recording_context)) -> (Ptr (Gr_backendtexture)) -> (Gr_surfaceorigin) -> (Sk_colortype) -> (Sk_alphatype) -> (Ptr (Sk_colorspace)) -> (FunPtr (Sk_image_texture_release_proc)) -> (Ptr (())) -> IO (Ptr (Sk_image))
-- | `sk_image_new_from_adopted_texture`
foreign import ccall "sk_image_new_from_adopted_texture" sk_image_new_from_adopted_texture :: (Ptr (Gr_recording_context)) -> (Ptr (Gr_backendtexture)) -> (Gr_surfaceorigin) -> (Sk_colortype) -> (Sk_alphatype) -> (Ptr (Sk_colorspace)) -> IO (Ptr (Sk_image))
-- | `sk_image_new_from_picture`
foreign import ccall "sk_image_new_from_picture" sk_image_new_from_picture :: (Ptr (Sk_picture)) -> (Ptr (Sk_isize)) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_paint)) -> (CBool) -> (Ptr (Sk_colorspace)) -> (Ptr (Sk_surfaceprops)) -> IO (Ptr (Sk_image))
-- | `sk_image_get_width`
foreign import ccall "sk_image_get_width" sk_image_get_width :: (Ptr (Sk_image)) -> IO (CInt)
-- | `sk_image_get_height`
foreign import ccall "sk_image_get_height" sk_image_get_height :: (Ptr (Sk_image)) -> IO (CInt)
-- | `sk_image_get_unique_id`
foreign import ccall "sk_image_get_unique_id" sk_image_get_unique_id :: (Ptr (Sk_image)) -> IO (Word32)
-- | `sk_image_get_alpha_type`
foreign import ccall "sk_image_get_alpha_type" sk_image_get_alpha_type :: (Ptr (Sk_image)) -> IO (Sk_alphatype)
-- | `sk_image_get_color_type`
foreign import ccall "sk_image_get_color_type" sk_image_get_color_type :: (Ptr (Sk_image)) -> IO (Sk_colortype)
-- | `sk_image_get_colorspace`
foreign import ccall "sk_image_get_colorspace" sk_image_get_colorspace :: (Ptr (Sk_image)) -> IO (Ptr (Sk_colorspace))
-- | `sk_image_is_alpha_only`
foreign import ccall "sk_image_is_alpha_only" sk_image_is_alpha_only :: (Ptr (Sk_image)) -> IO (CBool)
-- | `sk_image_make_shader`
foreign import ccall "sk_image_make_shader" sk_image_make_shader :: (Ptr (Sk_image)) -> (Sk_shader_tilemode) -> (Sk_shader_tilemode) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_image_make_raw_shader`
foreign import ccall "sk_image_make_raw_shader" sk_image_make_raw_shader :: (Ptr (Sk_image)) -> (Sk_shader_tilemode) -> (Sk_shader_tilemode) -> (Ptr (Sk_sampling_options)) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_image_peek_pixels`
foreign import ccall "sk_image_peek_pixels" sk_image_peek_pixels :: (Ptr (Sk_image)) -> (Ptr (Sk_pixmap)) -> IO (CBool)
-- | `sk_image_is_texture_backed`
foreign import ccall "sk_image_is_texture_backed" sk_image_is_texture_backed :: (Ptr (Sk_image)) -> IO (CBool)
-- | `sk_image_is_lazy_generated`
foreign import ccall "sk_image_is_lazy_generated" sk_image_is_lazy_generated :: (Ptr (Sk_image)) -> IO (CBool)
-- | `sk_image_is_valid`
foreign import ccall "sk_image_is_valid" sk_image_is_valid :: (Ptr (Sk_image)) -> (Ptr (Gr_recording_context)) -> IO (CBool)
-- | `sk_image_read_pixels`
foreign import ccall "sk_image_read_pixels" sk_image_read_pixels :: (Ptr (Sk_image)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (CInt) -> (CInt) -> (Sk_image_caching_hint) -> IO (CBool)
-- | `sk_image_read_pixels_into_pixmap`
foreign import ccall "sk_image_read_pixels_into_pixmap" sk_image_read_pixels_into_pixmap :: (Ptr (Sk_image)) -> (Ptr (Sk_pixmap)) -> (CInt) -> (CInt) -> (Sk_image_caching_hint) -> IO (CBool)
-- | `sk_image_scale_pixels`
foreign import ccall "sk_image_scale_pixels" sk_image_scale_pixels :: (Ptr (Sk_image)) -> (Ptr (Sk_pixmap)) -> (Ptr (Sk_sampling_options)) -> (Sk_image_caching_hint) -> IO (CBool)
-- | `sk_image_ref_encoded`
foreign import ccall "sk_image_ref_encoded" sk_image_ref_encoded :: (Ptr (Sk_image)) -> IO (Ptr (Sk_data))
-- | `sk_image_make_subset_raster`
foreign import ccall "sk_image_make_subset_raster" sk_image_make_subset_raster :: (Ptr (Sk_image)) -> (Ptr (Sk_irect)) -> IO (Ptr (Sk_image))
-- | `sk_image_make_subset`
foreign import ccall "sk_image_make_subset" sk_image_make_subset :: (Ptr (Sk_image)) -> (Ptr (Gr_direct_context)) -> (Ptr (Sk_irect)) -> IO (Ptr (Sk_image))
-- | `sk_image_make_texture_image`
foreign import ccall "sk_image_make_texture_image" sk_image_make_texture_image :: (Ptr (Sk_image)) -> (Ptr (Gr_direct_context)) -> (CBool) -> (CBool) -> IO (Ptr (Sk_image))
-- | `sk_image_make_non_texture_image`
foreign import ccall "sk_image_make_non_texture_image" sk_image_make_non_texture_image :: (Ptr (Sk_image)) -> IO (Ptr (Sk_image))
-- | `sk_image_make_raster_image`
foreign import ccall "sk_image_make_raster_image" sk_image_make_raster_image :: (Ptr (Sk_image)) -> IO (Ptr (Sk_image))
-- | `sk_image_make_with_filter_raster`
foreign import ccall "sk_image_make_with_filter_raster" sk_image_make_with_filter_raster :: (Ptr (Sk_image)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_ipoint)) -> IO (Ptr (Sk_image))
-- | `sk_image_make_with_filter`
foreign import ccall "sk_image_make_with_filter" sk_image_make_with_filter :: (Ptr (Sk_image)) -> (Ptr (Gr_recording_context)) -> (Ptr (Sk_imagefilter)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_irect)) -> (Ptr (Sk_ipoint)) -> IO (Ptr (Sk_image))
-- | `sk_codec_min_buffered_bytes_needed`
foreign import ccall "sk_codec_min_buffered_bytes_needed" sk_codec_min_buffered_bytes_needed :: IO (CSize)
-- | `sk_codec_new_from_stream`
foreign import ccall "sk_codec_new_from_stream" sk_codec_new_from_stream :: (Ptr (Sk_stream)) -> (Ptr (Sk_codec_result)) -> IO (Ptr (Sk_codec))
-- | `sk_codec_new_from_data`
foreign import ccall "sk_codec_new_from_data" sk_codec_new_from_data :: (Ptr (Sk_data)) -> IO (Ptr (Sk_codec))
-- | `sk_codec_destroy`
foreign import ccall "sk_codec_destroy" sk_codec_destroy :: (Ptr (Sk_codec)) -> IO (())
-- | `sk_codec_get_info`
foreign import ccall "sk_codec_get_info" sk_codec_get_info :: (Ptr (Sk_codec)) -> (Ptr (Sk_imageinfo)) -> IO (())
-- | `sk_codec_get_origin`
foreign import ccall "sk_codec_get_origin" sk_codec_get_origin :: (Ptr (Sk_codec)) -> IO (Sk_encodedorigin)
-- | `sk_codec_get_scaled_dimensions`
foreign import ccall "sk_codec_get_scaled_dimensions" sk_codec_get_scaled_dimensions :: (Ptr (Sk_codec)) -> (CFloat) -> (Ptr (Sk_isize)) -> IO (())
-- | `sk_codec_get_valid_subset`
foreign import ccall "sk_codec_get_valid_subset" sk_codec_get_valid_subset :: (Ptr (Sk_codec)) -> (Ptr (Sk_irect)) -> IO (CBool)
-- | `sk_codec_get_encoded_format`
foreign import ccall "sk_codec_get_encoded_format" sk_codec_get_encoded_format :: (Ptr (Sk_codec)) -> IO (Sk_encoded_image_format)
-- | `sk_codec_get_pixels`
foreign import ccall "sk_codec_get_pixels" sk_codec_get_pixels :: (Ptr (Sk_codec)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (Ptr (Sk_codec_options)) -> IO (Sk_codec_result)
-- | `sk_codec_start_incremental_decode`
foreign import ccall "sk_codec_start_incremental_decode" sk_codec_start_incremental_decode :: (Ptr (Sk_codec)) -> (Ptr (Sk_imageinfo)) -> (Ptr (())) -> (CSize) -> (Ptr (Sk_codec_options)) -> IO (Sk_codec_result)
-- | `sk_codec_incremental_decode`
foreign import ccall "sk_codec_incremental_decode" sk_codec_incremental_decode :: (Ptr (Sk_codec)) -> (Ptr (CInt)) -> IO (Sk_codec_result)
-- | `sk_codec_start_scanline_decode`
foreign import ccall "sk_codec_start_scanline_decode" sk_codec_start_scanline_decode :: (Ptr (Sk_codec)) -> (Ptr (Sk_imageinfo)) -> (Ptr (Sk_codec_options)) -> IO (Sk_codec_result)
-- | `sk_codec_get_scanlines`
foreign import ccall "sk_codec_get_scanlines" sk_codec_get_scanlines :: (Ptr (Sk_codec)) -> (Ptr (())) -> (CInt) -> (CSize) -> IO (CInt)
-- | `sk_codec_skip_scanlines`
foreign import ccall "sk_codec_skip_scanlines" sk_codec_skip_scanlines :: (Ptr (Sk_codec)) -> (CInt) -> IO (CBool)
-- | `sk_codec_get_scanline_order`
foreign import ccall "sk_codec_get_scanline_order" sk_codec_get_scanline_order :: (Ptr (Sk_codec)) -> IO (Sk_codec_scanline_order)
-- | `sk_codec_next_scanline`
foreign import ccall "sk_codec_next_scanline" sk_codec_next_scanline :: (Ptr (Sk_codec)) -> IO (CInt)
-- | `sk_codec_output_scanline`
foreign import ccall "sk_codec_output_scanline" sk_codec_output_scanline :: (Ptr (Sk_codec)) -> (CInt) -> IO (CInt)
-- | `sk_codec_get_frame_count`
foreign import ccall "sk_codec_get_frame_count" sk_codec_get_frame_count :: (Ptr (Sk_codec)) -> IO (CInt)
-- | `sk_codec_get_frame_info`
foreign import ccall "sk_codec_get_frame_info" sk_codec_get_frame_info :: (Ptr (Sk_codec)) -> (Ptr (Sk_codec_frameinfo)) -> IO (())
-- | `sk_codec_get_frame_info_for_index`
foreign import ccall "sk_codec_get_frame_info_for_index" sk_codec_get_frame_info_for_index :: (Ptr (Sk_codec)) -> (CInt) -> (Ptr (Sk_codec_frameinfo)) -> IO (CBool)
-- | `sk_codec_get_repetition_count`
foreign import ccall "sk_codec_get_repetition_count" sk_codec_get_repetition_count :: (Ptr (Sk_codec)) -> IO (CInt)
-- | `sk_data_new_empty`
foreign import ccall "sk_data_new_empty" sk_data_new_empty :: IO (Ptr (Sk_data))
-- | `sk_data_new_with_copy`
foreign import ccall "sk_data_new_with_copy" sk_data_new_with_copy :: (Ptr (())) -> (CSize) -> IO (Ptr (Sk_data))
-- | `sk_data_new_subset`
foreign import ccall "sk_data_new_subset" sk_data_new_subset :: (Ptr (Sk_data)) -> (CSize) -> (CSize) -> IO (Ptr (Sk_data))
-- | `sk_data_ref`
foreign import ccall "sk_data_ref" sk_data_ref :: (Ptr (Sk_data)) -> IO (())
-- | `sk_data_unref`
foreign import ccall "sk_data_unref" sk_data_unref :: (Ptr (Sk_data)) -> IO (())
-- | `sk_data_get_size`
foreign import ccall "sk_data_get_size" sk_data_get_size :: (Ptr (Sk_data)) -> IO (CSize)
-- | `sk_data_get_data`
foreign import ccall "sk_data_get_data" sk_data_get_data :: (Ptr (Sk_data)) -> IO (Ptr (()))
-- | `sk_data_new_from_file`
foreign import ccall "sk_data_new_from_file" sk_data_new_from_file :: (Ptr (CChar)) -> IO (Ptr (Sk_data))
-- | `sk_data_new_from_stream`
foreign import ccall "sk_data_new_from_stream" sk_data_new_from_stream :: (Ptr (Sk_stream)) -> (CSize) -> IO (Ptr (Sk_data))
-- | `sk_data_get_bytes`
foreign import ccall "sk_data_get_bytes" sk_data_get_bytes :: (Ptr (Sk_data)) -> IO (Ptr (Word8))
-- | `sk_data_new_with_proc`
foreign import ccall "sk_data_new_with_proc" sk_data_new_with_proc :: (Ptr (())) -> (CSize) -> (FunPtr (Sk_data_release_proc)) -> (Ptr (())) -> IO (Ptr (Sk_data))
-- | `sk_data_new_uninitialized`
foreign import ccall "sk_data_new_uninitialized" sk_data_new_uninitialized :: (CSize) -> IO (Ptr (Sk_data))
-- | `sk_paint_new`
foreign import ccall "sk_paint_new" sk_paint_new :: IO (Ptr (Sk_paint))
-- | `sk_paint_clone`
foreign import ccall "sk_paint_clone" sk_paint_clone :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_paint))
-- | `sk_paint_delete`
foreign import ccall "sk_paint_delete" sk_paint_delete :: (Ptr (Sk_paint)) -> IO (())
-- | `sk_paint_reset`
foreign import ccall "sk_paint_reset" sk_paint_reset :: (Ptr (Sk_paint)) -> IO (())
-- | `sk_paint_is_antialias`
foreign import ccall "sk_paint_is_antialias" sk_paint_is_antialias :: (Ptr (Sk_paint)) -> IO (CBool)
-- | `sk_paint_set_antialias`
foreign import ccall "sk_paint_set_antialias" sk_paint_set_antialias :: (Ptr (Sk_paint)) -> (CBool) -> IO (())
-- | `sk_paint_get_color`
foreign import ccall "sk_paint_get_color" sk_paint_get_color :: (Ptr (Sk_paint)) -> IO (Sk_color)
-- | `sk_paint_get_color4f`
foreign import ccall "sk_paint_get_color4f" sk_paint_get_color4f :: (Ptr (Sk_paint)) -> (Ptr (Sk_color4f)) -> IO (())
-- | `sk_paint_set_color`
foreign import ccall "sk_paint_set_color" sk_paint_set_color :: (Ptr (Sk_paint)) -> (Sk_color) -> IO (())
-- | `sk_paint_set_color4f`
foreign import ccall "sk_paint_set_color4f" sk_paint_set_color4f :: (Ptr (Sk_paint)) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> IO (())
-- | `sk_paint_get_style`
foreign import ccall "sk_paint_get_style" sk_paint_get_style :: (Ptr (Sk_paint)) -> IO (Sk_paint_style)
-- | `sk_paint_set_style`
foreign import ccall "sk_paint_set_style" sk_paint_set_style :: (Ptr (Sk_paint)) -> (Sk_paint_style) -> IO (())
-- | `sk_paint_get_stroke_width`
foreign import ccall "sk_paint_get_stroke_width" sk_paint_get_stroke_width :: (Ptr (Sk_paint)) -> IO (CFloat)
-- | `sk_paint_set_stroke_width`
foreign import ccall "sk_paint_set_stroke_width" sk_paint_set_stroke_width :: (Ptr (Sk_paint)) -> (CFloat) -> IO (())
-- | `sk_paint_get_stroke_miter`
foreign import ccall "sk_paint_get_stroke_miter" sk_paint_get_stroke_miter :: (Ptr (Sk_paint)) -> IO (CFloat)
-- | `sk_paint_set_stroke_miter`
foreign import ccall "sk_paint_set_stroke_miter" sk_paint_set_stroke_miter :: (Ptr (Sk_paint)) -> (CFloat) -> IO (())
-- | `sk_paint_get_stroke_cap`
foreign import ccall "sk_paint_get_stroke_cap" sk_paint_get_stroke_cap :: (Ptr (Sk_paint)) -> IO (Sk_stroke_cap)
-- | `sk_paint_set_stroke_cap`
foreign import ccall "sk_paint_set_stroke_cap" sk_paint_set_stroke_cap :: (Ptr (Sk_paint)) -> (Sk_stroke_cap) -> IO (())
-- | `sk_paint_get_stroke_join`
foreign import ccall "sk_paint_get_stroke_join" sk_paint_get_stroke_join :: (Ptr (Sk_paint)) -> IO (Sk_stroke_join)
-- | `sk_paint_set_stroke_join`
foreign import ccall "sk_paint_set_stroke_join" sk_paint_set_stroke_join :: (Ptr (Sk_paint)) -> (Sk_stroke_join) -> IO (())
-- | `sk_paint_set_shader`
foreign import ccall "sk_paint_set_shader" sk_paint_set_shader :: (Ptr (Sk_paint)) -> (Ptr (Sk_shader)) -> IO (())
-- | `sk_paint_set_maskfilter`
foreign import ccall "sk_paint_set_maskfilter" sk_paint_set_maskfilter :: (Ptr (Sk_paint)) -> (Ptr (Sk_maskfilter)) -> IO (())
-- | `sk_paint_set_blendmode`
foreign import ccall "sk_paint_set_blendmode" sk_paint_set_blendmode :: (Ptr (Sk_paint)) -> (Sk_blendmode) -> IO (())
-- | `sk_paint_set_blender`
foreign import ccall "sk_paint_set_blender" sk_paint_set_blender :: (Ptr (Sk_paint)) -> (Ptr (Sk_blender)) -> IO (())
-- | `sk_paint_is_dither`
foreign import ccall "sk_paint_is_dither" sk_paint_is_dither :: (Ptr (Sk_paint)) -> IO (CBool)
-- | `sk_paint_set_dither`
foreign import ccall "sk_paint_set_dither" sk_paint_set_dither :: (Ptr (Sk_paint)) -> (CBool) -> IO (())
-- | `sk_paint_get_shader`
foreign import ccall "sk_paint_get_shader" sk_paint_get_shader :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_shader))
-- | `sk_paint_get_maskfilter`
foreign import ccall "sk_paint_get_maskfilter" sk_paint_get_maskfilter :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_maskfilter))
-- | `sk_paint_set_colorfilter`
foreign import ccall "sk_paint_set_colorfilter" sk_paint_set_colorfilter :: (Ptr (Sk_paint)) -> (Ptr (Sk_colorfilter)) -> IO (())
-- | `sk_paint_get_colorfilter`
foreign import ccall "sk_paint_get_colorfilter" sk_paint_get_colorfilter :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_colorfilter))
-- | `sk_paint_set_imagefilter`
foreign import ccall "sk_paint_set_imagefilter" sk_paint_set_imagefilter :: (Ptr (Sk_paint)) -> (Ptr (Sk_imagefilter)) -> IO (())
-- | `sk_paint_get_imagefilter`
foreign import ccall "sk_paint_get_imagefilter" sk_paint_get_imagefilter :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_imagefilter))
-- | `sk_paint_get_blendmode`
foreign import ccall "sk_paint_get_blendmode" sk_paint_get_blendmode :: (Ptr (Sk_paint)) -> IO (Sk_blendmode)
-- | `sk_paint_get_blender`
foreign import ccall "sk_paint_get_blender" sk_paint_get_blender :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_blender))
-- | `sk_paint_get_path_effect`
foreign import ccall "sk_paint_get_path_effect" sk_paint_get_path_effect :: (Ptr (Sk_paint)) -> IO (Ptr (Sk_path_effect))
-- | `sk_paint_set_path_effect`
foreign import ccall "sk_paint_set_path_effect" sk_paint_set_path_effect :: (Ptr (Sk_paint)) -> (Ptr (Sk_path_effect)) -> IO (())
-- | `sk_paint_get_fill_path`
foreign import ccall "sk_paint_get_fill_path" sk_paint_get_fill_path :: (Ptr (Sk_paint)) -> (Ptr (Sk_path)) -> (Ptr (Sk_path)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_matrix)) -> IO (CBool)
-- | `sk_stream_asset_destroy`
foreign import ccall "sk_stream_asset_destroy" sk_stream_asset_destroy :: (Ptr (Sk_stream_asset)) -> IO (())
-- | `sk_filestream_new`
foreign import ccall "sk_filestream_new" sk_filestream_new :: (Ptr (CChar)) -> IO (Ptr (Sk_stream_filestream))
-- | `sk_filestream_destroy`
foreign import ccall "sk_filestream_destroy" sk_filestream_destroy :: (Ptr (Sk_stream_filestream)) -> IO (())
-- | `sk_filestream_is_valid`
foreign import ccall "sk_filestream_is_valid" sk_filestream_is_valid :: (Ptr (Sk_stream_filestream)) -> IO (CBool)
-- | `sk_memorystream_new`
foreign import ccall "sk_memorystream_new" sk_memorystream_new :: IO (Ptr (Sk_stream_memorystream))
-- | `sk_memorystream_new_with_length`
foreign import ccall "sk_memorystream_new_with_length" sk_memorystream_new_with_length :: (CSize) -> IO (Ptr (Sk_stream_memorystream))
-- | `sk_memorystream_new_with_data`
foreign import ccall "sk_memorystream_new_with_data" sk_memorystream_new_with_data :: (Ptr (())) -> (CSize) -> (CBool) -> IO (Ptr (Sk_stream_memorystream))
-- | `sk_memorystream_new_with_skdata`
foreign import ccall "sk_memorystream_new_with_skdata" sk_memorystream_new_with_skdata :: (Ptr (Sk_data)) -> IO (Ptr (Sk_stream_memorystream))
-- | `sk_memorystream_set_memory`
foreign import ccall "sk_memorystream_set_memory" sk_memorystream_set_memory :: (Ptr (Sk_stream_memorystream)) -> (Ptr (())) -> (CSize) -> (CBool) -> IO (())
-- | `sk_memorystream_destroy`
foreign import ccall "sk_memorystream_destroy" sk_memorystream_destroy :: (Ptr (Sk_stream_memorystream)) -> IO (())
-- | `sk_stream_read`
foreign import ccall "sk_stream_read" sk_stream_read :: (Ptr (Sk_stream)) -> (Ptr (())) -> (CSize) -> IO (CSize)
-- | `sk_stream_peek`
foreign import ccall "sk_stream_peek" sk_stream_peek :: (Ptr (Sk_stream)) -> (Ptr (())) -> (CSize) -> IO (CSize)
-- | `sk_stream_skip`
foreign import ccall "sk_stream_skip" sk_stream_skip :: (Ptr (Sk_stream)) -> (CSize) -> IO (CSize)
-- | `sk_stream_is_at_end`
foreign import ccall "sk_stream_is_at_end" sk_stream_is_at_end :: (Ptr (Sk_stream)) -> IO (CBool)
-- | `sk_stream_read_s8`
foreign import ccall "sk_stream_read_s8" sk_stream_read_s8 :: (Ptr (Sk_stream)) -> (Ptr (Int8)) -> IO (CBool)
-- | `sk_stream_read_s16`
foreign import ccall "sk_stream_read_s16" sk_stream_read_s16 :: (Ptr (Sk_stream)) -> (Ptr (Int16)) -> IO (CBool)
-- | `sk_stream_read_s32`
foreign import ccall "sk_stream_read_s32" sk_stream_read_s32 :: (Ptr (Sk_stream)) -> (Ptr (Int32)) -> IO (CBool)
-- | `sk_stream_read_u8`
foreign import ccall "sk_stream_read_u8" sk_stream_read_u8 :: (Ptr (Sk_stream)) -> (Ptr (Word8)) -> IO (CBool)
-- | `sk_stream_read_u16`
foreign import ccall "sk_stream_read_u16" sk_stream_read_u16 :: (Ptr (Sk_stream)) -> (Ptr (Word16)) -> IO (CBool)
-- | `sk_stream_read_u32`
foreign import ccall "sk_stream_read_u32" sk_stream_read_u32 :: (Ptr (Sk_stream)) -> (Ptr (Word32)) -> IO (CBool)
-- | `sk_stream_read_bool`
foreign import ccall "sk_stream_read_bool" sk_stream_read_bool :: (Ptr (Sk_stream)) -> (Ptr (CBool)) -> IO (CBool)
-- | `sk_stream_rewind`
foreign import ccall "sk_stream_rewind" sk_stream_rewind :: (Ptr (Sk_stream)) -> IO (CBool)
-- | `sk_stream_has_position`
foreign import ccall "sk_stream_has_position" sk_stream_has_position :: (Ptr (Sk_stream)) -> IO (CBool)
-- | `sk_stream_get_position`
foreign import ccall "sk_stream_get_position" sk_stream_get_position :: (Ptr (Sk_stream)) -> IO (CSize)
-- | `sk_stream_seek`
foreign import ccall "sk_stream_seek" sk_stream_seek :: (Ptr (Sk_stream)) -> (CSize) -> IO (CBool)
-- | `sk_stream_move`
foreign import ccall "sk_stream_move" sk_stream_move :: (Ptr (Sk_stream)) -> (CLong) -> IO (CBool)
-- | `sk_stream_has_length`
foreign import ccall "sk_stream_has_length" sk_stream_has_length :: (Ptr (Sk_stream)) -> IO (CBool)
-- | `sk_stream_get_length`
foreign import ccall "sk_stream_get_length" sk_stream_get_length :: (Ptr (Sk_stream)) -> IO (CSize)
-- | `sk_stream_get_memory_base`
foreign import ccall "sk_stream_get_memory_base" sk_stream_get_memory_base :: (Ptr (Sk_stream)) -> IO (Ptr (()))
-- | `sk_stream_fork`
foreign import ccall "sk_stream_fork" sk_stream_fork :: (Ptr (Sk_stream)) -> IO (Ptr (Sk_stream))
-- | `sk_stream_duplicate`
foreign import ccall "sk_stream_duplicate" sk_stream_duplicate :: (Ptr (Sk_stream)) -> IO (Ptr (Sk_stream))
-- | `sk_stream_destroy`
foreign import ccall "sk_stream_destroy" sk_stream_destroy :: (Ptr (Sk_stream)) -> IO (())
-- | `sk_filewstream_new`
foreign import ccall "sk_filewstream_new" sk_filewstream_new :: (Ptr (CChar)) -> IO (Ptr (Sk_wstream_filestream))
-- | `sk_filewstream_destroy`
foreign import ccall "sk_filewstream_destroy" sk_filewstream_destroy :: (Ptr (Sk_wstream_filestream)) -> IO (())
-- | `sk_filewstream_is_valid`
foreign import ccall "sk_filewstream_is_valid" sk_filewstream_is_valid :: (Ptr (Sk_wstream_filestream)) -> IO (CBool)
-- | `sk_dynamicmemorywstream_new`
foreign import ccall "sk_dynamicmemorywstream_new" sk_dynamicmemorywstream_new :: IO (Ptr (Sk_wstream_dynamicmemorystream))
-- | `sk_dynamicmemorywstream_detach_as_stream`
foreign import ccall "sk_dynamicmemorywstream_detach_as_stream" sk_dynamicmemorywstream_detach_as_stream :: (Ptr (Sk_wstream_dynamicmemorystream)) -> IO (Ptr (Sk_stream_asset))
-- | `sk_dynamicmemorywstream_detach_as_data`
foreign import ccall "sk_dynamicmemorywstream_detach_as_data" sk_dynamicmemorywstream_detach_as_data :: (Ptr (Sk_wstream_dynamicmemorystream)) -> IO (Ptr (Sk_data))
-- | `sk_dynamicmemorywstream_copy_to`
foreign import ccall "sk_dynamicmemorywstream_copy_to" sk_dynamicmemorywstream_copy_to :: (Ptr (Sk_wstream_dynamicmemorystream)) -> (Ptr (())) -> IO (())
-- | `sk_dynamicmemorywstream_write_to_stream`
foreign import ccall "sk_dynamicmemorywstream_write_to_stream" sk_dynamicmemorywstream_write_to_stream :: (Ptr (Sk_wstream_dynamicmemorystream)) -> (Ptr (Sk_wstream)) -> IO (CBool)
-- | `sk_dynamicmemorywstream_destroy`
foreign import ccall "sk_dynamicmemorywstream_destroy" sk_dynamicmemorywstream_destroy :: (Ptr (Sk_wstream_dynamicmemorystream)) -> IO (())
-- | `sk_wstream_write`
foreign import ccall "sk_wstream_write" sk_wstream_write :: (Ptr (Sk_wstream)) -> (Ptr (())) -> (CSize) -> IO (CBool)
-- | `sk_wstream_newline`
foreign import ccall "sk_wstream_newline" sk_wstream_newline :: (Ptr (Sk_wstream)) -> IO (CBool)
-- | `sk_wstream_flush`
foreign import ccall "sk_wstream_flush" sk_wstream_flush :: (Ptr (Sk_wstream)) -> IO (())
-- | `sk_wstream_bytes_written`
foreign import ccall "sk_wstream_bytes_written" sk_wstream_bytes_written :: (Ptr (Sk_wstream)) -> IO (CSize)
-- | `sk_wstream_write_8`
foreign import ccall "sk_wstream_write_8" sk_wstream_write_8 :: (Ptr (Sk_wstream)) -> (Word8) -> IO (CBool)
-- | `sk_wstream_write_16`
foreign import ccall "sk_wstream_write_16" sk_wstream_write_16 :: (Ptr (Sk_wstream)) -> (Word16) -> IO (CBool)
-- | `sk_wstream_write_32`
foreign import ccall "sk_wstream_write_32" sk_wstream_write_32 :: (Ptr (Sk_wstream)) -> (Word32) -> IO (CBool)
-- | `sk_wstream_write_text`
foreign import ccall "sk_wstream_write_text" sk_wstream_write_text :: (Ptr (Sk_wstream)) -> (Ptr (CChar)) -> IO (CBool)
-- | `sk_wstream_write_dec_as_text`
foreign import ccall "sk_wstream_write_dec_as_text" sk_wstream_write_dec_as_text :: (Ptr (Sk_wstream)) -> (Int32) -> IO (CBool)
-- | `sk_wstream_write_bigdec_as_text`
foreign import ccall "sk_wstream_write_bigdec_as_text" sk_wstream_write_bigdec_as_text :: (Ptr (Sk_wstream)) -> (Int64) -> (CInt) -> IO (CBool)
-- | `sk_wstream_write_hex_as_text`
foreign import ccall "sk_wstream_write_hex_as_text" sk_wstream_write_hex_as_text :: (Ptr (Sk_wstream)) -> (Word32) -> (CInt) -> IO (CBool)
-- | `sk_wstream_write_scalar_as_text`
foreign import ccall "sk_wstream_write_scalar_as_text" sk_wstream_write_scalar_as_text :: (Ptr (Sk_wstream)) -> (CFloat) -> IO (CBool)
-- | `sk_wstream_write_bool`
foreign import ccall "sk_wstream_write_bool" sk_wstream_write_bool :: (Ptr (Sk_wstream)) -> (CBool) -> IO (CBool)
-- | `sk_wstream_write_scalar`
foreign import ccall "sk_wstream_write_scalar" sk_wstream_write_scalar :: (Ptr (Sk_wstream)) -> (CFloat) -> IO (CBool)
-- | `sk_wstream_write_packed_uint`
foreign import ccall "sk_wstream_write_packed_uint" sk_wstream_write_packed_uint :: (Ptr (Sk_wstream)) -> (CSize) -> IO (CBool)
-- | `sk_wstream_write_stream`
foreign import ccall "sk_wstream_write_stream" sk_wstream_write_stream :: (Ptr (Sk_wstream)) -> (Ptr (Sk_stream)) -> (CSize) -> IO (CBool)
-- | `sk_wstream_get_size_of_packed_uint`
foreign import ccall "sk_wstream_get_size_of_packed_uint" sk_wstream_get_size_of_packed_uint :: (CSize) -> IO (CInt)
-- | `sk_blender_ref`
foreign import ccall "sk_blender_ref" sk_blender_ref :: (Ptr (Sk_blender)) -> IO (())
-- | `sk_blender_unref`
foreign import ccall "sk_blender_unref" sk_blender_unref :: (Ptr (Sk_blender)) -> IO (())
-- | `sk_blender_new_mode`
foreign import ccall "sk_blender_new_mode" sk_blender_new_mode :: (Sk_blendmode) -> IO (Ptr (Sk_blender))
-- | `sk_blender_new_arithmetic`
foreign import ccall "sk_blender_new_arithmetic" sk_blender_new_arithmetic :: (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> (CBool) -> IO (Ptr (Sk_blender))
-- | `sk_graphics_init`
foreign import ccall "sk_graphics_init" sk_graphics_init :: IO (())
-- | `sk_graphics_purge_font_cache`
foreign import ccall "sk_graphics_purge_font_cache" sk_graphics_purge_font_cache :: IO (())
-- | `sk_graphics_purge_resource_cache`
foreign import ccall "sk_graphics_purge_resource_cache" sk_graphics_purge_resource_cache :: IO (())
-- | `sk_graphics_purge_all_caches`
foreign import ccall "sk_graphics_purge_all_caches" sk_graphics_purge_all_caches :: IO (())
-- | `sk_graphics_get_font_cache_used`
foreign import ccall "sk_graphics_get_font_cache_used" sk_graphics_get_font_cache_used :: IO (CSize)
-- | `sk_graphics_get_font_cache_limit`
foreign import ccall "sk_graphics_get_font_cache_limit" sk_graphics_get_font_cache_limit :: IO (CSize)
-- | `sk_graphics_set_font_cache_limit`
foreign import ccall "sk_graphics_set_font_cache_limit" sk_graphics_set_font_cache_limit :: (CSize) -> IO (CSize)
-- | `sk_graphics_get_font_cache_count_used`
foreign import ccall "sk_graphics_get_font_cache_count_used" sk_graphics_get_font_cache_count_used :: IO (CInt)
-- | `sk_graphics_get_font_cache_count_limit`
foreign import ccall "sk_graphics_get_font_cache_count_limit" sk_graphics_get_font_cache_count_limit :: IO (CInt)
-- | `sk_graphics_set_font_cache_count_limit`
foreign import ccall "sk_graphics_set_font_cache_count_limit" sk_graphics_set_font_cache_count_limit :: (CInt) -> IO (CInt)
-- | `sk_graphics_get_resource_cache_total_bytes_used`
foreign import ccall "sk_graphics_get_resource_cache_total_bytes_used" sk_graphics_get_resource_cache_total_bytes_used :: IO (CSize)
-- | `sk_graphics_get_resource_cache_total_byte_limit`
foreign import ccall "sk_graphics_get_resource_cache_total_byte_limit" sk_graphics_get_resource_cache_total_byte_limit :: IO (CSize)
-- | `sk_graphics_set_resource_cache_total_byte_limit`
foreign import ccall "sk_graphics_set_resource_cache_total_byte_limit" sk_graphics_set_resource_cache_total_byte_limit :: (CSize) -> IO (CSize)
-- | `sk_graphics_get_resource_cache_single_allocation_byte_limit`
foreign import ccall "sk_graphics_get_resource_cache_single_allocation_byte_limit" sk_graphics_get_resource_cache_single_allocation_byte_limit :: IO (CSize)
-- | `sk_graphics_set_resource_cache_single_allocation_byte_limit`
foreign import ccall "sk_graphics_set_resource_cache_single_allocation_byte_limit" sk_graphics_set_resource_cache_single_allocation_byte_limit :: (CSize) -> IO (CSize)
-- | `sk_graphics_dump_memory_statistics`
foreign import ccall "sk_graphics_dump_memory_statistics" sk_graphics_dump_memory_statistics :: (Ptr (Sk_tracememorydump)) -> IO (())
-- | `skottie_animation_make_from_string`
foreign import ccall "skottie_animation_make_from_string" skottie_animation_make_from_string :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_make_from_data`
foreign import ccall "skottie_animation_make_from_data" skottie_animation_make_from_data :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_make_from_stream`
foreign import ccall "skottie_animation_make_from_stream" skottie_animation_make_from_stream :: (Ptr (Sk_stream)) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_make_from_file`
foreign import ccall "skottie_animation_make_from_file" skottie_animation_make_from_file :: (Ptr (CChar)) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_ref`
foreign import ccall "skottie_animation_ref" skottie_animation_ref :: (Ptr (Skottie_animation)) -> IO (())
-- | `skottie_animation_unref`
foreign import ccall "skottie_animation_unref" skottie_animation_unref :: (Ptr (Skottie_animation)) -> IO (())
-- | `skottie_animation_delete`
foreign import ccall "skottie_animation_delete" skottie_animation_delete :: (Ptr (Skottie_animation)) -> IO (())
-- | `skottie_animation_render`
foreign import ccall "skottie_animation_render" skottie_animation_render :: (Ptr (Skottie_animation)) -> (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> IO (())
-- | `skottie_animation_render_with_flags`
foreign import ccall "skottie_animation_render_with_flags" skottie_animation_render_with_flags :: (Ptr (Skottie_animation)) -> (Ptr (Sk_canvas)) -> (Ptr (Sk_rect)) -> (Skottie_animation_renderflags) -> IO (())
-- | `skottie_animation_seek`
foreign import ccall "skottie_animation_seek" skottie_animation_seek :: (Ptr (Skottie_animation)) -> (CFloat) -> (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `skottie_animation_seek_frame`
foreign import ccall "skottie_animation_seek_frame" skottie_animation_seek_frame :: (Ptr (Skottie_animation)) -> (CFloat) -> (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `skottie_animation_seek_frame_time`
foreign import ccall "skottie_animation_seek_frame_time" skottie_animation_seek_frame_time :: (Ptr (Skottie_animation)) -> (CFloat) -> (Ptr (Sksg_invalidation_controller)) -> IO (())
-- | `skottie_animation_get_duration`
foreign import ccall "skottie_animation_get_duration" skottie_animation_get_duration :: (Ptr (Skottie_animation)) -> IO (CDouble)
-- | `skottie_animation_get_fps`
foreign import ccall "skottie_animation_get_fps" skottie_animation_get_fps :: (Ptr (Skottie_animation)) -> IO (CDouble)
-- | `skottie_animation_get_in_point`
foreign import ccall "skottie_animation_get_in_point" skottie_animation_get_in_point :: (Ptr (Skottie_animation)) -> IO (CDouble)
-- | `skottie_animation_get_out_point`
foreign import ccall "skottie_animation_get_out_point" skottie_animation_get_out_point :: (Ptr (Skottie_animation)) -> IO (CDouble)
-- | `skottie_animation_get_version`
foreign import ccall "skottie_animation_get_version" skottie_animation_get_version :: (Ptr (Skottie_animation)) -> (Ptr (Sk_string)) -> IO (())
-- | `skottie_animation_get_size`
foreign import ccall "skottie_animation_get_size" skottie_animation_get_size :: (Ptr (Skottie_animation)) -> (Ptr (Sk_size)) -> IO (())
-- | `skottie_animation_builder_new`
foreign import ccall "skottie_animation_builder_new" skottie_animation_builder_new :: (Skottie_animation_builder_flags) -> IO (Ptr (Skottie_animation_builder))
-- | `skottie_animation_builder_delete`
foreign import ccall "skottie_animation_builder_delete" skottie_animation_builder_delete :: (Ptr (Skottie_animation_builder)) -> IO (())
-- | `skottie_animation_builder_get_stats`
foreign import ccall "skottie_animation_builder_get_stats" skottie_animation_builder_get_stats :: (Ptr (Skottie_animation_builder)) -> (Ptr (Skottie_animation_builder_stats)) -> IO (())
-- | `skottie_animation_builder_set_resource_provider`
foreign import ccall "skottie_animation_builder_set_resource_provider" skottie_animation_builder_set_resource_provider :: (Ptr (Skottie_animation_builder)) -> (Ptr (Skottie_resource_provider)) -> IO (())
-- | `skottie_animation_builder_set_font_manager`
foreign import ccall "skottie_animation_builder_set_font_manager" skottie_animation_builder_set_font_manager :: (Ptr (Skottie_animation_builder)) -> (Ptr (Sk_fontmgr)) -> IO (())
-- | `skottie_animation_builder_make_from_stream`
foreign import ccall "skottie_animation_builder_make_from_stream" skottie_animation_builder_make_from_stream :: (Ptr (Skottie_animation_builder)) -> (Ptr (Sk_stream)) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_builder_make_from_file`
foreign import ccall "skottie_animation_builder_make_from_file" skottie_animation_builder_make_from_file :: (Ptr (Skottie_animation_builder)) -> (Ptr (CChar)) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_builder_make_from_string`
foreign import ccall "skottie_animation_builder_make_from_string" skottie_animation_builder_make_from_string :: (Ptr (Skottie_animation_builder)) -> (Ptr (CChar)) -> (CSize) -> IO (Ptr (Skottie_animation))
-- | `skottie_animation_builder_make_from_data`
foreign import ccall "skottie_animation_builder_make_from_data" skottie_animation_builder_make_from_data :: (Ptr (Skottie_animation_builder)) -> (Ptr (CChar)) -> (CSize) -> IO (Ptr (Skottie_animation))
-- | `skresources_resource_provider_ref`
foreign import ccall "skresources_resource_provider_ref" skresources_resource_provider_ref :: (Ptr (Skresources_resource_provider)) -> IO (())
-- | `skresources_resource_provider_unref`
foreign import ccall "skresources_resource_provider_unref" skresources_resource_provider_unref :: (Ptr (Skresources_resource_provider)) -> IO (())
-- | `skresources_resource_provider_delete`
foreign import ccall "skresources_resource_provider_delete" skresources_resource_provider_delete :: (Ptr (Skresources_resource_provider)) -> IO (())
-- | `skresources_resource_provider_load`
foreign import ccall "skresources_resource_provider_load" skresources_resource_provider_load :: (Ptr (Skresources_resource_provider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (Sk_data))
-- | `skresources_resource_provider_load_image_asset`
foreign import ccall "skresources_resource_provider_load_image_asset" skresources_resource_provider_load_image_asset :: (Ptr (Skresources_resource_provider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (Skresources_image_asset))
-- | `skresources_resource_provider_load_audio_asset`
foreign import ccall "skresources_resource_provider_load_audio_asset" skresources_resource_provider_load_audio_asset :: (Ptr (Skresources_resource_provider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (Skresources_external_track_asset))
-- | `skresources_resource_provider_load_typeface`
foreign import ccall "skresources_resource_provider_load_typeface" skresources_resource_provider_load_typeface :: (Ptr (Skresources_resource_provider)) -> (Ptr (CChar)) -> (Ptr (CChar)) -> IO (Ptr (Sk_typeface))
-- | `skresources_file_resource_provider_make`
foreign import ccall "skresources_file_resource_provider_make" skresources_file_resource_provider_make :: (Ptr (Sk_string)) -> (CBool) -> IO (Ptr (Skresources_resource_provider))
-- | `skresources_caching_resource_provider_proxy_make`
foreign import ccall "skresources_caching_resource_provider_proxy_make" skresources_caching_resource_provider_proxy_make :: (Ptr (Skresources_resource_provider)) -> IO (Ptr (Skresources_resource_provider))
-- | `skresources_data_uri_resource_provider_proxy_make`
foreign import ccall "skresources_data_uri_resource_provider_proxy_make" skresources_data_uri_resource_provider_proxy_make :: (Ptr (Skresources_resource_provider)) -> (CBool) -> IO (Ptr (Skresources_resource_provider))
-- | `sk_svgcanvas_create_with_stream`
foreign import ccall "sk_svgcanvas_create_with_stream" sk_svgcanvas_create_with_stream :: (Ptr (Sk_rect)) -> (Ptr (Sk_wstream)) -> IO (Ptr (Sk_canvas))
-- | `sk_string_new_empty`
foreign import ccall "sk_string_new_empty" sk_string_new_empty :: IO (Ptr (Sk_string))
-- | `sk_string_new_with_copy`
foreign import ccall "sk_string_new_with_copy" sk_string_new_with_copy :: (Ptr (CChar)) -> (CSize) -> IO (Ptr (Sk_string))
-- | `sk_string_destructor`
foreign import ccall "sk_string_destructor" sk_string_destructor :: (Ptr (Sk_string)) -> IO (())
-- | `sk_string_get_size`
foreign import ccall "sk_string_get_size" sk_string_get_size :: (Ptr (Sk_string)) -> IO (CSize)
-- | `sk_string_get_c_str`
foreign import ccall "sk_string_get_c_str" sk_string_get_c_str :: (Ptr (Sk_string)) -> IO (Ptr (CChar))
-- | `sk_linker_keep_alive`
foreign import ccall "sk_linker_keep_alive" sk_linker_keep_alive :: IO (())
-- | `sk_path_effect_unref`
foreign import ccall "sk_path_effect_unref" sk_path_effect_unref :: (Ptr (Sk_path_effect)) -> IO (())
-- | `sk_path_effect_create_compose`
foreign import ccall "sk_path_effect_create_compose" sk_path_effect_create_compose :: (Ptr (Sk_path_effect)) -> (Ptr (Sk_path_effect)) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_sum`
foreign import ccall "sk_path_effect_create_sum" sk_path_effect_create_sum :: (Ptr (Sk_path_effect)) -> (Ptr (Sk_path_effect)) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_discrete`
foreign import ccall "sk_path_effect_create_discrete" sk_path_effect_create_discrete :: (CFloat) -> (CFloat) -> (Word32) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_corner`
foreign import ccall "sk_path_effect_create_corner" sk_path_effect_create_corner :: (CFloat) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_1d_path`
foreign import ccall "sk_path_effect_create_1d_path" sk_path_effect_create_1d_path :: (Ptr (Sk_path)) -> (CFloat) -> (CFloat) -> (Sk_path_effect_1d_style) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_2d_line`
foreign import ccall "sk_path_effect_create_2d_line" sk_path_effect_create_2d_line :: (CFloat) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_2d_path`
foreign import ccall "sk_path_effect_create_2d_path" sk_path_effect_create_2d_path :: (Ptr (Sk_matrix)) -> (Ptr (Sk_path)) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_dash`
foreign import ccall "sk_path_effect_create_dash" sk_path_effect_create_dash :: (Ptr (CFloat)) -> (CInt) -> (CFloat) -> IO (Ptr (Sk_path_effect))
-- | `sk_path_effect_create_trim`
foreign import ccall "sk_path_effect_create_trim" sk_path_effect_create_trim :: (CFloat) -> (CFloat) -> (Sk_path_effect_trim_mode) -> IO (Ptr (Sk_path_effect))
-- | `sk_vertices_unref`
foreign import ccall "sk_vertices_unref" sk_vertices_unref :: (Ptr (Sk_vertices)) -> IO (())
-- | `sk_vertices_ref`
foreign import ccall "sk_vertices_ref" sk_vertices_ref :: (Ptr (Sk_vertices)) -> IO (())
-- | `sk_vertices_make_copy`
foreign import ccall "sk_vertices_make_copy" sk_vertices_make_copy :: (Sk_vertices_vertex_mode) -> (CInt) -> (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> (Ptr (Sk_color)) -> (CInt) -> (Ptr (Word16)) -> IO (Ptr (Sk_vertices))
-- | `sk_font_new`
foreign import ccall "sk_font_new" sk_font_new :: IO (Ptr (Sk_font))
-- | `sk_font_new_with_values`
foreign import ccall "sk_font_new_with_values" sk_font_new_with_values :: (Ptr (Sk_typeface)) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (Ptr (Sk_font))
-- | `sk_font_delete`
foreign import ccall "sk_font_delete" sk_font_delete :: (Ptr (Sk_font)) -> IO (())
-- | `sk_font_is_force_auto_hinting`
foreign import ccall "sk_font_is_force_auto_hinting" sk_font_is_force_auto_hinting :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_force_auto_hinting`
foreign import ccall "sk_font_set_force_auto_hinting" sk_font_set_force_auto_hinting :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_is_embedded_bitmaps`
foreign import ccall "sk_font_is_embedded_bitmaps" sk_font_is_embedded_bitmaps :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_embedded_bitmaps`
foreign import ccall "sk_font_set_embedded_bitmaps" sk_font_set_embedded_bitmaps :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_is_subpixel`
foreign import ccall "sk_font_is_subpixel" sk_font_is_subpixel :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_subpixel`
foreign import ccall "sk_font_set_subpixel" sk_font_set_subpixel :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_is_linear_metrics`
foreign import ccall "sk_font_is_linear_metrics" sk_font_is_linear_metrics :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_linear_metrics`
foreign import ccall "sk_font_set_linear_metrics" sk_font_set_linear_metrics :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_is_embolden`
foreign import ccall "sk_font_is_embolden" sk_font_is_embolden :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_embolden`
foreign import ccall "sk_font_set_embolden" sk_font_set_embolden :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_is_baseline_snap`
foreign import ccall "sk_font_is_baseline_snap" sk_font_is_baseline_snap :: (Ptr (Sk_font)) -> IO (CBool)
-- | `sk_font_set_baseline_snap`
foreign import ccall "sk_font_set_baseline_snap" sk_font_set_baseline_snap :: (Ptr (Sk_font)) -> (CBool) -> IO (())
-- | `sk_font_get_edging`
foreign import ccall "sk_font_get_edging" sk_font_get_edging :: (Ptr (Sk_font)) -> IO (Sk_font_edging)
-- | `sk_font_set_edging`
foreign import ccall "sk_font_set_edging" sk_font_set_edging :: (Ptr (Sk_font)) -> (Sk_font_edging) -> IO (())
-- | `sk_font_get_hinting`
foreign import ccall "sk_font_get_hinting" sk_font_get_hinting :: (Ptr (Sk_font)) -> IO (Sk_font_hinting)
-- | `sk_font_set_hinting`
foreign import ccall "sk_font_set_hinting" sk_font_set_hinting :: (Ptr (Sk_font)) -> (Sk_font_hinting) -> IO (())
-- | `sk_font_get_typeface`
foreign import ccall "sk_font_get_typeface" sk_font_get_typeface :: (Ptr (Sk_font)) -> IO (Ptr (Sk_typeface))
-- | `sk_font_set_typeface`
foreign import ccall "sk_font_set_typeface" sk_font_set_typeface :: (Ptr (Sk_font)) -> (Ptr (Sk_typeface)) -> IO (())
-- | `sk_font_get_size`
foreign import ccall "sk_font_get_size" sk_font_get_size :: (Ptr (Sk_font)) -> IO (CFloat)
-- | `sk_font_set_size`
foreign import ccall "sk_font_set_size" sk_font_set_size :: (Ptr (Sk_font)) -> (CFloat) -> IO (())
-- | `sk_font_get_scale_x`
foreign import ccall "sk_font_get_scale_x" sk_font_get_scale_x :: (Ptr (Sk_font)) -> IO (CFloat)
-- | `sk_font_set_scale_x`
foreign import ccall "sk_font_set_scale_x" sk_font_set_scale_x :: (Ptr (Sk_font)) -> (CFloat) -> IO (())
-- | `sk_font_get_skew_x`
foreign import ccall "sk_font_get_skew_x" sk_font_get_skew_x :: (Ptr (Sk_font)) -> IO (CFloat)
-- | `sk_font_set_skew_x`
foreign import ccall "sk_font_set_skew_x" sk_font_set_skew_x :: (Ptr (Sk_font)) -> (CFloat) -> IO (())
-- | `sk_font_text_to_glyphs`
foreign import ccall "sk_font_text_to_glyphs" sk_font_text_to_glyphs :: (Ptr (Sk_font)) -> (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (Ptr (Word16)) -> (CInt) -> IO (CInt)
-- | `sk_font_unichar_to_glyph`
foreign import ccall "sk_font_unichar_to_glyph" sk_font_unichar_to_glyph :: (Ptr (Sk_font)) -> (Int32) -> IO (Word16)
-- | `sk_font_unichars_to_glyphs`
foreign import ccall "sk_font_unichars_to_glyphs" sk_font_unichars_to_glyphs :: (Ptr (Sk_font)) -> (Ptr (Int32)) -> (CInt) -> (Ptr (Word16)) -> IO (())
-- | `sk_font_measure_text`
foreign import ccall "sk_font_measure_text" sk_font_measure_text :: (Ptr (Sk_font)) -> (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (CFloat)
-- | `sk_font_measure_text_no_return`
foreign import ccall "sk_font_measure_text_no_return" sk_font_measure_text_no_return :: (Ptr (Sk_font)) -> (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> (Ptr (CFloat)) -> IO (())
-- | `sk_font_break_text`
foreign import ccall "sk_font_break_text" sk_font_break_text :: (Ptr (Sk_font)) -> (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (CFloat) -> (Ptr (CFloat)) -> (Ptr (Sk_paint)) -> IO (CSize)
-- | `sk_font_get_widths_bounds`
foreign import ccall "sk_font_get_widths_bounds" sk_font_get_widths_bounds :: (Ptr (Sk_font)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (CFloat)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_paint)) -> IO (())
-- | `sk_font_get_pos`
foreign import ccall "sk_font_get_pos" sk_font_get_pos :: (Ptr (Sk_font)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> IO (())
-- | `sk_font_get_xpos`
foreign import ccall "sk_font_get_xpos" sk_font_get_xpos :: (Ptr (Sk_font)) -> (Ptr (Word16)) -> (CInt) -> (Ptr (CFloat)) -> (CFloat) -> IO (())
-- | `sk_font_get_path`
foreign import ccall "sk_font_get_path" sk_font_get_path :: (Ptr (Sk_font)) -> (Word16) -> (Ptr (Sk_path)) -> IO (CBool)
-- | `sk_font_get_paths`
foreign import ccall "sk_font_get_paths" sk_font_get_paths :: (Ptr (Sk_font)) -> (Ptr (Word16)) -> (CInt) -> (FunPtr (Sk_glyph_path_proc)) -> (Ptr (())) -> IO (())
-- | `sk_font_get_metrics`
foreign import ccall "sk_font_get_metrics" sk_font_get_metrics :: (Ptr (Sk_font)) -> (Ptr (Sk_fontmetrics)) -> IO (CFloat)
-- | `sk_text_utils_get_path`
foreign import ccall "sk_text_utils_get_path" sk_text_utils_get_path :: (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (CFloat) -> (CFloat) -> (Ptr (Sk_font)) -> (Ptr (Sk_path)) -> IO (())
-- | `sk_text_utils_get_pos_path`
foreign import ccall "sk_text_utils_get_pos_path" sk_text_utils_get_pos_path :: (Ptr (())) -> (CSize) -> (Sk_text_encoding) -> (Ptr (Sk_point)) -> (Ptr (Sk_font)) -> (Ptr (Sk_path)) -> IO (())
-- | `sk_rrect_new`
foreign import ccall "sk_rrect_new" sk_rrect_new :: IO (Ptr (Sk_rrect))
-- | `sk_rrect_new_copy`
foreign import ccall "sk_rrect_new_copy" sk_rrect_new_copy :: (Ptr (Sk_rrect)) -> IO (Ptr (Sk_rrect))
-- | `sk_rrect_delete`
foreign import ccall "sk_rrect_delete" sk_rrect_delete :: (Ptr (Sk_rrect)) -> IO (())
-- | `sk_rrect_get_type`
foreign import ccall "sk_rrect_get_type" sk_rrect_get_type :: (Ptr (Sk_rrect)) -> IO (Sk_rrect_type)
-- | `sk_rrect_get_rect`
foreign import ccall "sk_rrect_get_rect" sk_rrect_get_rect :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_rrect_get_radii`
foreign import ccall "sk_rrect_get_radii" sk_rrect_get_radii :: (Ptr (Sk_rrect)) -> (Sk_rrect_corner) -> (Ptr (Sk_vector)) -> IO (())
-- | `sk_rrect_get_width`
foreign import ccall "sk_rrect_get_width" sk_rrect_get_width :: (Ptr (Sk_rrect)) -> IO (CFloat)
-- | `sk_rrect_get_height`
foreign import ccall "sk_rrect_get_height" sk_rrect_get_height :: (Ptr (Sk_rrect)) -> IO (CFloat)
-- | `sk_rrect_set_empty`
foreign import ccall "sk_rrect_set_empty" sk_rrect_set_empty :: (Ptr (Sk_rrect)) -> IO (())
-- | `sk_rrect_set_rect`
foreign import ccall "sk_rrect_set_rect" sk_rrect_set_rect :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_rrect_set_oval`
foreign import ccall "sk_rrect_set_oval" sk_rrect_set_oval :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_rrect_set_rect_xy`
foreign import ccall "sk_rrect_set_rect_xy" sk_rrect_set_rect_xy :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_set_nine_patch`
foreign import ccall "sk_rrect_set_nine_patch" sk_rrect_set_nine_patch :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> (CFloat) -> (CFloat) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_set_rect_radii`
foreign import ccall "sk_rrect_set_rect_radii" sk_rrect_set_rect_radii :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_vector)) -> IO (())
-- | `sk_rrect_inset`
foreign import ccall "sk_rrect_inset" sk_rrect_inset :: (Ptr (Sk_rrect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_outset`
foreign import ccall "sk_rrect_outset" sk_rrect_outset :: (Ptr (Sk_rrect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_offset`
foreign import ccall "sk_rrect_offset" sk_rrect_offset :: (Ptr (Sk_rrect)) -> (CFloat) -> (CFloat) -> IO (())
-- | `sk_rrect_contains`
foreign import ccall "sk_rrect_contains" sk_rrect_contains :: (Ptr (Sk_rrect)) -> (Ptr (Sk_rect)) -> IO (CBool)
-- | `sk_rrect_is_valid`
foreign import ccall "sk_rrect_is_valid" sk_rrect_is_valid :: (Ptr (Sk_rrect)) -> IO (CBool)
-- | `sk_rrect_transform`
foreign import ccall "sk_rrect_transform" sk_rrect_transform :: (Ptr (Sk_rrect)) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_rrect)) -> IO (CBool)
-- | `sk_matrix_try_invert`
foreign import ccall "sk_matrix_try_invert" sk_matrix_try_invert :: (Ptr (Sk_matrix)) -> (Ptr (Sk_matrix)) -> IO (CBool)
-- | `sk_matrix_concat`
foreign import ccall "sk_matrix_concat" sk_matrix_concat :: (Ptr (Sk_matrix)) -> (Ptr (Sk_matrix)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_matrix_pre_concat`
foreign import ccall "sk_matrix_pre_concat" sk_matrix_pre_concat :: (Ptr (Sk_matrix)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_matrix_post_concat`
foreign import ccall "sk_matrix_post_concat" sk_matrix_post_concat :: (Ptr (Sk_matrix)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_matrix_map_rect`
foreign import ccall "sk_matrix_map_rect" sk_matrix_map_rect :: (Ptr (Sk_matrix)) -> (Ptr (Sk_rect)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_matrix_map_points`
foreign import ccall "sk_matrix_map_points" sk_matrix_map_points :: (Ptr (Sk_matrix)) -> (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> (CInt) -> IO (())
-- | `sk_matrix_map_vectors`
foreign import ccall "sk_matrix_map_vectors" sk_matrix_map_vectors :: (Ptr (Sk_matrix)) -> (Ptr (Sk_point)) -> (Ptr (Sk_point)) -> (CInt) -> IO (())
-- | `sk_matrix_map_xy`
foreign import ccall "sk_matrix_map_xy" sk_matrix_map_xy :: (Ptr (Sk_matrix)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_point)) -> IO (())
-- | `sk_matrix_map_vector`
foreign import ccall "sk_matrix_map_vector" sk_matrix_map_vector :: (Ptr (Sk_matrix)) -> (CFloat) -> (CFloat) -> (Ptr (Sk_point)) -> IO (())
-- | `sk_matrix_map_radius`
foreign import ccall "sk_matrix_map_radius" sk_matrix_map_radius :: (Ptr (Sk_matrix)) -> (CFloat) -> IO (CFloat)
-- | `sk_shader_ref`
foreign import ccall "sk_shader_ref" sk_shader_ref :: (Ptr (Sk_shader)) -> IO (())
-- | `sk_shader_unref`
foreign import ccall "sk_shader_unref" sk_shader_unref :: (Ptr (Sk_shader)) -> IO (())
-- | `sk_shader_with_local_matrix`
foreign import ccall "sk_shader_with_local_matrix" sk_shader_with_local_matrix :: (Ptr (Sk_shader)) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_with_color_filter`
foreign import ccall "sk_shader_with_color_filter" sk_shader_with_color_filter :: (Ptr (Sk_shader)) -> (Ptr (Sk_colorfilter)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_empty`
foreign import ccall "sk_shader_new_empty" sk_shader_new_empty :: IO (Ptr (Sk_shader))
-- | `sk_shader_new_color`
foreign import ccall "sk_shader_new_color" sk_shader_new_color :: (Sk_color) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_color4f`
foreign import ccall "sk_shader_new_color4f" sk_shader_new_color4f :: (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_blend`
foreign import ccall "sk_shader_new_blend" sk_shader_new_blend :: (Sk_blendmode) -> (Ptr (Sk_shader)) -> (Ptr (Sk_shader)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_blender`
foreign import ccall "sk_shader_new_blender" sk_shader_new_blender :: (Ptr (Sk_blender)) -> (Ptr (Sk_shader)) -> (Ptr (Sk_shader)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_linear_gradient`
foreign import ccall "sk_shader_new_linear_gradient" sk_shader_new_linear_gradient :: (Ptr (Sk_point)) -> (Ptr (Sk_color)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_linear_gradient_color4f`
foreign import ccall "sk_shader_new_linear_gradient_color4f" sk_shader_new_linear_gradient_color4f :: (Ptr (Sk_point)) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_radial_gradient`
foreign import ccall "sk_shader_new_radial_gradient" sk_shader_new_radial_gradient :: (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_color)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_radial_gradient_color4f`
foreign import ccall "sk_shader_new_radial_gradient_color4f" sk_shader_new_radial_gradient_color4f :: (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_sweep_gradient`
foreign import ccall "sk_shader_new_sweep_gradient" sk_shader_new_sweep_gradient :: (Ptr (Sk_point)) -> (Ptr (Sk_color)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (CFloat) -> (CFloat) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_sweep_gradient_color4f`
foreign import ccall "sk_shader_new_sweep_gradient_color4f" sk_shader_new_sweep_gradient_color4f :: (Ptr (Sk_point)) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (CFloat) -> (CFloat) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_two_point_conical_gradient`
foreign import ccall "sk_shader_new_two_point_conical_gradient" sk_shader_new_two_point_conical_gradient :: (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_color)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_two_point_conical_gradient_color4f`
foreign import ccall "sk_shader_new_two_point_conical_gradient_color4f" sk_shader_new_two_point_conical_gradient_color4f :: (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_point)) -> (CFloat) -> (Ptr (Sk_color4f)) -> (Ptr (Sk_colorspace)) -> (Ptr (CFloat)) -> (CInt) -> (Sk_shader_tilemode) -> (Ptr (Sk_matrix)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_perlin_noise_fractal_noise`
foreign import ccall "sk_shader_new_perlin_noise_fractal_noise" sk_shader_new_perlin_noise_fractal_noise :: (CFloat) -> (CFloat) -> (CInt) -> (CFloat) -> (Ptr (Sk_isize)) -> IO (Ptr (Sk_shader))
-- | `sk_shader_new_perlin_noise_turbulence`
foreign import ccall "sk_shader_new_perlin_noise_turbulence" sk_shader_new_perlin_noise_turbulence :: (CFloat) -> (CFloat) -> (CInt) -> (CFloat) -> (Ptr (Sk_isize)) -> IO (Ptr (Sk_shader))
-- | `gr_recording_context_unref`
foreign import ccall "gr_recording_context_unref" gr_recording_context_unref :: (Ptr (Gr_recording_context)) -> IO (())
-- | `gr_recording_context_get_max_surface_sample_count_for_color_type`
foreign import ccall "gr_recording_context_get_max_surface_sample_count_for_color_type" gr_recording_context_get_max_surface_sample_count_for_color_type :: (Ptr (Gr_recording_context)) -> (Sk_colortype) -> IO (CInt)
-- | `gr_recording_context_get_backend`
foreign import ccall "gr_recording_context_get_backend" gr_recording_context_get_backend :: (Ptr (Gr_recording_context)) -> IO (Gr_backend)
-- | `gr_recording_context_is_abandoned`
foreign import ccall "gr_recording_context_is_abandoned" gr_recording_context_is_abandoned :: (Ptr (Gr_recording_context)) -> IO (CBool)
-- | `gr_recording_context_max_texture_size`
foreign import ccall "gr_recording_context_max_texture_size" gr_recording_context_max_texture_size :: (Ptr (Gr_recording_context)) -> IO (CInt)
-- | `gr_recording_context_max_render_target_size`
foreign import ccall "gr_recording_context_max_render_target_size" gr_recording_context_max_render_target_size :: (Ptr (Gr_recording_context)) -> IO (CInt)
-- | `gr_recording_context_get_direct_context`
foreign import ccall "gr_recording_context_get_direct_context" gr_recording_context_get_direct_context :: (Ptr (Gr_recording_context)) -> IO (Ptr (Gr_direct_context))
-- | `gr_direct_context_make_gl`
foreign import ccall "gr_direct_context_make_gl" gr_direct_context_make_gl :: (Ptr (Gr_glinterface)) -> IO (Ptr (Gr_direct_context))
-- | `gr_direct_context_make_gl_with_options`
foreign import ccall "gr_direct_context_make_gl_with_options" gr_direct_context_make_gl_with_options :: (Ptr (Gr_glinterface)) -> (Ptr (Gr_context_options)) -> IO (Ptr (Gr_direct_context))
-- | `gr_direct_context_make_metal`
foreign import ccall "gr_direct_context_make_metal" gr_direct_context_make_metal :: (Ptr (())) -> (Ptr (())) -> IO (Ptr (Gr_direct_context))
-- | `gr_direct_context_make_metal_with_options`
foreign import ccall "gr_direct_context_make_metal_with_options" gr_direct_context_make_metal_with_options :: (Ptr (())) -> (Ptr (())) -> (Ptr (Gr_context_options)) -> IO (Ptr (Gr_direct_context))
-- | `gr_direct_context_is_abandoned`
foreign import ccall "gr_direct_context_is_abandoned" gr_direct_context_is_abandoned :: (Ptr (Gr_direct_context)) -> IO (CBool)
-- | `gr_direct_context_abandon_context`
foreign import ccall "gr_direct_context_abandon_context" gr_direct_context_abandon_context :: (Ptr (Gr_direct_context)) -> IO (())
-- | `gr_direct_context_release_resources_and_abandon_context`
foreign import ccall "gr_direct_context_release_resources_and_abandon_context" gr_direct_context_release_resources_and_abandon_context :: (Ptr (Gr_direct_context)) -> IO (())
-- | `gr_direct_context_get_resource_cache_limit`
foreign import ccall "gr_direct_context_get_resource_cache_limit" gr_direct_context_get_resource_cache_limit :: (Ptr (Gr_direct_context)) -> IO (CSize)
-- | `gr_direct_context_set_resource_cache_limit`
foreign import ccall "gr_direct_context_set_resource_cache_limit" gr_direct_context_set_resource_cache_limit :: (Ptr (Gr_direct_context)) -> (CSize) -> IO (())
-- | `gr_direct_context_get_resource_cache_usage`
foreign import ccall "gr_direct_context_get_resource_cache_usage" gr_direct_context_get_resource_cache_usage :: (Ptr (Gr_direct_context)) -> (Ptr (CInt)) -> (Ptr (CSize)) -> IO (())
-- | `gr_direct_context_flush`
foreign import ccall "gr_direct_context_flush" gr_direct_context_flush :: (Ptr (Gr_direct_context)) -> IO (())
-- | `gr_direct_context_submit`
foreign import ccall "gr_direct_context_submit" gr_direct_context_submit :: (Ptr (Gr_direct_context)) -> (CBool) -> IO (CBool)
-- | `gr_direct_context_flush_and_submit`
foreign import ccall "gr_direct_context_flush_and_submit" gr_direct_context_flush_and_submit :: (Ptr (Gr_direct_context)) -> (CBool) -> IO (())
-- | `gr_direct_context_flush_image`
foreign import ccall "gr_direct_context_flush_image" gr_direct_context_flush_image :: (Ptr (Gr_direct_context)) -> (Ptr (Sk_image)) -> IO (())
-- | `gr_direct_context_flush_surface`
foreign import ccall "gr_direct_context_flush_surface" gr_direct_context_flush_surface :: (Ptr (Gr_direct_context)) -> (Ptr (Sk_surface)) -> IO (())
-- | `gr_direct_context_reset_context`
foreign import ccall "gr_direct_context_reset_context" gr_direct_context_reset_context :: (Ptr (Gr_direct_context)) -> (Word32) -> IO (())
-- | `gr_direct_context_dump_memory_statistics`
foreign import ccall "gr_direct_context_dump_memory_statistics" gr_direct_context_dump_memory_statistics :: (Ptr (Gr_direct_context)) -> (Ptr (Sk_tracememorydump)) -> IO (())
-- | `gr_direct_context_free_gpu_resources`
foreign import ccall "gr_direct_context_free_gpu_resources" gr_direct_context_free_gpu_resources :: (Ptr (Gr_direct_context)) -> IO (())
-- | `gr_direct_context_perform_deferred_cleanup`
foreign import ccall "gr_direct_context_perform_deferred_cleanup" gr_direct_context_perform_deferred_cleanup :: (Ptr (Gr_direct_context)) -> (CLLong) -> IO (())
-- | `gr_direct_context_purge_unlocked_resources_bytes`
foreign import ccall "gr_direct_context_purge_unlocked_resources_bytes" gr_direct_context_purge_unlocked_resources_bytes :: (Ptr (Gr_direct_context)) -> (CSize) -> (CBool) -> IO (())
-- | `gr_direct_context_purge_unlocked_resources`
foreign import ccall "gr_direct_context_purge_unlocked_resources" gr_direct_context_purge_unlocked_resources :: (Ptr (Gr_direct_context)) -> (CBool) -> IO (())
-- | `gr_glinterface_create_native_interface`
foreign import ccall "gr_glinterface_create_native_interface" gr_glinterface_create_native_interface :: IO (Ptr (Gr_glinterface))
-- | `gr_glinterface_assemble_interface`
foreign import ccall "gr_glinterface_assemble_interface" gr_glinterface_assemble_interface :: (Ptr (())) -> (FunPtr (Gr_gl_get_proc)) -> IO (Ptr (Gr_glinterface))
-- | `gr_glinterface_assemble_gl_interface`
foreign import ccall "gr_glinterface_assemble_gl_interface" gr_glinterface_assemble_gl_interface :: (Ptr (())) -> (FunPtr (Gr_gl_get_proc)) -> IO (Ptr (Gr_glinterface))
-- | `gr_glinterface_assemble_gles_interface`
foreign import ccall "gr_glinterface_assemble_gles_interface" gr_glinterface_assemble_gles_interface :: (Ptr (())) -> (FunPtr (Gr_gl_get_proc)) -> IO (Ptr (Gr_glinterface))
-- | `gr_glinterface_assemble_webgl_interface`
foreign import ccall "gr_glinterface_assemble_webgl_interface" gr_glinterface_assemble_webgl_interface :: (Ptr (())) -> (FunPtr (Gr_gl_get_proc)) -> IO (Ptr (Gr_glinterface))
-- | `gr_glinterface_unref`
foreign import ccall "gr_glinterface_unref" gr_glinterface_unref :: (Ptr (Gr_glinterface)) -> IO (())
-- | `gr_glinterface_validate`
foreign import ccall "gr_glinterface_validate" gr_glinterface_validate :: (Ptr (Gr_glinterface)) -> IO (CBool)
-- | `gr_glinterface_has_extension`
foreign import ccall "gr_glinterface_has_extension" gr_glinterface_has_extension :: (Ptr (Gr_glinterface)) -> (Ptr (CChar)) -> IO (CBool)
-- | `gr_vk_extensions_new`
foreign import ccall "gr_vk_extensions_new" gr_vk_extensions_new :: IO (Ptr (Gr_vk_extensions))
-- | `gr_vk_extensions_delete`
foreign import ccall "gr_vk_extensions_delete" gr_vk_extensions_delete :: (Ptr (Gr_vk_extensions)) -> IO (())
-- | `gr_vk_extensions_init`
foreign import ccall "gr_vk_extensions_init" gr_vk_extensions_init :: (Ptr (Gr_vk_extensions)) -> (FunPtr (Gr_vk_get_proc)) -> (Ptr (())) -> (Ptr (Vk_instance)) -> (Ptr (Vk_physical_device)) -> (Word32) -> (Ptr (Ptr (CChar))) -> (Word32) -> (Ptr (Ptr (CChar))) -> IO (())
-- | `gr_vk_extensions_has_extension`
foreign import ccall "gr_vk_extensions_has_extension" gr_vk_extensions_has_extension :: (Ptr (Gr_vk_extensions)) -> (Ptr (CChar)) -> (Word32) -> IO (CBool)
-- | `gr_backendtexture_new_gl`
foreign import ccall "gr_backendtexture_new_gl" gr_backendtexture_new_gl :: (CInt) -> (CInt) -> (CBool) -> (Ptr (Gr_gl_textureinfo)) -> IO (Ptr (Gr_backendtexture))
-- | `gr_backendtexture_new_vulkan`
foreign import ccall "gr_backendtexture_new_vulkan" gr_backendtexture_new_vulkan :: (CInt) -> (CInt) -> (Ptr (Gr_vk_imageinfo)) -> IO (Ptr (Gr_backendtexture))
-- | `gr_backendtexture_new_metal`
foreign import ccall "gr_backendtexture_new_metal" gr_backendtexture_new_metal :: (CInt) -> (CInt) -> (CBool) -> (Ptr (Gr_mtl_textureinfo)) -> IO (Ptr (Gr_backendtexture))
-- | `gr_backendtexture_new_direct3d`
foreign import ccall "gr_backendtexture_new_direct3d" gr_backendtexture_new_direct3d :: (CInt) -> (CInt) -> (Ptr (Gr_d3d_textureresourceinfo)) -> IO (Ptr (Gr_backendtexture))
-- | `gr_backendtexture_delete`
foreign import ccall "gr_backendtexture_delete" gr_backendtexture_delete :: (Ptr (Gr_backendtexture)) -> IO (())
-- | `gr_backendtexture_is_valid`
foreign import ccall "gr_backendtexture_is_valid" gr_backendtexture_is_valid :: (Ptr (Gr_backendtexture)) -> IO (CBool)
-- | `gr_backendtexture_get_width`
foreign import ccall "gr_backendtexture_get_width" gr_backendtexture_get_width :: (Ptr (Gr_backendtexture)) -> IO (CInt)
-- | `gr_backendtexture_get_height`
foreign import ccall "gr_backendtexture_get_height" gr_backendtexture_get_height :: (Ptr (Gr_backendtexture)) -> IO (CInt)
-- | `gr_backendtexture_has_mipmaps`
foreign import ccall "gr_backendtexture_has_mipmaps" gr_backendtexture_has_mipmaps :: (Ptr (Gr_backendtexture)) -> IO (CBool)
-- | `gr_backendtexture_get_backend`
foreign import ccall "gr_backendtexture_get_backend" gr_backendtexture_get_backend :: (Ptr (Gr_backendtexture)) -> IO (Gr_backend)
-- | `gr_backendtexture_get_gl_textureinfo`
foreign import ccall "gr_backendtexture_get_gl_textureinfo" gr_backendtexture_get_gl_textureinfo :: (Ptr (Gr_backendtexture)) -> (Ptr (Gr_gl_textureinfo)) -> IO (CBool)
-- | `gr_backendrendertarget_new_gl`
foreign import ccall "gr_backendrendertarget_new_gl" gr_backendrendertarget_new_gl :: (CInt) -> (CInt) -> (CInt) -> (CInt) -> (Ptr (Gr_gl_framebufferinfo)) -> IO (Ptr (Gr_backendrendertarget))
-- | `gr_backendrendertarget_new_vulkan`
foreign import ccall "gr_backendrendertarget_new_vulkan" gr_backendrendertarget_new_vulkan :: (CInt) -> (CInt) -> (Ptr (Gr_vk_imageinfo)) -> IO (Ptr (Gr_backendrendertarget))
-- | `gr_backendrendertarget_new_metal`
foreign import ccall "gr_backendrendertarget_new_metal" gr_backendrendertarget_new_metal :: (CInt) -> (CInt) -> (Ptr (Gr_mtl_textureinfo)) -> IO (Ptr (Gr_backendrendertarget))
-- | `gr_backendrendertarget_new_direct3d`
foreign import ccall "gr_backendrendertarget_new_direct3d" gr_backendrendertarget_new_direct3d :: (CInt) -> (CInt) -> (Ptr (Gr_d3d_textureresourceinfo)) -> IO (Ptr (Gr_backendrendertarget))
-- | `gr_backendrendertarget_delete`
foreign import ccall "gr_backendrendertarget_delete" gr_backendrendertarget_delete :: (Ptr (Gr_backendrendertarget)) -> IO (())
-- | `gr_backendrendertarget_is_valid`
foreign import ccall "gr_backendrendertarget_is_valid" gr_backendrendertarget_is_valid :: (Ptr (Gr_backendrendertarget)) -> IO (CBool)
-- | `gr_backendrendertarget_get_width`
foreign import ccall "gr_backendrendertarget_get_width" gr_backendrendertarget_get_width :: (Ptr (Gr_backendrendertarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_height`
foreign import ccall "gr_backendrendertarget_get_height" gr_backendrendertarget_get_height :: (Ptr (Gr_backendrendertarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_samples`
foreign import ccall "gr_backendrendertarget_get_samples" gr_backendrendertarget_get_samples :: (Ptr (Gr_backendrendertarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_stencils`
foreign import ccall "gr_backendrendertarget_get_stencils" gr_backendrendertarget_get_stencils :: (Ptr (Gr_backendrendertarget)) -> IO (CInt)
-- | `gr_backendrendertarget_get_backend`
foreign import ccall "gr_backendrendertarget_get_backend" gr_backendrendertarget_get_backend :: (Ptr (Gr_backendrendertarget)) -> IO (Gr_backend)
-- | `gr_backendrendertarget_get_gl_framebufferinfo`
foreign import ccall "gr_backendrendertarget_get_gl_framebufferinfo" gr_backendrendertarget_get_gl_framebufferinfo :: (Ptr (Gr_backendrendertarget)) -> (Ptr (Gr_gl_framebufferinfo)) -> IO (CBool)
-- | `sk_drawable_unref`
foreign import ccall "sk_drawable_unref" sk_drawable_unref :: (Ptr (Sk_drawable)) -> IO (())
-- | `sk_drawable_get_generation_id`
foreign import ccall "sk_drawable_get_generation_id" sk_drawable_get_generation_id :: (Ptr (Sk_drawable)) -> IO (Word32)
-- | `sk_drawable_get_bounds`
foreign import ccall "sk_drawable_get_bounds" sk_drawable_get_bounds :: (Ptr (Sk_drawable)) -> (Ptr (Sk_rect)) -> IO (())
-- | `sk_drawable_draw`
foreign import ccall "sk_drawable_draw" sk_drawable_draw :: (Ptr (Sk_drawable)) -> (Ptr (Sk_canvas)) -> (Ptr (Sk_matrix)) -> IO (())
-- | `sk_drawable_new_picture_snapshot`
foreign import ccall "sk_drawable_new_picture_snapshot" sk_drawable_new_picture_snapshot :: (Ptr (Sk_drawable)) -> IO (Ptr (Sk_picture))
-- | `sk_drawable_notify_drawing_changed`
foreign import ccall "sk_drawable_notify_drawing_changed" sk_drawable_notify_drawing_changed :: (Ptr (Sk_drawable)) -> IO (())
-- | `sk_drawable_approximate_bytes_used`
foreign import ccall "sk_drawable_approximate_bytes_used" sk_drawable_approximate_bytes_used :: (Ptr (Sk_drawable)) -> IO (CSize)
